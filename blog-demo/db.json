{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/BSTree.md","hash":"60183fd87e91ef40726e03370e3597dd9cbb4655","modified":1722417456018},{"_id":"source/_posts/BiiigInt.md","hash":"715ee0c6bf5405f19eb92e58811158d801583fb1","modified":1715212576551},{"_id":"source/_posts/c-file-cache.md","hash":"c7542743bfdd7738d487b75a8697e28e27b050d1","modified":1722755710088},{"_id":"source/_posts/basicIO.md","hash":"db8bdac1fe882c2fe4f6e9b229fa1eb6c0b118b4","modified":1721883194416},{"_id":"source/_posts/cfileop.md","hash":"861b53bb46ac53dd6922d4c29aba0f4530f1be69","modified":1722001456479},{"_id":"source/_posts/cpp-file-op.md","hash":"e8be16321b5e98ef442b6a8e03c311fa33720bd7","modified":1716350953093},{"_id":"source/_posts/cpp-class.md","hash":"7a4e8f2a74943a59a236030ef2bf9931256664fe","modified":1715653247676},{"_id":"source/_posts/cppsizeof.md","hash":"c0b730e8c01d34f2c66dae2078e1cd2455c63698","modified":1720685162500},{"_id":"source/_posts/evn.md","hash":"5ba5f76a05bc075c0c6a0c4c1aa44f64898d3aaf","modified":1721918324455},{"_id":"source/_posts/create-mylist.md","hash":"fc807a91d09964502df0bcf0842783d7b013241c","modified":1715653226438},{"_id":"source/_posts/filesys.md","hash":"8f6d1cf375d32082b3b284d01efa8a477cf85942","modified":1721960963069},{"_id":"source/_posts/fork.md","hash":"d163f52434e0d1377f7fb70e6028529961365a8d","modified":1721917651970},{"_id":"source/_posts/libs.md","hash":"95659eb92cb2444961a27aa7152cd9bb740ac227","modified":1720340904946},{"_id":"source/_posts/heap-sort.md","hash":"9f7f483e46097ce0154eb8ce37b9148d5769219a","modified":1716304892748},{"_id":"source/_posts/mine-clearance.md","hash":"6dc2d64453d83deddd4d24bfe4abb2a4a0a815c9","modified":1715653268155},{"_id":"source/_posts/mergesort.md","hash":"35d2c34af3cdf3dcb5e5168232992dae90add52b","modified":1719990792497},{"_id":"source/_posts/myshell.md","hash":"09586da26379747684d29c2b84d8d45dd75393aa","modified":1718721501118},{"_id":"source/_posts/mutiInput.md","hash":"247cb73adc72b6733957c28f810264ebc61babab","modified":1715653295221},{"_id":"source/_posts/pipe.md","hash":"ad1e2a97fde0a1bed87a1d59471c34cdc03c57eb","modified":1722606417854},{"_id":"source/_posts/mistake1.md","hash":"822e5c6fc40110a8513faf0fc92c3ffd04d8edab","modified":1699921923958},{"_id":"source/_posts/pointer.md","hash":"003fcc6e68cd79c79ade4cb441548caed998a222","modified":1716390823399},{"_id":"source/_posts/processPool.md","hash":"699213a6eb8ca809ae583edcc9b0354fb016ff14","modified":1722600196242},{"_id":"source/_posts/progress.md","hash":"063df9ded20ede09c5b2b9e2a8d2500b937d6466","modified":1720366977386},{"_id":"source/_posts/str-arr.md","hash":"7c1bff097e8250d6076623964beb3fc6a627ea74","modified":1715653316898},{"_id":"source/_posts/progressMSG.md","hash":"b89806fa08ddb37cccc6aa08e848776d1d89feb4","modified":1722662955587},{"_id":"source/_posts/usestatic.md","hash":"df62edaaa1dfd11bf4056988c30ebb469a64df66","modified":1719993665162},{"_id":"source/_posts/useScanf.md","hash":"f0f53909512bdf9121b0f35aaf78c141ff019d3d","modified":1715653305184},{"_id":"source/_posts/vim-cmd.md","hash":"b722350cf6688e4d88ff6beb06799e97bb4905e9","modified":1720001033185},{"_id":"source/_posts/vueTheRoad.md","hash":"25c26bc360276733b794c2eb53711a598af5eec0","modified":1715653332821},{"_id":"source/about/indext.md","hash":"b62bfe0aaa1cc14a88cf6fa10fdaee7dbaa470fc","modified":1715079336157},{"_id":"source/_posts/算法_按位异或.md","hash":"99cc40b971ce541f575004db09cccaa400c17ae3","modified":1699921923959},{"_id":"source/_data/link.yml","hash":"58f368035b02bf3025c359e09957f4ec9e3282b7","modified":1699921923957},{"_id":"source/categories/index.md","hash":"7f3a092a9a6047f93cfd3a0e0f0d513bdff30e26","modified":1699921923960},{"_id":"source/_posts/双指针.md","hash":"1973e284c2890022207d6c1929c58a3f93d6945b","modified":1715212006059},{"_id":"source/img/favicon.png","hash":"904181e69465f5d510898b39eeb942886241fade","modified":1715078534656},{"_id":"source/link/index.md","hash":"5e32c142f4cfa8afa7410a6396542369a68c38d0","modified":1699921923961},{"_id":"source/coss/custom.css","hash":"2fc60914d6e055b13d217d1db06ec681349fb125","modified":1699921923960},{"_id":"source/tags/index.md","hash":"4571b54f250e173f7f4c5446a987a5239d2a1cd1","modified":1699921923962},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"f6ae7f38d016135340fd25c5fd1be65452b6773d","modified":1699921921411},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1699921921411},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"b684e7cc1100d22a59a13ec48d09b1eef0610e34","modified":1699921921412},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"d5de86b2fe60bae4eaf5aa8735fb681b10d29232","modified":1699921921513},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1699921921413},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"5ca893c78f8971f512da55c785b8ccbfa9d37cfc","modified":1699921921411},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"6d68dab3b79accb1bceb4710c8aaab724a45053a","modified":1699921921513},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"d444cbb5c5456aaf27f3fb1b4308634689c7bb53","modified":1699921921412},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1699921921439},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1699921921413},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"4957fd976c99745d3aa24000a85b2955e8d1cf81","modified":1699921921412},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1699921921440},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1699921921439},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"145ec301db185c8a06de1f34a77ca391e1d2729b","modified":1699921921413},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"cc8672dc0c2762b694f689cbeb6e34810f1c194e","modified":1699921921412},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1699921921410},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1699921921439},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1699921921410},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1699921921413},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1699921921410},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1699921921410},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1699921921414},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1699921921411},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1699921921413},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1699921921418},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1699921921420},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"b50b0afdc41c54279587410c3f82c8cb3c5ff46d","modified":1699921921414},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1699921921514},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1699921921514},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1699921921421},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"c55f05400eb27ab051f47396ec8d4249ce6f71ec","modified":1699921921421},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1699921921515},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1699921921514},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1699921921514},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1699921921515},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1699921921516},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1699921921516},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"a3323fcb11cfd3f3e21230737341beb5d76b40aa","modified":1699921921516},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1699921921517},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1699921921515},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1699921921518},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"7222102f9919f8e961d4f1688425845fb7775ada","modified":1699921921517},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1699921921519},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"6005907245dd74b153f03afdccfae1abb66bb482","modified":1699921921517},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"b8d95ac1851c37f1dce4b1dd4a1d3ffdff501a03","modified":1699921921519},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1699921921518},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1699921921520},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1699921921520},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1699921921519},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1699921921520},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"fc5a80707cf522378be3cf8638ef78bccc88c510","modified":1699921921521},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1699921921522},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1699921921521},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1699921921521},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1699921921539},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1699921921538},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1699921921540},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"e1e37a2e932163886789b72624c7348545003f1d","modified":1699921921539},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"4fd1cd7a02dedcb686caf6149c35fd8e1fbcafc9","modified":1699921921541},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"a102a6cacf7b20183946a54580867a964f3674c4","modified":1699921921543},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1699921921417},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"13b2b02118a0f4ec2e9e0bb1b90f5b1a30a70f44","modified":1699921921543},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1699921921418},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1699921921417},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1699921921539},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1699921921418},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1699921921418},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1699921921417},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1699921921415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1699921921414},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1699921921419},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1699921921418},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1699921921414},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1699921921415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"f5207840c96df6b26ad227433babca4f8c362624","modified":1699921921415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1699921921417},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1699921921419},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1699921921415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1699921921415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1699921921415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1699921921420},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1699921921421},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1699921921420},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1699921921419},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"3adb731465a4ab14529277fd7867889e0800ad16","modified":1699921921419},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1699921921420},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1699921921422},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1699921921433},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1699921921433},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1699921921436},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1699921921420},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1699921921429},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1699921921436},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"82bb447a5d045980789cf3f9de9d49cc32011b13","modified":1699921921433},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1699921921437},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1699921921437},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1699921921436},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1699921921437},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1699921921437},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1699921921438},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1699921921438},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1699921921438},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1699921921438},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1699921921437},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1699921921438},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"431b4a252443e224872bd6b4f6aa76ed1679a82c","modified":1699921921523},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"ba94ceb40d7c81372a76103d958dcc2cc6a84f00","modified":1699921921439},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1699921921526},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"e43017dbc73e0ce95dcfcb9dfb4fcce0c1715dd4","modified":1699921921523},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1699921921526},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"9893656128c347d1c09c90784627c84c979b326f","modified":1699921921523},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"3969f599e8657adf8c3ce287d83f5d0a23f276a9","modified":1699921921526},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1699921921527},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1699921921527},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"20303c0dad28e5c5335ce2fa6582f1fafae5b628","modified":1699921921527},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"fc029f5e00d7904c0878efd20dd4e09fc55e1d03","modified":1699921921528},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1699921921528},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1699921921528},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1699921921530},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1699921921530},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1699921921530},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1699921921533},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1699921921532},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1699921921530},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1699921921532},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1699921921531},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1699921921534},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"57d333ef47bfb8fd22da31f600527c9d91e8e322","modified":1699921921534},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1699921921535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1699921921533},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1699921921533},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"9066a62e442affce3a923a06a90486bf9d364e0e","modified":1699921921531},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"4c86c10f8ec0c8fb60b400a5a2f14699d3155be4","modified":1699921921532},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1699921921536},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1699921921534},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1699921921536},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"cf90ea339fbb7f345212319627fcd68964024e40","modified":1699921921535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1699921921536},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1699921921535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1699921921535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1699921921537},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1699921921537},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1699921921536},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1699921921537},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1699921921538},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"40e76d6da538cb3c1ef6b79ffc0adfa64fe6b8ba","modified":1699921921542},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"0010c7a10d265c4329f0fd4db85b4a9ea7ba06b5","modified":1699921921421},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1699921921422},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"bbe930d8425bdaee2a5ba3cade42b617cee42934","modified":1699921921542},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1699921921423},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1699921921423},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1699921921422},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"c42bbce31fcd8846cf3360f4c383dec9368daeba","modified":1699921921423},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1699921921423},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1699921921422},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"19b5cfa1f77781246e02967cefe149f19170e45f","modified":1699921921422},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1699921921423},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"b47698e153c73cb29286b19bec5ddd920cb7ffba","modified":1699921921425},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f8b73bc63ec1b45d86aa3891d8c81ef4d5980943","modified":1699921921425},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"1a20b11fa0e6b1943e9b4d81e197a25ca36af66d","modified":1699921921426},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"b19b123df682b23491b17dcca386d79062cd8f6e","modified":1699921921426},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"a56edeb1ce2f1b1fb0e866a30543f274b9f7d69e","modified":1699921921426},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"7c7fbe27d82becc9ee509765f1195c69f5864a0b","modified":1699921921426},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1699921921428},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"c5e131d65a7ad30f3cb98ac3b94cd2f6a94c22e9","modified":1699921921426},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1699921921426},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f618457d62ef35d78a31e7fb1e375a462f64b228","modified":1699921921428},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"386a2b371644c2682560733617561ba6e6bf9ab2","modified":1699921921428},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4bb4cf58e219dfb8787273c931b1ea978b2ab88f","modified":1699921921428},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1699921921424},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1699921921424},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1699921921429},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"6b0d28671afd5ed286a714f25ba16256a2e7d880","modified":1699921921429},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1699921921424},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1699921921424},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1699921921430},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1699921921430},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1699921921425},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"da94966a9650ef3e4c69f3ee93758b30fa42cb78","modified":1699921921430},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1699921921425},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1699921921430},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"cfcfaed3a52fa47fff4cc65a053a2f025fb3b7b6","modified":1699921921431},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"4f8bd22c5c32d5430cbe08ab4e861b6f8b86f820","modified":1699921921431},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"a6be932d1f64c6190f5d03b5b77fba09fa0fd6b8","modified":1699921921431},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"4fb998a05e51ef2302775945883307ee3039a544","modified":1699921921432},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"2f3af113713563e34b10bbe998cc15008f81c85a","modified":1699921921433},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"edd4ebf76a79fb74cfae03a286fab90f74324dbd","modified":1699921921432},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1699921921431},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1699921921434},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"4b9c35375e0eb9cf99ad246d5ca838eca64a635d","modified":1699921921434},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1699921921434},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ce4ab79c85df9f77395269eb01e9a023d7f96376","modified":1699921921432},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1699921921435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1699921921435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1699921921435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1699921921435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"ba04174d977da988a1d49c06641262c413352346","modified":1699921921434},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1699921921524},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1699921921524},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1699921921525},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1699921921525},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1699921921525},{"_id":"public/coss/custom.css","hash":"30a41bf8495adcb1d4a1bc1f8d7f5e16657e5643","modified":1722761723621},{"_id":"public/search.xml","hash":"ec390b8d4c4f51671543b2a059be2a141f980468","modified":1722761723621},{"_id":"public/404.html","hash":"a703f148346e39065ae3f185d8229997cf1cba05","modified":1722761723621},{"_id":"public/categories/index.html","hash":"0955e1f8a088d2c473af56b36bcff152aed717c3","modified":1722761723621},{"_id":"public/about/indext.html","hash":"6c935ff01fa79c52e14e81437dcd84f616768e8b","modified":1722761723621},{"_id":"public/tags/index.html","hash":"0e84ed13383a872477f7c8032833bd929260a060","modified":1722761723621},{"_id":"public/link/index.html","hash":"203f3de1601527fa8ab2b5bc901a13efe5f23459","modified":1722761723621},{"_id":"public/2024/08/02/progressMSG/index.html","hash":"d0c72b7a54d204760e289841f24acc07fd8c6d17","modified":1722761723621},{"_id":"public/2024/08/02/pipe/index.html","hash":"da35765c73f2c17b121e6cf9dd8b7309cb1a69be","modified":1722761723621},{"_id":"public/2024/08/02/processPool/index.html","hash":"29baaeadb9b1506857f628ed016731bb5e5ab236","modified":1722761723621},{"_id":"public/2024/07/27/BSTree/index.html","hash":"bee1633872624c756ff0ee80489731460c1d5e4f","modified":1722761723621},{"_id":"public/2024/07/26/c-file-cache/index.html","hash":"3b9df3fbea9f5230cdffeb8949e38a3fdb705b67","modified":1722761723621},{"_id":"public/2024/07/26/filesys/index.html","hash":"a31f9788fa336511b4305189ce910229ef9ced57","modified":1722761723621},{"_id":"public/2024/07/15/cfileop/index.html","hash":"39eca88bd55497f2a9f0a207bcd35c0b1c5faa43","modified":1722761723621},{"_id":"public/2024/07/10/cppsizeof/index.html","hash":"4919d8594f3d84d013213560d2f6a85101ed0543","modified":1722761723621},{"_id":"public/2024/07/10/basicIO/index.html","hash":"e4ea4b1e1f7a5e4f1924190582c10aaa10fc1756","modified":1722761723621},{"_id":"public/2024/07/08/libs/index.html","hash":"3e0c35e3ba1b5c352fed02b4bceb66ab523284ec","modified":1722761723621},{"_id":"public/2024/07/07/fork/index.html","hash":"3c57e641013dc75205baf924b2d3cee6421c1842","modified":1722761723621},{"_id":"public/2024/07/06/evn/index.html","hash":"5081d3d967a0e3f8e07224a618ebf178f7e9cf55","modified":1722761723621},{"_id":"public/2024/07/04/progress/index.html","hash":"3ef14eeb0f274c57461f35397b2b996f29470253","modified":1722761723621},{"_id":"public/2024/06/30/usestatic/index.html","hash":"10a042372f9d5a4dfe32d60af39a1cdeb4b4253f","modified":1722761723621},{"_id":"public/2024/06/28/mergesort/index.html","hash":"bab58c1bbe01adc094a6a48648cd90e992d8e7ff","modified":1722761723621},{"_id":"public/2024/06/04/myshell/index.html","hash":"88bd37e79457e43cc119f07f813cbe6bd1cb6b8a","modified":1722761723621},{"_id":"public/2024/05/21/heap-sort/index.html","hash":"c490d4efcdf6eb7096fcc1736d1bd9363d71a6da","modified":1722761723621},{"_id":"public/2024/05/14/cpp-file-op/index.html","hash":"3fe3b470dece80c386180127c753358d95dee9b1","modified":1722761723621},{"_id":"public/2024/04/26/create-mylist/index.html","hash":"64fe3aa08837b968073964edb14b2558027b30ea","modified":1722761723621},{"_id":"public/2023/12/07/cpp-class/index.html","hash":"91d8979f31c3f4e260a78c552fd3e078ba2eb1c8","modified":1722761723621},{"_id":"public/2023/12/11/vim-cmd/index.html","hash":"dc73593174d4f963309b40d7067d058a7da19f8f","modified":1722761723621},{"_id":"public/2023/11/23/pointer/index.html","hash":"b0763e62cd85ce622ce3672e4ff0274bd958fa76","modified":1722761723621},{"_id":"public/2023/11/08/str-arr/index.html","hash":"d3c16deaeeb0cffdaf6151e537854d61a431ad78","modified":1722761723621},{"_id":"public/2023/10/30/mine-clearance/index.html","hash":"c6fd9280bd785a48302f26c9fc849e7e455f0d41","modified":1722761723621},{"_id":"public/2023/10/18/mutiInput/index.html","hash":"789fb82efec99a4dfa08fd31faa069fe28ad32ab","modified":1722761723621},{"_id":"public/2023/10/14/BiiigInt/index.html","hash":"786c83dbbe32b52bd769eb8ecfcf841c10539aad","modified":1722761723621},{"_id":"public/2023/10/05/useScanf/index.html","hash":"ab7f71c4eed2b73ea47352fc41328184c370117e","modified":1722761723621},{"_id":"public/2023/09/23/vueTheRoad/index.html","hash":"cd8f30b56c5da085582e57dde19be91c28d5d355","modified":1722761723621},{"_id":"public/2023/09/12/双指针/index.html","hash":"18cf91c8295a09a9c5555936fbc2c24d6bd1a159","modified":1722761723621},{"_id":"public/2023/09/04/算法_按位异或/index.html","hash":"e8a0e9bca62f657fe3108de28b6eebe5e072daf4","modified":1722761723621},{"_id":"public/2023/08/28/mistake1/index.html","hash":"9825157a34a141ca2872161f8db781b440293dfb","modified":1722761723621},{"_id":"public/archives/index.html","hash":"7b51f6367271cb9184b94aea37a9e51b68d6816f","modified":1722761723621},{"_id":"public/archives/page/2/index.html","hash":"fb2d437afecbb3d38d627b4e041fc9fe812f34f0","modified":1722761723621},{"_id":"public/archives/page/3/index.html","hash":"2e0eaa68398a784cc0bd7c7e9f9fa832e369ee09","modified":1722761723621},{"_id":"public/archives/page/4/index.html","hash":"a3a24aa73043b3e68c4ca29a2683fad39ebc5081","modified":1722761723621},{"_id":"public/archives/2023/index.html","hash":"575062eb27dcb3760c74cc89fe0df3847d8444bd","modified":1722761723621},{"_id":"public/archives/2023/page/2/index.html","hash":"37f5ceca089da72050423476119eba2eb6d64d8d","modified":1722761723621},{"_id":"public/archives/2023/08/index.html","hash":"679f75051e79c2b19fdd0851cfe936062aa6992d","modified":1722761723621},{"_id":"public/archives/2023/09/index.html","hash":"0fa1e88a72ee07e9ee91e76b64dd7d0f193b7915","modified":1722761723621},{"_id":"public/archives/2023/10/index.html","hash":"dfc1b3ac9288e84aab997447f17ee597579858ba","modified":1722761723621},{"_id":"public/archives/2023/11/index.html","hash":"faff35037ddd15ae3a62191fae8b2f03b6859f9c","modified":1722761723621},{"_id":"public/archives/2023/12/index.html","hash":"9b322fe0ce7135d39a40da4829bbfad11c17bd84","modified":1722761723621},{"_id":"public/archives/2024/index.html","hash":"c16814832b0ca80d4a64bd705326b49e4e7c75f2","modified":1722761723621},{"_id":"public/archives/2024/page/2/index.html","hash":"56cf8c2acf6629d15dee7e46de37c43cb4ab9160","modified":1722761723621},{"_id":"public/archives/2024/04/index.html","hash":"1b41fafa231ebe64bcc249d7c33808e2daff456b","modified":1722761723621},{"_id":"public/archives/2024/06/index.html","hash":"acd71f5cf07408b19a57218d11ca9bb74010f58d","modified":1722761723621},{"_id":"public/archives/2024/05/index.html","hash":"4716fe1bdc5220996e7474dbdf0b402324f7ea80","modified":1722761723621},{"_id":"public/index.html","hash":"4ff787c505de43f66089b7e9bf6e19cd07d6ef8f","modified":1722761723621},{"_id":"public/archives/2024/07/index.html","hash":"be833ab32d77d43e125b160d5b5f2879e1f2ed2d","modified":1722761723621},{"_id":"public/archives/2024/08/index.html","hash":"f55fef26f8f1d1eaa7d7b19aa150548afaee90e5","modified":1722761723621},{"_id":"public/page/2/index.html","hash":"196b1dcc3c8737ff9cf4307b2995df82dfb4e6d4","modified":1722761723621},{"_id":"public/page/4/index.html","hash":"6ee47f7fe4c324679caf531accf66b46aa907ad7","modified":1722761723621},{"_id":"public/page/3/index.html","hash":"abede9b774956ab5c20eea04c274081d752ed1be","modified":1722761723621},{"_id":"public/tags/数据结构-二叉树-搜索树/index.html","hash":"fbfe26cb98a6be794438ddc0b01176f340f1a674","modified":1722761723621},{"_id":"public/tags/Linux/index.html","hash":"27c9f1f406dde3877283dce67ff09f4f7df393a6","modified":1722761723621},{"_id":"public/tags/C语言/index.html","hash":"772ad2d3f2964e3b0c89d04a4e7a557e11ba4b7b","modified":1722761723621},{"_id":"public/tags/C-文件/index.html","hash":"c11919b709a9cd8bead4feb06295368fb98f3ec7","modified":1722761723621},{"_id":"public/tags/C-类和对象/index.html","hash":"a8507ea4083d59e56ccaf6d7aeae52bbb78136ac","modified":1722761723621},{"_id":"public/tags/环境变量/index.html","hash":"50e57dec157e35703e9adbbf8d3cb10e1955aa88","modified":1722761723621},{"_id":"public/tags/fork-Linux/index.html","hash":"9aa96eb6da6d4fd4c88d0ba48e0268273671e945","modified":1722761723621},{"_id":"public/tags/七大排序-堆排序-排序/index.html","hash":"67848420f496d1e2318b6dd06415ce6c57d3272f","modified":1722761723621},{"_id":"public/tags/动态库-静态库/index.html","hash":"2212cf2052deb3f605634922a14c8915d87ab1cf","modified":1722761723621},{"_id":"public/tags/排序-算法/index.html","hash":"a76ea7bbbef10a4f71f10d975132ae511bd43731","modified":1722761723621},{"_id":"public/tags/C语言-实践项目/index.html","hash":"ff5dd289be2c1427d2660b9a0ed31c837ce9eedb","modified":1722761723621},{"_id":"public/tags/C语言-多组输入/index.html","hash":"f2b06950ebad28bf7e2d271542d97a0adcda9efb","modified":1722761723621},{"_id":"public/tags/Linux-C/index.html","hash":"157d5e62f190cb671d92c06d9060ba4799fe14df","modified":1722761723621},{"_id":"public/tags/进程-Linux/index.html","hash":"e5f81e7886e85812327062d2b3ad055e68c2c3b3","modified":1722761723621},{"_id":"public/tags/C语言-字符串-数组/index.html","hash":"392c5c38c18d437ecb7cd4877ba4081e533eccdd","modified":1722761723621},{"_id":"public/tags/Linux-vim/index.html","hash":"17ba269d4c75798f226a01f44c6782f2bc6e1326","modified":1722761723621},{"_id":"public/tags/回顾/index.html","hash":"be39c4b4537a5506680a3730cd2e30bf9e0e4aa6","modified":1722761723621},{"_id":"public/tags/算法/index.html","hash":"862670fccfbb93c4541cf6d5aa24e1a980bade48","modified":1722761723621},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1722761723621},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1722761723621},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1722761723621},{"_id":"public/css/index.css","hash":"3db711ba85c6ee09832da7cc10b118fbe1a257d5","modified":1722761723621},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1722761723621},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1722761723621},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1722761723621},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1722761723621},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1722761723621},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1722761723621}],"Category":[],"Data":[{"_id":"link","data":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}],"Page":[{"title":"categories","date":"2023-09-03T03:23:20.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-09-03 11:23:20\ntype: \"categories\"\n---\n","updated":"2023-11-14T00:32:03.960Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clzfbulux0000v8p5avbo9gqk","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":""},{"title":"关于","date":"2023-08-23T04:00:00.000Z","type":"about","_content":"\n这是个about","source":"about/indext.md","raw":"---\ntitle: 关于\ndate: 2023-08-23 12:00:00\ntype: \"about\"\n---\n\n这是个about","updated":"2024-05-07T10:55:36.157Z","path":"about/indext.html","comments":1,"layout":"page","_id":"clzfbulv10002v8p55p1u7fdg","content":"<p>这是个about</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<p>这是个about</p>\n"},{"title":"tags","date":"2023-08-22T01:54:41.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-08-22 09:54:41\ntype: \"tags\"\n---\n","updated":"2023-11-14T00:32:03.962Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clzfbulv30005v8p52pqp7s8g","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":""},{"_content":"/* 页脚与头图透明 */\n#footer {\n    background: transparent !important;\n  }\n  #page-header {\n    background: transparent !important;\n  }\n  \n  /* 白天模式遮罩透明 */\n  #footer::before {\n    background: transparent !important;\n  }\n  #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 夜间模式遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }","source":"coss/custom.css","raw":"/* 页脚与头图透明 */\n#footer {\n    background: transparent !important;\n  }\n  #page-header {\n    background: transparent !important;\n  }\n  \n  /* 白天模式遮罩透明 */\n  #footer::before {\n    background: transparent !important;\n  }\n  #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 夜间模式遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }","date":"2023-11-14T00:32:03.960Z","updated":"2023-11-14T00:32:03.960Z","path":"coss/custom.css","layout":"false","title":"","comments":1,"_id":"clzfbulv40007v8p5ap9h3oe9","content":"/* 页脚与头图透明 */\n#footer {\n    background: transparent !important;\n  }\n  #page-header {\n    background: transparent !important;\n  }\n  \n  /* 白天模式遮罩透明 */\n  #footer::before {\n    background: transparent !important;\n  }\n  #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 夜间模式遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":"/* 页脚与头图透明 */\n#footer {\n    background: transparent !important;\n  }\n  #page-header {\n    background: transparent !important;\n  }\n  \n  /* 白天模式遮罩透明 */\n  #footer::before {\n    background: transparent !important;\n  }\n  #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 夜间模式遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }"},{"title":"link","date":"2023-08-22T01:56:32.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-08-22 09:56:32\ntype: \"link\"\n---\n","updated":"2023-11-14T00:32:03.961Z","path":"link/index.html","comments":1,"layout":"page","_id":"clzfbulv40009v8p526tdgzjx","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"【数据结构】一步到胃，键值对版二叉搜索树","date":"2024-07-27T00:14:12.000Z","_content":"# 什么是二叉搜索树\n二叉搜索树的`定义`是一颗二叉树的所有节点满足:`根的左右孩子存在时，满足 左孩子 < 根 < 右孩子`\n\n`递归定义`则是:\n1. `左子树的根` < `根` < `右子树的根`\n2. `左子树是二叉搜索树`,`右子树是二叉搜索树`\n\n## 写一个验证二叉搜索树的函数 ##\n[Leetecode题目链接🔗](https://leetcode.cn/problems/validate-binary-search-tree/)\n\n# 封装一个二叉树类\n\n## 文件布置\n+ `BSTree.h`用于声明和实现`BSTree`类\n+ `test.cpp`用于测试\n\n### 头文件\n`BSTree.h`\n```C++\n#include <iostream>\n#include <utility>\n\n```\n`test.cpp`\n```C++\n#include \"BSTree.h\"\n```\n## 命名空间\n```C++\nnamespace key_value\n```\n这里使用`key_value`作为命名空间，表示这是键值表示的搜索二叉树\n\n## 定义节点\n二叉树的节点用于储存`键值对`和`左右指针`，并提供`默认构造函数`,使用`初始化列表`初始化成员变量\n\n```C++\ntemplate<class K,class V>\nclass BSTNode\n{\npublic:\n    BSTNode(const K& key = K(), const V& value = V())\n        :_left(nullptr)\n        , _right(nullptr)\n        , _key(key)\n        , _value(value)\n    {}\n    BSTNode<K, V>* _left;//指向左子树\n    BSTNode<K, V>* _right;//指向右子树\n    K _key;//储存键\n    V _value;//储存值\n};\n```\n\n## 封装二叉搜索树\n`Binary Search Tree`,这里用简称`BSTree`封装\n\n### 基本架构\n鉴于该类的接口基本依赖于成员变量，所以先组织好成员变量\n\n作为一颗`二叉树类`,成员变量仅需一个`指向根的指`针即可\n\n再次之前先用`typedef`定义一个`节点类`出来用于简化代码\n\n最后提供一个`默认构造函数`将`_root`初始化为`nullptr`\n\n```C++\n\ttemplate<class K,class V>\n\tclass BSTree\n\t{\n\t\ttypedef BSTNode<K, V> Node;//使用typedef简化代码\n\tpublic:\n\t\tBSTree() :_root(nullptr) {}//提供默认构造函数\n\tprivate:\n\t\tNode* _root;//指向根节点的指针作为成员变量\n\t};\n```\n\n### `insert`函数\n准备好后第一个接口就是`insert`,用于构建搜索二叉树\n\n这里需要考虑的情况有\n\n+ 空树时的插入\n+ 插入的`key`已存在\n+ 一般情况下成功的插入\n\n```C++\npublic:\nbool insert(const K& key, const V& value)\n{\n    if (_root == nullptr)//空树\n    {\n        _root = new Node(key, value);\n        return true;\n    }\n\n    Node* cur = _root;\n    Node* parent = nullptr;\n    while (cur)\n    {\n        if (key < cur->_key)//key比当前节点小，往左子树走\n        {\n            parent = cur;\n            cur = cur->_left;\n        }\n        else if (key > cur->_key)//往右子树走\n        {\n            parent = cur;\n            cur = cur->_right;\n        }\n        else\n        {\n            return false;//key已存在，插入失败\n        }\n    }\n    //此时cur为nullptr, parent为cur的结点\n    if (key < parent->_key)parent->_left = new Node(key, value);\n    else parent->_right = new Node(key, value);\n    return true;//成功插入\n}\n```\n\n### `in_order`函数\n使用此函数`前序遍历打印`二叉树来验证其满足`搜索树`的性质\n\n这里使用递归打印,所以要借助`_in_order`子函数\n\n```C++\npublic:\n    void in_order()\n    {\n        _in_order(_root);//传入根结点\n        std::cout << std::endl;\n    }\nprotected:\n    void _in_order(Node* root)\n    {\n        if (root == nullptr) return;\n        _in_order(root->_left);//先访问左结点\n        std::cout << root->_value << \" \" << std::endl;//再访问根结点\n        _in_order(root->_right);//最后访问右结点\n    }\n```\n\n然后写一段测试代码测试性质\n\n> test.cpp\n```C++\n#include \"BSTree.h\"\n#include <vector>\nusing namespace std;\nint main()\n{\n\tvector<int> arr({ 2,3,1,5,4,6,8,7 });//准备待插入的键值对\n\tkey_value::BSTree<int, int> bst;\n\tfor (int i = 0; i < arr.size(); ++i)\n\t{\n\t\tbst.insert(arr[i],arr[i]);//这里使键值相同，方便观察\n\t}\n\n\tbst.in_order();//测试\n\n\treturn 0;\n}\n```\n\n### `find`函数\n可以用`find`函数查找对应`key`的结点。\n\n同时观察可知，控制`cur`和`parent`的移动的代码段和前面的函数很像，所以给`find`函数分出来一个`_find`子函数，并使它返回`pair<Node*,Node*>`，将这两个指针返回利于其它函数对`_find`的回调\n\n同时为了简化代码，继续用`typedef`封装类型\n\n```C++\npublic:\n    typedef std::pair< Node*, Node* > PNN;//简化代码\n    bool find(const K& key)\n    {\n        return _find(key).first != nullptr;//检查是否找到\n    }\nprotected:\n\n    PNN _find(const K& key)//返回PNN用于简化其它接口\n    {\n        if (_root == nullptr) return {nullptr,nullptr};\n        Node* cur = _root;\n        Node* parent = nullptr;\n        while (cur)\n        {\n            if (key < cur->_key)//key比当前节点小，往左子树走\n            {\n                parent = cur;\n                cur = cur->_left;\n            }\n            else if (key > cur->_key)//往右子树走\n            {\n                parent = cur;\n                cur = cur->_right;\n            }\n            else\n            {\n                //找到key\n                return { cur,parent };\n            }\n        }\n        //没找到key,cur为nullptr\n        return { nullptr,parent };\n    }\n```\n\n#### 重写`insert`函数\n```C++\n    bool insert(const K& key, const V& value)\n    {\n        if (_root == nullptr)//空树\n        {\n            _root = new Node(key, value);\n            return true;\n        }\n        //====修改的部分====\n        PNN pnn = _find(key);\n\n        Node* cur = pnn.first;\n        Node* parent = pnn.second;\n\n        if (cur != nullptr)//该key已存在，插入失败\n        {\n            return false;\n        }\n        //================\n        \n        //此时cur为nullptr, parent为cur的结点\n        if (key < parent->_key)parent->_left = new Node(key, value);\n        else parent->_right = new Node(key, value);\n        return true;//成功插入\n    }\n```\n\n### `erase`函数\n这里也可以复用`_find`来方便地删除结点\n\n这里要考虑的情况有:\n+ 树为空\n+ 删除最后一个结点\n+ 删除根节点\n+ 左子树为空（包括叶子结点）\n+ 右子树为空\n+ 删除一般的结点\n\n当树有`>=2`个结点，且要删除`非叶子`结点时，要考虑`结点替换`，否则二叉树会断掉，这里一般两种策略，取左子树的最右结点（最大结点），或取右子树的最左结点（最小结点）\n\n```C++\npublic:\n    bool erase(const K& key)\n    {\n        if (_root == nullptr)return false;//空树无法删除\n        if (_root->_key == key && _root->_left == nullptr && _root->_right == nullptr)//删除最后一个结点\n        {\n            delete _root;\n            _root = nullptr;\n        }\n        PNN pnn = _find(key);\n        Node* cur = pnn.first;\n        Node* parent = pnn.second;\n        if (cur == nullptr) return false;//没找到该结点\n\n        //下面的cur必不为空\n        if(cur->_left == nullptr)\n        {\n            if (cur == _root)//为根节点时要替换根节点\n            {\n                Node* right = _root->_right;\n                delete _root;\n                _root = right;\n            }\n            //没有左子树，则直接移除结点,右子树替代原结点\n            if (cur == parent->_left) parent->_left = cur->_right;\n            else parent->_right = cur->_right;\n            delete cur;\n        }\n        else if (cur->_right == nullptr)\n        {\n            if (cur == _root)\n            {\n                Node* left = _root->_left;\n                delete _root;\n                _root = left;\n            }\n            //直接过继左子树\n            if (cur == parent->_left)parent->_left = cur->_left;\n            else parent->_right = cur->_left;\n        }\n        else \n        {\n            //找到左子树的最右结点\n            Node* _cur = cur->_left;\n            Node* _parent = cur;\n            while (_cur->_right != nullptr)\n            {\n                _parent = _cur;\n                _cur = _cur->_right;\n            }\n            //移走结点\n            if (_cur == _parent->_left) _parent->_left = nullptr;\n            else _parent->_right = nullptr;\n            //获取cur的左右结点,必须再移走结点后，否则可能出现指向自己的结点\n            _cur->_left = cur->_left;\n            _cur->_right = cur->_right;\n            //代替cur的位置\n            if (cur == _root)//删除根结点时\n            {\n                delete _root;\n                _root = _cur;\n            }\n            else//删除普通结点时\n            {\n                if (cur == parent->_left) parent->_left = _cur;\n                else parent->_right = _cur;\n                delete cur;\n            }\n\n        }\n        return true;\n    }\n```\n\n### 拷贝构造\n利用二叉树的性质，可以再构建个`copy`子函数来递归拷贝\n\n```C++\npublic:\n    BSTree(const BSTree<K>& t)\n    {\n        _root = Copy(t._root);\n    }\nprotected:\n    Node* copy(Node* root)\n    {\n        if (root == nullptr) return nullptr;//递归出口\n        Node* pnode = new Node(root->_key, root->_value);//复制结点\n        pnode->_left = copy(root->_left);\n        pnode->_right = copy(root->_right);\n        return pnode;\n    }\n```\n### 析构函数\n这里也用`destroy`子函数来递归地后序遍历依次删除各个结点\n```C++\npublic:\n    ~BSTree()\n    {\n        destroy(_root);\n    }\nprotected:\n    void destroy(Node* root)\n    {\n        if (root == nullptr) return;\n        destroy(root->_left);\n        destroy(root->_right);\n        delete root;\n    }\n```\n\n至此，一个基本的二叉搜索树已封装完成\n\n实现的功能有\n\n+ 构建二叉搜索树\n+ 拷贝复制二叉树\n+ 按`key`值查找\n+ 按`key`值删除\n\n### 完整代码\n```C++\n#pragma once\n#include <iostream>\n#include <utility>\n\nnamespace key_value\n{\n\ttemplate<class K,class V>\n\tclass BSTNode\n\t{\n\tpublic:\n\t\tBSTNode(const K& key = K(), const V& value = V())\n\t\t\t:_left(nullptr)\n\t\t\t, _right(nullptr)\n\t\t\t, _key(key)\n\t\t\t, _value(value)\n\t\t{}\n\t\tBSTNode<K, V>* _left;//指向左子树\n\t\tBSTNode<K, V>* _right;//指向右子树\n\t\tK _key;//储存键\n\t\tV _value;//储存值\n\t};\n\n\ttemplate<class K,class V>\n\tclass BSTree\n\t{\n\t\ttypedef BSTNode<K, V> Node;//使用typedef简化代码\n\tpublic:\n\t\tBSTree() :_root(nullptr) {}//提供默认构造函数\n\n\t\tBSTree(const BSTree<K, V>& bst)\n\t\t{\n\t\t\t_root = copy(bst._root);\n\t\t}\n\n\t\t~BSTree()\n\t\t{\n\t\t\tdestroy(_root);\n\t\t}\n\n\t\tbool insert(const K& key, const V& value)\n\t\t{\n\t\t\tif (_root == nullptr)//空树\n\t\t\t{\n\t\t\t\t_root = new Node(key, value);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t//====修改的部分====\n\t\t\tPNN pnn = _find(key);\n\n\t\t\tNode* cur = pnn.first;\n\t\t\tNode* parent = pnn.second;\n\n\t\t\tif (cur != nullptr)//该key已存在，插入失败\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t//================\n\t\t\t\n\t\t\t//此时cur为nullptr, parent为cur的结点\n\t\t\tif (key < parent->_key)parent->_left = new Node(key, value);\n\t\t\telse parent->_right = new Node(key, value);\n\t\t\treturn true;//成功插入\n\t\t}\n\n\t\tvoid in_order()\n\t\t{\n\t\t\t_in_order(_root);//传入根结点\n\t\t\tstd::cout << std::endl;\n\t\t}\n\tprotected:\n\t\tvoid _in_order(Node* root)\n\t\t{\n\t\t\tif (root == nullptr) return;\n\t\t\t_in_order(root->_left);//先访问左结点\n\t\t\tstd::cout << root->_value << \" \";//再访问根结点\n\t\t\t_in_order(root->_right);//最后访问右结点\n\t\t}\n\n\n\tpublic:\n\t\ttypedef std::pair< Node*, Node* > PNN;//简化代码\n\t\tbool find(const K& key)\n\t\t{\n\t\t\treturn _find(key).first != nullptr;//检查是否找到\n\t\t}\n\tprotected:\n\t\n\t\tPNN _find(const K& key)//返回PNN用于简化其它接口\n\t\t{\n\t\t\tif (_root == nullptr) return {nullptr,nullptr};\n\t\t\tNode* cur = _root;\n\t\t\tNode* parent = nullptr;\n\t\t\twhile (cur)\n\t\t\t{\n\t\t\t\tif (key < cur->_key)//key比当前节点小，往左子树走\n\t\t\t\t{\n\t\t\t\t\tparent = cur;\n\t\t\t\t\tcur = cur->_left;\n\t\t\t\t}\n\t\t\t\telse if (key > cur->_key)//往右子树走\n\t\t\t\t{\n\t\t\t\t\tparent = cur;\n\t\t\t\t\tcur = cur->_right;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//找到key\n\t\t\t\t\treturn { cur,parent };\n\t\t\t\t}\n\t\t\t}\n\t\t\t//没找到key,cur为nullptr\n\t\t\treturn { nullptr,parent };\n\t\t}\n\tpublic:\n\n\t\tbool erase(const K& key)\n\t\t{\n\t\t\tif (_root == nullptr)return false;//空树无法删除\n\t\t\tif (_root->_key == key && _root->_left == nullptr && _root->_right == nullptr)//删除最后一个结点\n\t\t\t{\n\t\t\t\tdelete _root;\n\t\t\t\t_root = nullptr;\n\t\t\t}\n\t\t\tPNN pnn = _find(key);\n\t\t\tNode* cur = pnn.first;\n\t\t\tNode* parent = pnn.second;\n\t\t\tif (cur == nullptr) return false;//没找到该结点\n\n\t\t\t//下面的cur必不为空\n\t\t\tif(cur->_left == nullptr)\n\t\t\t{\n\t\t\t\tif (cur == _root)//为根节点时要替换根节点\n\t\t\t\t{\n\t\t\t\t\tNode* right = _root->_right;\n\t\t\t\t\tdelete _root;\n\t\t\t\t\t_root = right;\n\t\t\t\t}\n\t\t\t\t//没有左子树，则直接移除结点,右子树替代原结点\n\t\t\t\tif (cur == parent->_left) parent->_left = cur->_right;\n\t\t\t\telse parent->_right = cur->_right;\n\t\t\t\tdelete cur;\n\t\t\t}\n\t\t\telse if (cur->_right == nullptr)\n\t\t\t{\n\t\t\t\tif (cur == _root)\n\t\t\t\t{\n\t\t\t\t\tNode* left = _root->_left;\n\t\t\t\t\tdelete _root;\n\t\t\t\t\t_root = left;\n\t\t\t\t}\n\t\t\t\t//直接过继左子树\n\t\t\t\tif (cur == parent->_left)parent->_left = cur->_left;\n\t\t\t\telse parent->_right = cur->_left;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\t//找到左子树的最右结点\n\t\t\t\tNode* _cur = cur->_left;\n\t\t\t\tNode* _parent = cur;\n\t\t\t\twhile (_cur->_right != nullptr)\n\t\t\t\t{\n\t\t\t\t\t_parent = _cur;\n\t\t\t\t\t_cur = _cur->_right;\n\t\t\t\t}\n\t\t\t\t//移走结点\n\t\t\t\tif (_cur == _parent->_left) _parent->_left = nullptr;\n\t\t\t\telse _parent->_right = nullptr;\n\t\t\t\t//获取cur的左右结点,必须再移走结点后，否则可能出现指向自己的结点\n\t\t\t\t_cur->_left = cur->_left;\n\t\t\t\t_cur->_right = cur->_right;\n\t\t\t\t//代替cur的位置\n\t\t\t\tif (cur == _root)//删除根结点时\n\t\t\t\t{\n\t\t\t\t\tdelete _root;\n\t\t\t\t\t_root = _cur;\n\t\t\t\t}\n\t\t\t\telse//删除普通结点时\n\t\t\t\t{\n\t\t\t\t\tif (cur == parent->_left) parent->_left = _cur;\n\t\t\t\t\telse parent->_right = _cur;\n\t\t\t\t\tdelete cur;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\n\tprotected:\n\t\tNode* copy(Node* root)\n\t\t{\n\t\t\tif (root == nullptr) return nullptr;//递归出口\n\t\t\tNode* pnode = new Node(root->_key, root->_value);//复制结点\n\t\t\tpnode->_left = copy(root->_left);\n\t\t\tpnode->_right = copy(root->_right);\n\t\t\treturn pnode;\n\t\t}\n\n\t\tvoid destroy(Node* root)\n\t\t{\n\t\t\tif (root == nullptr) return;\n\t\t\tdestroy(root->_left);\n\t\t\tdestroy(root->_right);\n\t\t\tdelete root;\n\t\t}\n\tprivate:\n\t\tNode* _root;//指向根节点的指针作为成员变量\n\t};\n}\n```\n","source":"_posts/BSTree.md","raw":"---\ntitle: 【数据结构】一步到胃，键值对版二叉搜索树\ndate: 2024-07-27 08:14:12\ntags: 数据结构 二叉树 搜索树\n---\n# 什么是二叉搜索树\n二叉搜索树的`定义`是一颗二叉树的所有节点满足:`根的左右孩子存在时，满足 左孩子 < 根 < 右孩子`\n\n`递归定义`则是:\n1. `左子树的根` < `根` < `右子树的根`\n2. `左子树是二叉搜索树`,`右子树是二叉搜索树`\n\n## 写一个验证二叉搜索树的函数 ##\n[Leetecode题目链接🔗](https://leetcode.cn/problems/validate-binary-search-tree/)\n\n# 封装一个二叉树类\n\n## 文件布置\n+ `BSTree.h`用于声明和实现`BSTree`类\n+ `test.cpp`用于测试\n\n### 头文件\n`BSTree.h`\n```C++\n#include <iostream>\n#include <utility>\n\n```\n`test.cpp`\n```C++\n#include \"BSTree.h\"\n```\n## 命名空间\n```C++\nnamespace key_value\n```\n这里使用`key_value`作为命名空间，表示这是键值表示的搜索二叉树\n\n## 定义节点\n二叉树的节点用于储存`键值对`和`左右指针`，并提供`默认构造函数`,使用`初始化列表`初始化成员变量\n\n```C++\ntemplate<class K,class V>\nclass BSTNode\n{\npublic:\n    BSTNode(const K& key = K(), const V& value = V())\n        :_left(nullptr)\n        , _right(nullptr)\n        , _key(key)\n        , _value(value)\n    {}\n    BSTNode<K, V>* _left;//指向左子树\n    BSTNode<K, V>* _right;//指向右子树\n    K _key;//储存键\n    V _value;//储存值\n};\n```\n\n## 封装二叉搜索树\n`Binary Search Tree`,这里用简称`BSTree`封装\n\n### 基本架构\n鉴于该类的接口基本依赖于成员变量，所以先组织好成员变量\n\n作为一颗`二叉树类`,成员变量仅需一个`指向根的指`针即可\n\n再次之前先用`typedef`定义一个`节点类`出来用于简化代码\n\n最后提供一个`默认构造函数`将`_root`初始化为`nullptr`\n\n```C++\n\ttemplate<class K,class V>\n\tclass BSTree\n\t{\n\t\ttypedef BSTNode<K, V> Node;//使用typedef简化代码\n\tpublic:\n\t\tBSTree() :_root(nullptr) {}//提供默认构造函数\n\tprivate:\n\t\tNode* _root;//指向根节点的指针作为成员变量\n\t};\n```\n\n### `insert`函数\n准备好后第一个接口就是`insert`,用于构建搜索二叉树\n\n这里需要考虑的情况有\n\n+ 空树时的插入\n+ 插入的`key`已存在\n+ 一般情况下成功的插入\n\n```C++\npublic:\nbool insert(const K& key, const V& value)\n{\n    if (_root == nullptr)//空树\n    {\n        _root = new Node(key, value);\n        return true;\n    }\n\n    Node* cur = _root;\n    Node* parent = nullptr;\n    while (cur)\n    {\n        if (key < cur->_key)//key比当前节点小，往左子树走\n        {\n            parent = cur;\n            cur = cur->_left;\n        }\n        else if (key > cur->_key)//往右子树走\n        {\n            parent = cur;\n            cur = cur->_right;\n        }\n        else\n        {\n            return false;//key已存在，插入失败\n        }\n    }\n    //此时cur为nullptr, parent为cur的结点\n    if (key < parent->_key)parent->_left = new Node(key, value);\n    else parent->_right = new Node(key, value);\n    return true;//成功插入\n}\n```\n\n### `in_order`函数\n使用此函数`前序遍历打印`二叉树来验证其满足`搜索树`的性质\n\n这里使用递归打印,所以要借助`_in_order`子函数\n\n```C++\npublic:\n    void in_order()\n    {\n        _in_order(_root);//传入根结点\n        std::cout << std::endl;\n    }\nprotected:\n    void _in_order(Node* root)\n    {\n        if (root == nullptr) return;\n        _in_order(root->_left);//先访问左结点\n        std::cout << root->_value << \" \" << std::endl;//再访问根结点\n        _in_order(root->_right);//最后访问右结点\n    }\n```\n\n然后写一段测试代码测试性质\n\n> test.cpp\n```C++\n#include \"BSTree.h\"\n#include <vector>\nusing namespace std;\nint main()\n{\n\tvector<int> arr({ 2,3,1,5,4,6,8,7 });//准备待插入的键值对\n\tkey_value::BSTree<int, int> bst;\n\tfor (int i = 0; i < arr.size(); ++i)\n\t{\n\t\tbst.insert(arr[i],arr[i]);//这里使键值相同，方便观察\n\t}\n\n\tbst.in_order();//测试\n\n\treturn 0;\n}\n```\n\n### `find`函数\n可以用`find`函数查找对应`key`的结点。\n\n同时观察可知，控制`cur`和`parent`的移动的代码段和前面的函数很像，所以给`find`函数分出来一个`_find`子函数，并使它返回`pair<Node*,Node*>`，将这两个指针返回利于其它函数对`_find`的回调\n\n同时为了简化代码，继续用`typedef`封装类型\n\n```C++\npublic:\n    typedef std::pair< Node*, Node* > PNN;//简化代码\n    bool find(const K& key)\n    {\n        return _find(key).first != nullptr;//检查是否找到\n    }\nprotected:\n\n    PNN _find(const K& key)//返回PNN用于简化其它接口\n    {\n        if (_root == nullptr) return {nullptr,nullptr};\n        Node* cur = _root;\n        Node* parent = nullptr;\n        while (cur)\n        {\n            if (key < cur->_key)//key比当前节点小，往左子树走\n            {\n                parent = cur;\n                cur = cur->_left;\n            }\n            else if (key > cur->_key)//往右子树走\n            {\n                parent = cur;\n                cur = cur->_right;\n            }\n            else\n            {\n                //找到key\n                return { cur,parent };\n            }\n        }\n        //没找到key,cur为nullptr\n        return { nullptr,parent };\n    }\n```\n\n#### 重写`insert`函数\n```C++\n    bool insert(const K& key, const V& value)\n    {\n        if (_root == nullptr)//空树\n        {\n            _root = new Node(key, value);\n            return true;\n        }\n        //====修改的部分====\n        PNN pnn = _find(key);\n\n        Node* cur = pnn.first;\n        Node* parent = pnn.second;\n\n        if (cur != nullptr)//该key已存在，插入失败\n        {\n            return false;\n        }\n        //================\n        \n        //此时cur为nullptr, parent为cur的结点\n        if (key < parent->_key)parent->_left = new Node(key, value);\n        else parent->_right = new Node(key, value);\n        return true;//成功插入\n    }\n```\n\n### `erase`函数\n这里也可以复用`_find`来方便地删除结点\n\n这里要考虑的情况有:\n+ 树为空\n+ 删除最后一个结点\n+ 删除根节点\n+ 左子树为空（包括叶子结点）\n+ 右子树为空\n+ 删除一般的结点\n\n当树有`>=2`个结点，且要删除`非叶子`结点时，要考虑`结点替换`，否则二叉树会断掉，这里一般两种策略，取左子树的最右结点（最大结点），或取右子树的最左结点（最小结点）\n\n```C++\npublic:\n    bool erase(const K& key)\n    {\n        if (_root == nullptr)return false;//空树无法删除\n        if (_root->_key == key && _root->_left == nullptr && _root->_right == nullptr)//删除最后一个结点\n        {\n            delete _root;\n            _root = nullptr;\n        }\n        PNN pnn = _find(key);\n        Node* cur = pnn.first;\n        Node* parent = pnn.second;\n        if (cur == nullptr) return false;//没找到该结点\n\n        //下面的cur必不为空\n        if(cur->_left == nullptr)\n        {\n            if (cur == _root)//为根节点时要替换根节点\n            {\n                Node* right = _root->_right;\n                delete _root;\n                _root = right;\n            }\n            //没有左子树，则直接移除结点,右子树替代原结点\n            if (cur == parent->_left) parent->_left = cur->_right;\n            else parent->_right = cur->_right;\n            delete cur;\n        }\n        else if (cur->_right == nullptr)\n        {\n            if (cur == _root)\n            {\n                Node* left = _root->_left;\n                delete _root;\n                _root = left;\n            }\n            //直接过继左子树\n            if (cur == parent->_left)parent->_left = cur->_left;\n            else parent->_right = cur->_left;\n        }\n        else \n        {\n            //找到左子树的最右结点\n            Node* _cur = cur->_left;\n            Node* _parent = cur;\n            while (_cur->_right != nullptr)\n            {\n                _parent = _cur;\n                _cur = _cur->_right;\n            }\n            //移走结点\n            if (_cur == _parent->_left) _parent->_left = nullptr;\n            else _parent->_right = nullptr;\n            //获取cur的左右结点,必须再移走结点后，否则可能出现指向自己的结点\n            _cur->_left = cur->_left;\n            _cur->_right = cur->_right;\n            //代替cur的位置\n            if (cur == _root)//删除根结点时\n            {\n                delete _root;\n                _root = _cur;\n            }\n            else//删除普通结点时\n            {\n                if (cur == parent->_left) parent->_left = _cur;\n                else parent->_right = _cur;\n                delete cur;\n            }\n\n        }\n        return true;\n    }\n```\n\n### 拷贝构造\n利用二叉树的性质，可以再构建个`copy`子函数来递归拷贝\n\n```C++\npublic:\n    BSTree(const BSTree<K>& t)\n    {\n        _root = Copy(t._root);\n    }\nprotected:\n    Node* copy(Node* root)\n    {\n        if (root == nullptr) return nullptr;//递归出口\n        Node* pnode = new Node(root->_key, root->_value);//复制结点\n        pnode->_left = copy(root->_left);\n        pnode->_right = copy(root->_right);\n        return pnode;\n    }\n```\n### 析构函数\n这里也用`destroy`子函数来递归地后序遍历依次删除各个结点\n```C++\npublic:\n    ~BSTree()\n    {\n        destroy(_root);\n    }\nprotected:\n    void destroy(Node* root)\n    {\n        if (root == nullptr) return;\n        destroy(root->_left);\n        destroy(root->_right);\n        delete root;\n    }\n```\n\n至此，一个基本的二叉搜索树已封装完成\n\n实现的功能有\n\n+ 构建二叉搜索树\n+ 拷贝复制二叉树\n+ 按`key`值查找\n+ 按`key`值删除\n\n### 完整代码\n```C++\n#pragma once\n#include <iostream>\n#include <utility>\n\nnamespace key_value\n{\n\ttemplate<class K,class V>\n\tclass BSTNode\n\t{\n\tpublic:\n\t\tBSTNode(const K& key = K(), const V& value = V())\n\t\t\t:_left(nullptr)\n\t\t\t, _right(nullptr)\n\t\t\t, _key(key)\n\t\t\t, _value(value)\n\t\t{}\n\t\tBSTNode<K, V>* _left;//指向左子树\n\t\tBSTNode<K, V>* _right;//指向右子树\n\t\tK _key;//储存键\n\t\tV _value;//储存值\n\t};\n\n\ttemplate<class K,class V>\n\tclass BSTree\n\t{\n\t\ttypedef BSTNode<K, V> Node;//使用typedef简化代码\n\tpublic:\n\t\tBSTree() :_root(nullptr) {}//提供默认构造函数\n\n\t\tBSTree(const BSTree<K, V>& bst)\n\t\t{\n\t\t\t_root = copy(bst._root);\n\t\t}\n\n\t\t~BSTree()\n\t\t{\n\t\t\tdestroy(_root);\n\t\t}\n\n\t\tbool insert(const K& key, const V& value)\n\t\t{\n\t\t\tif (_root == nullptr)//空树\n\t\t\t{\n\t\t\t\t_root = new Node(key, value);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t//====修改的部分====\n\t\t\tPNN pnn = _find(key);\n\n\t\t\tNode* cur = pnn.first;\n\t\t\tNode* parent = pnn.second;\n\n\t\t\tif (cur != nullptr)//该key已存在，插入失败\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t//================\n\t\t\t\n\t\t\t//此时cur为nullptr, parent为cur的结点\n\t\t\tif (key < parent->_key)parent->_left = new Node(key, value);\n\t\t\telse parent->_right = new Node(key, value);\n\t\t\treturn true;//成功插入\n\t\t}\n\n\t\tvoid in_order()\n\t\t{\n\t\t\t_in_order(_root);//传入根结点\n\t\t\tstd::cout << std::endl;\n\t\t}\n\tprotected:\n\t\tvoid _in_order(Node* root)\n\t\t{\n\t\t\tif (root == nullptr) return;\n\t\t\t_in_order(root->_left);//先访问左结点\n\t\t\tstd::cout << root->_value << \" \";//再访问根结点\n\t\t\t_in_order(root->_right);//最后访问右结点\n\t\t}\n\n\n\tpublic:\n\t\ttypedef std::pair< Node*, Node* > PNN;//简化代码\n\t\tbool find(const K& key)\n\t\t{\n\t\t\treturn _find(key).first != nullptr;//检查是否找到\n\t\t}\n\tprotected:\n\t\n\t\tPNN _find(const K& key)//返回PNN用于简化其它接口\n\t\t{\n\t\t\tif (_root == nullptr) return {nullptr,nullptr};\n\t\t\tNode* cur = _root;\n\t\t\tNode* parent = nullptr;\n\t\t\twhile (cur)\n\t\t\t{\n\t\t\t\tif (key < cur->_key)//key比当前节点小，往左子树走\n\t\t\t\t{\n\t\t\t\t\tparent = cur;\n\t\t\t\t\tcur = cur->_left;\n\t\t\t\t}\n\t\t\t\telse if (key > cur->_key)//往右子树走\n\t\t\t\t{\n\t\t\t\t\tparent = cur;\n\t\t\t\t\tcur = cur->_right;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//找到key\n\t\t\t\t\treturn { cur,parent };\n\t\t\t\t}\n\t\t\t}\n\t\t\t//没找到key,cur为nullptr\n\t\t\treturn { nullptr,parent };\n\t\t}\n\tpublic:\n\n\t\tbool erase(const K& key)\n\t\t{\n\t\t\tif (_root == nullptr)return false;//空树无法删除\n\t\t\tif (_root->_key == key && _root->_left == nullptr && _root->_right == nullptr)//删除最后一个结点\n\t\t\t{\n\t\t\t\tdelete _root;\n\t\t\t\t_root = nullptr;\n\t\t\t}\n\t\t\tPNN pnn = _find(key);\n\t\t\tNode* cur = pnn.first;\n\t\t\tNode* parent = pnn.second;\n\t\t\tif (cur == nullptr) return false;//没找到该结点\n\n\t\t\t//下面的cur必不为空\n\t\t\tif(cur->_left == nullptr)\n\t\t\t{\n\t\t\t\tif (cur == _root)//为根节点时要替换根节点\n\t\t\t\t{\n\t\t\t\t\tNode* right = _root->_right;\n\t\t\t\t\tdelete _root;\n\t\t\t\t\t_root = right;\n\t\t\t\t}\n\t\t\t\t//没有左子树，则直接移除结点,右子树替代原结点\n\t\t\t\tif (cur == parent->_left) parent->_left = cur->_right;\n\t\t\t\telse parent->_right = cur->_right;\n\t\t\t\tdelete cur;\n\t\t\t}\n\t\t\telse if (cur->_right == nullptr)\n\t\t\t{\n\t\t\t\tif (cur == _root)\n\t\t\t\t{\n\t\t\t\t\tNode* left = _root->_left;\n\t\t\t\t\tdelete _root;\n\t\t\t\t\t_root = left;\n\t\t\t\t}\n\t\t\t\t//直接过继左子树\n\t\t\t\tif (cur == parent->_left)parent->_left = cur->_left;\n\t\t\t\telse parent->_right = cur->_left;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\t//找到左子树的最右结点\n\t\t\t\tNode* _cur = cur->_left;\n\t\t\t\tNode* _parent = cur;\n\t\t\t\twhile (_cur->_right != nullptr)\n\t\t\t\t{\n\t\t\t\t\t_parent = _cur;\n\t\t\t\t\t_cur = _cur->_right;\n\t\t\t\t}\n\t\t\t\t//移走结点\n\t\t\t\tif (_cur == _parent->_left) _parent->_left = nullptr;\n\t\t\t\telse _parent->_right = nullptr;\n\t\t\t\t//获取cur的左右结点,必须再移走结点后，否则可能出现指向自己的结点\n\t\t\t\t_cur->_left = cur->_left;\n\t\t\t\t_cur->_right = cur->_right;\n\t\t\t\t//代替cur的位置\n\t\t\t\tif (cur == _root)//删除根结点时\n\t\t\t\t{\n\t\t\t\t\tdelete _root;\n\t\t\t\t\t_root = _cur;\n\t\t\t\t}\n\t\t\t\telse//删除普通结点时\n\t\t\t\t{\n\t\t\t\t\tif (cur == parent->_left) parent->_left = _cur;\n\t\t\t\t\telse parent->_right = _cur;\n\t\t\t\t\tdelete cur;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\n\tprotected:\n\t\tNode* copy(Node* root)\n\t\t{\n\t\t\tif (root == nullptr) return nullptr;//递归出口\n\t\t\tNode* pnode = new Node(root->_key, root->_value);//复制结点\n\t\t\tpnode->_left = copy(root->_left);\n\t\t\tpnode->_right = copy(root->_right);\n\t\t\treturn pnode;\n\t\t}\n\n\t\tvoid destroy(Node* root)\n\t\t{\n\t\t\tif (root == nullptr) return;\n\t\t\tdestroy(root->_left);\n\t\t\tdestroy(root->_right);\n\t\t\tdelete root;\n\t\t}\n\tprivate:\n\t\tNode* _root;//指向根节点的指针作为成员变量\n\t};\n}\n```\n","slug":"BSTree","published":1,"updated":"2024-07-31T09:17:36.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbuluz0001v8p55jfk5r8m","content":"<h1 id=\"什么是二叉搜索树\"><a href=\"#什么是二叉搜索树\" class=\"headerlink\" title=\"什么是二叉搜索树\"></a>什么是二叉搜索树</h1><p>二叉搜索树的<code>定义</code>是一颗二叉树的所有节点满足:<code>根的左右孩子存在时，满足 左孩子 &lt; 根 &lt; 右孩子</code></p>\n<p><code>递归定义</code>则是:</p>\n<ol>\n<li><code>左子树的根</code> &lt; <code>根</code> &lt; <code>右子树的根</code></li>\n<li><code>左子树是二叉搜索树</code>,<code>右子树是二叉搜索树</code></li>\n</ol>\n<h2 id=\"写一个验证二叉搜索树的函数\"><a href=\"#写一个验证二叉搜索树的函数\" class=\"headerlink\" title=\"写一个验证二叉搜索树的函数\"></a>写一个验证二叉搜索树的函数</h2><p><a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\">Leetecode题目链接🔗</a></p>\n<h1 id=\"封装一个二叉树类\"><a href=\"#封装一个二叉树类\" class=\"headerlink\" title=\"封装一个二叉树类\"></a>封装一个二叉树类</h1><h2 id=\"文件布置\"><a href=\"#文件布置\" class=\"headerlink\" title=\"文件布置\"></a>文件布置</h2><ul>\n<li><code>BSTree.h</code>用于声明和实现<code>BSTree</code>类</li>\n<li><code>test.cpp</code>用于测试</li>\n</ul>\n<h3 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h3><p><code>BSTree.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>test.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;BSTree.h&quot;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> key_value</span><br></pre></td></tr></table></figure>\n<p>这里使用<code>key_value</code>作为命名空间，表示这是键值表示的搜索二叉树</p>\n<h2 id=\"定义节点\"><a href=\"#定义节点\" class=\"headerlink\" title=\"定义节点\"></a>定义节点</h2><p>二叉树的节点用于储存<code>键值对</code>和<code>左右指针</code>，并提供<code>默认构造函数</code>,使用<code>初始化列表</code>初始化成员变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">K</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">V</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BSTNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">BSTNode</span>(<span class=\"type\">const</span> K&amp; key = <span class=\"built_in\">K</span>(), <span class=\"type\">const</span> V&amp; value = <span class=\"built_in\">V</span>())</span><br><span class=\"line\">        :_left(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        , _right(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        , _key(key)</span><br><span class=\"line\">        , _value(value)</span><br><span class=\"line\">    &#123;&#125;</span><br><span class=\"line\">    BSTNode&lt;K, V&gt;* _left;<span class=\"comment\">//指向左子树</span></span><br><span class=\"line\">    BSTNode&lt;K, V&gt;* _right;<span class=\"comment\">//指向右子树</span></span><br><span class=\"line\">    K _key;<span class=\"comment\">//储存键</span></span><br><span class=\"line\">    V _value;<span class=\"comment\">//储存值</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装二叉搜索树\"><a href=\"#封装二叉搜索树\" class=\"headerlink\" title=\"封装二叉搜索树\"></a>封装二叉搜索树</h2><p><code>Binary Search Tree</code>,这里用简称<code>BSTree</code>封装</p>\n<h3 id=\"基本架构\"><a href=\"#基本架构\" class=\"headerlink\" title=\"基本架构\"></a>基本架构</h3><p>鉴于该类的接口基本依赖于成员变量，所以先组织好成员变量</p>\n<p>作为一颗<code>二叉树类</code>,成员变量仅需一个<code>指向根的指</code>针即可</p>\n<p>再次之前先用<code>typedef</code>定义一个<code>节点类</code>出来用于简化代码</p>\n<p>最后提供一个<code>默认构造函数</code>将<code>_root</code>初始化为<code>nullptr</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">K</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">V</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BSTree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> BSTNode&lt;K, V&gt; Node;<span class=\"comment\">//使用typedef简化代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">BSTree</span>() :_root(<span class=\"literal\">nullptr</span>) &#123;&#125;<span class=\"comment\">//提供默认构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tNode* _root;<span class=\"comment\">//指向根节点的指针作为成员变量</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"insert函数\"><a href=\"#insert函数\" class=\"headerlink\" title=\"insert函数\"></a><code>insert</code>函数</h3><p>准备好后第一个接口就是<code>insert</code>,用于构建搜索二叉树</p>\n<p>这里需要考虑的情况有</p>\n<ul>\n<li>空树时的插入</li>\n<li>插入的<code>key</code>已存在</li>\n<li>一般情况下成功的插入</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key, <span class=\"type\">const</span> V&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//空树</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node* cur = _root;</span><br><span class=\"line\">    Node* parent = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key &lt; cur-&gt;_key)<span class=\"comment\">//key比当前节点小，往左子树走</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            parent = cur;</span><br><span class=\"line\">            cur = cur-&gt;_left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; cur-&gt;_key)<span class=\"comment\">//往右子树走</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            parent = cur;</span><br><span class=\"line\">            cur = cur-&gt;_right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//key已存在，插入失败</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//此时cur为nullptr, parent为cur的结点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key &lt; parent-&gt;_key)parent-&gt;_left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> parent-&gt;_right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//成功插入</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"in-order函数\"><a href=\"#in-order函数\" class=\"headerlink\" title=\"in_order函数\"></a><code>in_order</code>函数</h3><p>使用此函数<code>前序遍历打印</code>二叉树来验证其满足<code>搜索树</code>的性质</p>\n<p>这里使用递归打印,所以要借助<code>_in_order</code>子函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">in_order</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _in_order(_root);<span class=\"comment\">//传入根结点</span></span><br><span class=\"line\">        std::cout &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"type\">void</span> _in_order(Node* root)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        _in_order(root-&gt;_left);<span class=\"comment\">//先访问左结点</span></span><br><span class=\"line\">        std::cout &lt;&lt; root-&gt;_value &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; std::endl;<span class=\"comment\">//再访问根结点</span></span><br><span class=\"line\">        _in_order(root-&gt;_right);<span class=\"comment\">//最后访问右结点</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后写一段测试代码测试性质</p>\n<blockquote>\n<p>test.cpp</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;BSTree.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">arr</span><span class=\"params\">(&#123; <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span> &#125;)</span></span>;<span class=\"comment\">//准备待插入的键值对</span></span><br><span class=\"line\">\tkey_value::BSTree&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; bst;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbst.<span class=\"built_in\">insert</span>(arr[i],arr[i]);<span class=\"comment\">//这里使键值相同，方便观察</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbst.<span class=\"built_in\">in_order</span>();<span class=\"comment\">//测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find函数\"><a href=\"#find函数\" class=\"headerlink\" title=\"find函数\"></a><code>find</code>函数</h3><p>可以用<code>find</code>函数查找对应<code>key</code>的结点。</p>\n<p>同时观察可知，控制<code>cur</code>和<code>parent</code>的移动的代码段和前面的函数很像，所以给<code>find</code>函数分出来一个<code>_find</code>子函数，并使它返回<code>pair&lt;Node*,Node*&gt;</code>，将这两个指针返回利于其它函数对<code>_find</code>的回调</p>\n<p>同时为了简化代码，继续用<code>typedef</code>封装类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> std::pair&lt; Node*, Node* &gt; PNN;<span class=\"comment\">//简化代码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _find(key).first != <span class=\"literal\">nullptr</span>;<span class=\"comment\">//检查是否找到</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    PNN _find(<span class=\"type\">const</span> K&amp; key)<span class=\"comment\">//返回PNN用于简化其它接口</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> &#123;<span class=\"literal\">nullptr</span>,<span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">        Node* cur = _root;</span><br><span class=\"line\">        Node* parent = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key &lt; cur-&gt;_key)<span class=\"comment\">//key比当前节点小，往左子树走</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parent = cur;</span><br><span class=\"line\">                cur = cur-&gt;_left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; cur-&gt;_key)<span class=\"comment\">//往右子树走</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parent = cur;</span><br><span class=\"line\">                cur = cur-&gt;_right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到key</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123; cur,parent &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//没找到key,cur为nullptr</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"literal\">nullptr</span>,parent &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重写insert函数\"><a href=\"#重写insert函数\" class=\"headerlink\" title=\"重写insert函数\"></a>重写<code>insert</code>函数</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key, <span class=\"type\">const</span> V&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//空树</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//====修改的部分====</span></span><br><span class=\"line\">    PNN pnn = _find(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    Node* cur = pnn.first;</span><br><span class=\"line\">    Node* parent = pnn.second;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur != <span class=\"literal\">nullptr</span>)<span class=\"comment\">//该key已存在，插入失败</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//================</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//此时cur为nullptr, parent为cur的结点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key &lt; parent-&gt;_key)parent-&gt;_left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> parent-&gt;_right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//成功插入</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"erase函数\"><a href=\"#erase函数\" class=\"headerlink\" title=\"erase函数\"></a><code>erase</code>函数</h3><p>这里也可以复用<code>_find</code>来方便地删除结点</p>\n<p>这里要考虑的情况有:</p>\n<ul>\n<li>树为空</li>\n<li>删除最后一个结点</li>\n<li>删除根节点</li>\n<li>左子树为空（包括叶子结点）</li>\n<li>右子树为空</li>\n<li>删除一般的结点</li>\n</ul>\n<p>当树有<code>&gt;=2</code>个结点，且要删除<code>非叶子</code>结点时，要考虑<code>结点替换</code>，否则二叉树会断掉，这里一般两种策略，取左子树的最右结点（最大结点），或取右子树的最左结点（最小结点）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//空树无法删除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_root-&gt;_key == key &amp;&amp; _root-&gt;_left == <span class=\"literal\">nullptr</span> &amp;&amp; _root-&gt;_right == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//删除最后一个结点</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">            _root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        PNN pnn = _find(key);</span><br><span class=\"line\">        Node* cur = pnn.first;</span><br><span class=\"line\">        Node* parent = pnn.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//没找到该结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//下面的cur必不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur-&gt;_left == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == _root)<span class=\"comment\">//为根节点时要替换根节点</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Node* right = _root-&gt;_right;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">                _root = right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//没有左子树，则直接移除结点,右子树替代原结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == parent-&gt;_left) parent-&gt;_left = cur-&gt;_right;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> parent-&gt;_right = cur-&gt;_right;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur-&gt;_right == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == _root)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Node* left = _root-&gt;_left;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">                _root = left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//直接过继左子树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == parent-&gt;_left)parent-&gt;_left = cur-&gt;_left;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> parent-&gt;_right = cur-&gt;_left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到左子树的最右结点</span></span><br><span class=\"line\">            Node* _cur = cur-&gt;_left;</span><br><span class=\"line\">            Node* _parent = cur;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (_cur-&gt;_right != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _parent = _cur;</span><br><span class=\"line\">                _cur = _cur-&gt;_right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//移走结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_cur == _parent-&gt;_left) _parent-&gt;_left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> _parent-&gt;_right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"comment\">//获取cur的左右结点,必须再移走结点后，否则可能出现指向自己的结点</span></span><br><span class=\"line\">            _cur-&gt;_left = cur-&gt;_left;</span><br><span class=\"line\">            _cur-&gt;_right = cur-&gt;_right;</span><br><span class=\"line\">            <span class=\"comment\">//代替cur的位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == _root)<span class=\"comment\">//删除根结点时</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">                _root = _cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span><span class=\"comment\">//删除普通结点时</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur == parent-&gt;_left) parent-&gt;_left = _cur;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> parent-&gt;_right = _cur;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拷贝构造\"><a href=\"#拷贝构造\" class=\"headerlink\" title=\"拷贝构造\"></a>拷贝构造</h3><p>利用二叉树的性质，可以再构建个<code>copy</code>子函数来递归拷贝</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">BSTree</span>(<span class=\"type\">const</span> BSTree&lt;K&gt;&amp; t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _root = <span class=\"built_in\">Copy</span>(t._root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">copy</span><span class=\"params\">(Node* root)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;<span class=\"comment\">//递归出口</span></span><br><span class=\"line\">        Node* pnode = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(root-&gt;_key, root-&gt;_value);<span class=\"comment\">//复制结点</span></span><br><span class=\"line\">        pnode-&gt;_left = <span class=\"built_in\">copy</span>(root-&gt;_left);</span><br><span class=\"line\">        pnode-&gt;_right = <span class=\"built_in\">copy</span>(root-&gt;_right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pnode;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h3><p>这里也用<code>destroy</code>子函数来递归地后序遍历依次删除各个结点</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ~<span class=\"built_in\">BSTree</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroy</span>(_root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroy</span><span class=\"params\">(Node* root)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">destroy</span>(root-&gt;_left);</span><br><span class=\"line\">        <span class=\"built_in\">destroy</span>(root-&gt;_right);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，一个基本的二叉搜索树已封装完成</p>\n<p>实现的功能有</p>\n<ul>\n<li>构建二叉搜索树</li>\n<li>拷贝复制二叉树</li>\n<li>按<code>key</code>值查找</li>\n<li>按<code>key</code>值删除</li>\n</ul>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> key_value</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">K</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">V</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">BSTNode</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">BSTNode</span>(<span class=\"type\">const</span> K&amp; key = <span class=\"built_in\">K</span>(), <span class=\"type\">const</span> V&amp; value = <span class=\"built_in\">V</span>())</span><br><span class=\"line\">\t\t\t:_left(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t, _right(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t, _key(key)</span><br><span class=\"line\">\t\t\t, _value(value)</span><br><span class=\"line\">\t\t&#123;&#125;</span><br><span class=\"line\">\t\tBSTNode&lt;K, V&gt;* _left;<span class=\"comment\">//指向左子树</span></span><br><span class=\"line\">\t\tBSTNode&lt;K, V&gt;* _right;<span class=\"comment\">//指向右子树</span></span><br><span class=\"line\">\t\tK _key;<span class=\"comment\">//储存键</span></span><br><span class=\"line\">\t\tV _value;<span class=\"comment\">//储存值</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">K</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">V</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">BSTree</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> BSTNode&lt;K, V&gt; Node;<span class=\"comment\">//使用typedef简化代码</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">BSTree</span>() :_root(<span class=\"literal\">nullptr</span>) &#123;&#125;<span class=\"comment\">//提供默认构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">BSTree</span>(<span class=\"type\">const</span> BSTree&lt;K, V&gt;&amp; bst)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_root = <span class=\"built_in\">copy</span>(bst._root);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t~<span class=\"built_in\">BSTree</span>()</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">destroy</span>(_root);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key, <span class=\"type\">const</span> V&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//空树</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t_root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//====修改的部分====</span></span><br><span class=\"line\">\t\t\tPNN pnn = _find(key);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tNode* cur = pnn.first;</span><br><span class=\"line\">\t\t\tNode* parent = pnn.second;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cur != <span class=\"literal\">nullptr</span>)<span class=\"comment\">//该key已存在，插入失败</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//================</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//此时cur为nullptr, parent为cur的结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key &lt; parent-&gt;_key)parent-&gt;_left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> parent-&gt;_right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//成功插入</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">in_order</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t_in_order(_root);<span class=\"comment\">//传入根结点</span></span><br><span class=\"line\">\t\t\tstd::cout &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t\t<span class=\"type\">void</span> _in_order(Node* root)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t_in_order(root-&gt;_left);<span class=\"comment\">//先访问左结点</span></span><br><span class=\"line\">\t\t\tstd::cout &lt;&lt; root-&gt;_value &lt;&lt; <span class=\"string\">&quot; &quot;</span>;<span class=\"comment\">//再访问根结点</span></span><br><span class=\"line\">\t\t\t_in_order(root-&gt;_right);<span class=\"comment\">//最后访问右结点</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> std::pair&lt; Node*, Node* &gt; PNN;<span class=\"comment\">//简化代码</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _find(key).first != <span class=\"literal\">nullptr</span>;<span class=\"comment\">//检查是否找到</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tPNN _find(<span class=\"type\">const</span> K&amp; key)<span class=\"comment\">//返回PNN用于简化其它接口</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> &#123;<span class=\"literal\">nullptr</span>,<span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">\t\t\tNode* cur = _root;</span><br><span class=\"line\">\t\t\tNode* parent = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (cur)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (key &lt; cur-&gt;_key)<span class=\"comment\">//key比当前节点小，往左子树走</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tparent = cur;</span><br><span class=\"line\">\t\t\t\t\tcur = cur-&gt;_left;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; cur-&gt;_key)<span class=\"comment\">//往右子树走</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tparent = cur;</span><br><span class=\"line\">\t\t\t\t\tcur = cur-&gt;_right;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//找到key</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> &#123; cur,parent &#125;;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//没找到key,cur为nullptr</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> &#123; <span class=\"literal\">nullptr</span>,parent &#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//空树无法删除</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (_root-&gt;_key == key &amp;&amp; _root-&gt;_left == <span class=\"literal\">nullptr</span> &amp;&amp; _root-&gt;_right == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//删除最后一个结点</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">\t\t\t\t_root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tPNN pnn = _find(key);</span><br><span class=\"line\">\t\t\tNode* cur = pnn.first;</span><br><span class=\"line\">\t\t\tNode* parent = pnn.second;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cur == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//没找到该结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//下面的cur必不为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(cur-&gt;_left == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur == _root)<span class=\"comment\">//为根节点时要替换根节点</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tNode* right = _root-&gt;_right;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">\t\t\t\t\t_root = right;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//没有左子树，则直接移除结点,右子树替代原结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur == parent-&gt;_left) parent-&gt;_left = cur-&gt;_right;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> parent-&gt;_right = cur-&gt;_right;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur-&gt;_right == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur == _root)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tNode* left = _root-&gt;_left;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">\t\t\t\t\t_root = left;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//直接过继左子树</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur == parent-&gt;_left)parent-&gt;_left = cur-&gt;_left;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> parent-&gt;_right = cur-&gt;_left;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//找到左子树的最右结点</span></span><br><span class=\"line\">\t\t\t\tNode* _cur = cur-&gt;_left;</span><br><span class=\"line\">\t\t\t\tNode* _parent = cur;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (_cur-&gt;_right != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t_parent = _cur;</span><br><span class=\"line\">\t\t\t\t\t_cur = _cur-&gt;_right;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//移走结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (_cur == _parent-&gt;_left) _parent-&gt;_left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> _parent-&gt;_right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//获取cur的左右结点,必须再移走结点后，否则可能出现指向自己的结点</span></span><br><span class=\"line\">\t\t\t\t_cur-&gt;_left = cur-&gt;_left;</span><br><span class=\"line\">\t\t\t\t_cur-&gt;_right = cur-&gt;_right;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//代替cur的位置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur == _root)<span class=\"comment\">//删除根结点时</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">\t\t\t\t\t_root = _cur;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span><span class=\"comment\">//删除普通结点时</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (cur == parent-&gt;_left) parent-&gt;_left = _cur;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> parent-&gt;_right = _cur;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t\t<span class=\"function\">Node* <span class=\"title\">copy</span><span class=\"params\">(Node* root)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;<span class=\"comment\">//递归出口</span></span><br><span class=\"line\">\t\t\tNode* pnode = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(root-&gt;_key, root-&gt;_value);<span class=\"comment\">//复制结点</span></span><br><span class=\"line\">\t\t\tpnode-&gt;_left = <span class=\"built_in\">copy</span>(root-&gt;_left);</span><br><span class=\"line\">\t\t\tpnode-&gt;_right = <span class=\"built_in\">copy</span>(root-&gt;_right);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> pnode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroy</span><span class=\"params\">(Node* root)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">destroy</span>(root-&gt;_left);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">destroy</span>(root-&gt;_right);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\tNode* _root;<span class=\"comment\">//指向根节点的指针作为成员变量</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":"<h1 id=\"什么是二叉搜索树\"><a href=\"#什么是二叉搜索树\" class=\"headerlink\" title=\"什么是二叉搜索树\"></a>什么是二叉搜索树</h1><p>二叉搜索树的<code>定义</code>是一颗二叉树的所有节点满足:<code>根的左右孩子存在时，满足 左孩子 &lt; 根 &lt; 右孩子</code></p>\n<p><code>递归定义</code>则是:</p>\n<ol>\n<li><code>左子树的根</code> &lt; <code>根</code> &lt; <code>右子树的根</code></li>\n<li><code>左子树是二叉搜索树</code>,<code>右子树是二叉搜索树</code></li>\n</ol>\n<h2 id=\"写一个验证二叉搜索树的函数\"><a href=\"#写一个验证二叉搜索树的函数\" class=\"headerlink\" title=\"写一个验证二叉搜索树的函数\"></a>写一个验证二叉搜索树的函数</h2><p><a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\">Leetecode题目链接🔗</a></p>\n<h1 id=\"封装一个二叉树类\"><a href=\"#封装一个二叉树类\" class=\"headerlink\" title=\"封装一个二叉树类\"></a>封装一个二叉树类</h1><h2 id=\"文件布置\"><a href=\"#文件布置\" class=\"headerlink\" title=\"文件布置\"></a>文件布置</h2><ul>\n<li><code>BSTree.h</code>用于声明和实现<code>BSTree</code>类</li>\n<li><code>test.cpp</code>用于测试</li>\n</ul>\n<h3 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h3><p><code>BSTree.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>test.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;BSTree.h&quot;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> key_value</span><br></pre></td></tr></table></figure>\n<p>这里使用<code>key_value</code>作为命名空间，表示这是键值表示的搜索二叉树</p>\n<h2 id=\"定义节点\"><a href=\"#定义节点\" class=\"headerlink\" title=\"定义节点\"></a>定义节点</h2><p>二叉树的节点用于储存<code>键值对</code>和<code>左右指针</code>，并提供<code>默认构造函数</code>,使用<code>初始化列表</code>初始化成员变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">K</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">V</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BSTNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">BSTNode</span>(<span class=\"type\">const</span> K&amp; key = <span class=\"built_in\">K</span>(), <span class=\"type\">const</span> V&amp; value = <span class=\"built_in\">V</span>())</span><br><span class=\"line\">        :_left(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        , _right(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        , _key(key)</span><br><span class=\"line\">        , _value(value)</span><br><span class=\"line\">    &#123;&#125;</span><br><span class=\"line\">    BSTNode&lt;K, V&gt;* _left;<span class=\"comment\">//指向左子树</span></span><br><span class=\"line\">    BSTNode&lt;K, V&gt;* _right;<span class=\"comment\">//指向右子树</span></span><br><span class=\"line\">    K _key;<span class=\"comment\">//储存键</span></span><br><span class=\"line\">    V _value;<span class=\"comment\">//储存值</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装二叉搜索树\"><a href=\"#封装二叉搜索树\" class=\"headerlink\" title=\"封装二叉搜索树\"></a>封装二叉搜索树</h2><p><code>Binary Search Tree</code>,这里用简称<code>BSTree</code>封装</p>\n<h3 id=\"基本架构\"><a href=\"#基本架构\" class=\"headerlink\" title=\"基本架构\"></a>基本架构</h3><p>鉴于该类的接口基本依赖于成员变量，所以先组织好成员变量</p>\n<p>作为一颗<code>二叉树类</code>,成员变量仅需一个<code>指向根的指</code>针即可</p>\n<p>再次之前先用<code>typedef</code>定义一个<code>节点类</code>出来用于简化代码</p>\n<p>最后提供一个<code>默认构造函数</code>将<code>_root</code>初始化为<code>nullptr</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">K</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">V</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BSTree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> BSTNode&lt;K, V&gt; Node;<span class=\"comment\">//使用typedef简化代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">BSTree</span>() :_root(<span class=\"literal\">nullptr</span>) &#123;&#125;<span class=\"comment\">//提供默认构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tNode* _root;<span class=\"comment\">//指向根节点的指针作为成员变量</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"insert函数\"><a href=\"#insert函数\" class=\"headerlink\" title=\"insert函数\"></a><code>insert</code>函数</h3><p>准备好后第一个接口就是<code>insert</code>,用于构建搜索二叉树</p>\n<p>这里需要考虑的情况有</p>\n<ul>\n<li>空树时的插入</li>\n<li>插入的<code>key</code>已存在</li>\n<li>一般情况下成功的插入</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key, <span class=\"type\">const</span> V&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//空树</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node* cur = _root;</span><br><span class=\"line\">    Node* parent = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key &lt; cur-&gt;_key)<span class=\"comment\">//key比当前节点小，往左子树走</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            parent = cur;</span><br><span class=\"line\">            cur = cur-&gt;_left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; cur-&gt;_key)<span class=\"comment\">//往右子树走</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            parent = cur;</span><br><span class=\"line\">            cur = cur-&gt;_right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//key已存在，插入失败</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//此时cur为nullptr, parent为cur的结点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key &lt; parent-&gt;_key)parent-&gt;_left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> parent-&gt;_right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//成功插入</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"in-order函数\"><a href=\"#in-order函数\" class=\"headerlink\" title=\"in_order函数\"></a><code>in_order</code>函数</h3><p>使用此函数<code>前序遍历打印</code>二叉树来验证其满足<code>搜索树</code>的性质</p>\n<p>这里使用递归打印,所以要借助<code>_in_order</code>子函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">in_order</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _in_order(_root);<span class=\"comment\">//传入根结点</span></span><br><span class=\"line\">        std::cout &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"type\">void</span> _in_order(Node* root)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        _in_order(root-&gt;_left);<span class=\"comment\">//先访问左结点</span></span><br><span class=\"line\">        std::cout &lt;&lt; root-&gt;_value &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; std::endl;<span class=\"comment\">//再访问根结点</span></span><br><span class=\"line\">        _in_order(root-&gt;_right);<span class=\"comment\">//最后访问右结点</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后写一段测试代码测试性质</p>\n<blockquote>\n<p>test.cpp</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;BSTree.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">arr</span><span class=\"params\">(&#123; <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span> &#125;)</span></span>;<span class=\"comment\">//准备待插入的键值对</span></span><br><span class=\"line\">\tkey_value::BSTree&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; bst;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbst.<span class=\"built_in\">insert</span>(arr[i],arr[i]);<span class=\"comment\">//这里使键值相同，方便观察</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbst.<span class=\"built_in\">in_order</span>();<span class=\"comment\">//测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find函数\"><a href=\"#find函数\" class=\"headerlink\" title=\"find函数\"></a><code>find</code>函数</h3><p>可以用<code>find</code>函数查找对应<code>key</code>的结点。</p>\n<p>同时观察可知，控制<code>cur</code>和<code>parent</code>的移动的代码段和前面的函数很像，所以给<code>find</code>函数分出来一个<code>_find</code>子函数，并使它返回<code>pair&lt;Node*,Node*&gt;</code>，将这两个指针返回利于其它函数对<code>_find</code>的回调</p>\n<p>同时为了简化代码，继续用<code>typedef</code>封装类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> std::pair&lt; Node*, Node* &gt; PNN;<span class=\"comment\">//简化代码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _find(key).first != <span class=\"literal\">nullptr</span>;<span class=\"comment\">//检查是否找到</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    PNN _find(<span class=\"type\">const</span> K&amp; key)<span class=\"comment\">//返回PNN用于简化其它接口</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> &#123;<span class=\"literal\">nullptr</span>,<span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">        Node* cur = _root;</span><br><span class=\"line\">        Node* parent = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key &lt; cur-&gt;_key)<span class=\"comment\">//key比当前节点小，往左子树走</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parent = cur;</span><br><span class=\"line\">                cur = cur-&gt;_left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; cur-&gt;_key)<span class=\"comment\">//往右子树走</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parent = cur;</span><br><span class=\"line\">                cur = cur-&gt;_right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到key</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123; cur,parent &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//没找到key,cur为nullptr</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"literal\">nullptr</span>,parent &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重写insert函数\"><a href=\"#重写insert函数\" class=\"headerlink\" title=\"重写insert函数\"></a>重写<code>insert</code>函数</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key, <span class=\"type\">const</span> V&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//空树</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//====修改的部分====</span></span><br><span class=\"line\">    PNN pnn = _find(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    Node* cur = pnn.first;</span><br><span class=\"line\">    Node* parent = pnn.second;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur != <span class=\"literal\">nullptr</span>)<span class=\"comment\">//该key已存在，插入失败</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//================</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//此时cur为nullptr, parent为cur的结点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key &lt; parent-&gt;_key)parent-&gt;_left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> parent-&gt;_right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//成功插入</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"erase函数\"><a href=\"#erase函数\" class=\"headerlink\" title=\"erase函数\"></a><code>erase</code>函数</h3><p>这里也可以复用<code>_find</code>来方便地删除结点</p>\n<p>这里要考虑的情况有:</p>\n<ul>\n<li>树为空</li>\n<li>删除最后一个结点</li>\n<li>删除根节点</li>\n<li>左子树为空（包括叶子结点）</li>\n<li>右子树为空</li>\n<li>删除一般的结点</li>\n</ul>\n<p>当树有<code>&gt;=2</code>个结点，且要删除<code>非叶子</code>结点时，要考虑<code>结点替换</code>，否则二叉树会断掉，这里一般两种策略，取左子树的最右结点（最大结点），或取右子树的最左结点（最小结点）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//空树无法删除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_root-&gt;_key == key &amp;&amp; _root-&gt;_left == <span class=\"literal\">nullptr</span> &amp;&amp; _root-&gt;_right == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//删除最后一个结点</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">            _root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        PNN pnn = _find(key);</span><br><span class=\"line\">        Node* cur = pnn.first;</span><br><span class=\"line\">        Node* parent = pnn.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//没找到该结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//下面的cur必不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur-&gt;_left == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == _root)<span class=\"comment\">//为根节点时要替换根节点</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Node* right = _root-&gt;_right;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">                _root = right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//没有左子树，则直接移除结点,右子树替代原结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == parent-&gt;_left) parent-&gt;_left = cur-&gt;_right;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> parent-&gt;_right = cur-&gt;_right;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur-&gt;_right == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == _root)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Node* left = _root-&gt;_left;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">                _root = left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//直接过继左子树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == parent-&gt;_left)parent-&gt;_left = cur-&gt;_left;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> parent-&gt;_right = cur-&gt;_left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到左子树的最右结点</span></span><br><span class=\"line\">            Node* _cur = cur-&gt;_left;</span><br><span class=\"line\">            Node* _parent = cur;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (_cur-&gt;_right != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _parent = _cur;</span><br><span class=\"line\">                _cur = _cur-&gt;_right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//移走结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_cur == _parent-&gt;_left) _parent-&gt;_left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> _parent-&gt;_right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"comment\">//获取cur的左右结点,必须再移走结点后，否则可能出现指向自己的结点</span></span><br><span class=\"line\">            _cur-&gt;_left = cur-&gt;_left;</span><br><span class=\"line\">            _cur-&gt;_right = cur-&gt;_right;</span><br><span class=\"line\">            <span class=\"comment\">//代替cur的位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == _root)<span class=\"comment\">//删除根结点时</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">                _root = _cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span><span class=\"comment\">//删除普通结点时</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur == parent-&gt;_left) parent-&gt;_left = _cur;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> parent-&gt;_right = _cur;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拷贝构造\"><a href=\"#拷贝构造\" class=\"headerlink\" title=\"拷贝构造\"></a>拷贝构造</h3><p>利用二叉树的性质，可以再构建个<code>copy</code>子函数来递归拷贝</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">BSTree</span>(<span class=\"type\">const</span> BSTree&lt;K&gt;&amp; t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _root = <span class=\"built_in\">Copy</span>(t._root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">copy</span><span class=\"params\">(Node* root)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;<span class=\"comment\">//递归出口</span></span><br><span class=\"line\">        Node* pnode = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(root-&gt;_key, root-&gt;_value);<span class=\"comment\">//复制结点</span></span><br><span class=\"line\">        pnode-&gt;_left = <span class=\"built_in\">copy</span>(root-&gt;_left);</span><br><span class=\"line\">        pnode-&gt;_right = <span class=\"built_in\">copy</span>(root-&gt;_right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pnode;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h3><p>这里也用<code>destroy</code>子函数来递归地后序遍历依次删除各个结点</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ~<span class=\"built_in\">BSTree</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroy</span>(_root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroy</span><span class=\"params\">(Node* root)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">destroy</span>(root-&gt;_left);</span><br><span class=\"line\">        <span class=\"built_in\">destroy</span>(root-&gt;_right);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，一个基本的二叉搜索树已封装完成</p>\n<p>实现的功能有</p>\n<ul>\n<li>构建二叉搜索树</li>\n<li>拷贝复制二叉树</li>\n<li>按<code>key</code>值查找</li>\n<li>按<code>key</code>值删除</li>\n</ul>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> key_value</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">K</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">V</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">BSTNode</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">BSTNode</span>(<span class=\"type\">const</span> K&amp; key = <span class=\"built_in\">K</span>(), <span class=\"type\">const</span> V&amp; value = <span class=\"built_in\">V</span>())</span><br><span class=\"line\">\t\t\t:_left(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t, _right(<span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t, _key(key)</span><br><span class=\"line\">\t\t\t, _value(value)</span><br><span class=\"line\">\t\t&#123;&#125;</span><br><span class=\"line\">\t\tBSTNode&lt;K, V&gt;* _left;<span class=\"comment\">//指向左子树</span></span><br><span class=\"line\">\t\tBSTNode&lt;K, V&gt;* _right;<span class=\"comment\">//指向右子树</span></span><br><span class=\"line\">\t\tK _key;<span class=\"comment\">//储存键</span></span><br><span class=\"line\">\t\tV _value;<span class=\"comment\">//储存值</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">K</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">V</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">BSTree</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> BSTNode&lt;K, V&gt; Node;<span class=\"comment\">//使用typedef简化代码</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">BSTree</span>() :_root(<span class=\"literal\">nullptr</span>) &#123;&#125;<span class=\"comment\">//提供默认构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">BSTree</span>(<span class=\"type\">const</span> BSTree&lt;K, V&gt;&amp; bst)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_root = <span class=\"built_in\">copy</span>(bst._root);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t~<span class=\"built_in\">BSTree</span>()</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">destroy</span>(_root);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key, <span class=\"type\">const</span> V&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//空树</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t_root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//====修改的部分====</span></span><br><span class=\"line\">\t\t\tPNN pnn = _find(key);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tNode* cur = pnn.first;</span><br><span class=\"line\">\t\t\tNode* parent = pnn.second;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cur != <span class=\"literal\">nullptr</span>)<span class=\"comment\">//该key已存在，插入失败</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//================</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//此时cur为nullptr, parent为cur的结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key &lt; parent-&gt;_key)parent-&gt;_left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> parent-&gt;_right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(key, value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//成功插入</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">in_order</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t_in_order(_root);<span class=\"comment\">//传入根结点</span></span><br><span class=\"line\">\t\t\tstd::cout &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t\t<span class=\"type\">void</span> _in_order(Node* root)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t_in_order(root-&gt;_left);<span class=\"comment\">//先访问左结点</span></span><br><span class=\"line\">\t\t\tstd::cout &lt;&lt; root-&gt;_value &lt;&lt; <span class=\"string\">&quot; &quot;</span>;<span class=\"comment\">//再访问根结点</span></span><br><span class=\"line\">\t\t\t_in_order(root-&gt;_right);<span class=\"comment\">//最后访问右结点</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> std::pair&lt; Node*, Node* &gt; PNN;<span class=\"comment\">//简化代码</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _find(key).first != <span class=\"literal\">nullptr</span>;<span class=\"comment\">//检查是否找到</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tPNN _find(<span class=\"type\">const</span> K&amp; key)<span class=\"comment\">//返回PNN用于简化其它接口</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> &#123;<span class=\"literal\">nullptr</span>,<span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">\t\t\tNode* cur = _root;</span><br><span class=\"line\">\t\t\tNode* parent = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (cur)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (key &lt; cur-&gt;_key)<span class=\"comment\">//key比当前节点小，往左子树走</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tparent = cur;</span><br><span class=\"line\">\t\t\t\t\tcur = cur-&gt;_left;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; cur-&gt;_key)<span class=\"comment\">//往右子树走</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tparent = cur;</span><br><span class=\"line\">\t\t\t\t\tcur = cur-&gt;_right;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//找到key</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> &#123; cur,parent &#125;;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//没找到key,cur为nullptr</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> &#123; <span class=\"literal\">nullptr</span>,parent &#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">const</span> K&amp; key)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (_root == <span class=\"literal\">nullptr</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//空树无法删除</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (_root-&gt;_key == key &amp;&amp; _root-&gt;_left == <span class=\"literal\">nullptr</span> &amp;&amp; _root-&gt;_right == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//删除最后一个结点</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">\t\t\t\t_root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tPNN pnn = _find(key);</span><br><span class=\"line\">\t\t\tNode* cur = pnn.first;</span><br><span class=\"line\">\t\t\tNode* parent = pnn.second;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cur == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//没找到该结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//下面的cur必不为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(cur-&gt;_left == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur == _root)<span class=\"comment\">//为根节点时要替换根节点</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tNode* right = _root-&gt;_right;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">\t\t\t\t\t_root = right;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//没有左子树，则直接移除结点,右子树替代原结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur == parent-&gt;_left) parent-&gt;_left = cur-&gt;_right;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> parent-&gt;_right = cur-&gt;_right;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur-&gt;_right == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur == _root)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tNode* left = _root-&gt;_left;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">\t\t\t\t\t_root = left;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//直接过继左子树</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur == parent-&gt;_left)parent-&gt;_left = cur-&gt;_left;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> parent-&gt;_right = cur-&gt;_left;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//找到左子树的最右结点</span></span><br><span class=\"line\">\t\t\t\tNode* _cur = cur-&gt;_left;</span><br><span class=\"line\">\t\t\t\tNode* _parent = cur;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (_cur-&gt;_right != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t_parent = _cur;</span><br><span class=\"line\">\t\t\t\t\t_cur = _cur-&gt;_right;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//移走结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (_cur == _parent-&gt;_left) _parent-&gt;_left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> _parent-&gt;_right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//获取cur的左右结点,必须再移走结点后，否则可能出现指向自己的结点</span></span><br><span class=\"line\">\t\t\t\t_cur-&gt;_left = cur-&gt;_left;</span><br><span class=\"line\">\t\t\t\t_cur-&gt;_right = cur-&gt;_right;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//代替cur的位置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur == _root)<span class=\"comment\">//删除根结点时</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">delete</span> _root;</span><br><span class=\"line\">\t\t\t\t\t_root = _cur;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span><span class=\"comment\">//删除普通结点时</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (cur == parent-&gt;_left) parent-&gt;_left = _cur;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> parent-&gt;_right = _cur;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t\t<span class=\"function\">Node* <span class=\"title\">copy</span><span class=\"params\">(Node* root)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;<span class=\"comment\">//递归出口</span></span><br><span class=\"line\">\t\t\tNode* pnode = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(root-&gt;_key, root-&gt;_value);<span class=\"comment\">//复制结点</span></span><br><span class=\"line\">\t\t\tpnode-&gt;_left = <span class=\"built_in\">copy</span>(root-&gt;_left);</span><br><span class=\"line\">\t\t\tpnode-&gt;_right = <span class=\"built_in\">copy</span>(root-&gt;_right);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> pnode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroy</span><span class=\"params\">(Node* root)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">destroy</span>(root-&gt;_left);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">destroy</span>(root-&gt;_right);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\tNode* _root;<span class=\"comment\">//指向根节点的指针作为成员变量</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"文件缓冲区","date":"2024-07-26T02:16:19.000Z","_content":"前置博客 [基础IO](https://www.supdriver.top/2024/07/10/basicIO/)\n\n# 为什么有缓冲\n因为`磁盘的读写`与`内存的读写`操作速度相比，磁盘的读写是相差数量级的慢，所以为了提高内存**多次**，**频繁**读写磁盘文件的效率，`缓冲区`被投入使用。尤其是内存内容**写入**磁盘时，常常先写入`内存级缓冲区`，再在特定规则下一次性将`缓冲区`的内容写入磁盘\n\n**本文以`C语言`提供的用户级缓冲区为例介绍缓冲区\n\n# 缓冲区的刷新规则\n首先当一个进程**正常退出**时，会先刷新缓冲区再关闭文件,此时必定有一次刷新\n\n而当进程**运行时**缓冲区的刷新策略主要有以下三种\n\n+ `无缓冲` 内容直接写入文件\n+ `行缓冲` 输入一般内容不刷新，遇到`\\n`时刷新一次缓冲区\n+ `全缓冲` 缓冲区有容量限制，**满了**之后就刷新\n\n# 认识一下C语言的缓冲区\n*这里的系统环境是Linux*\n\n\n## 刷新规则\n运行如下代码\n```C\n#include <stdio.h>\n#include <unistd.h>\n\nint main()\n{\n    FILE* pfile = fopen(\"file.txt\",\"w\");//打开空文件\n\n    fprintf(stdout,\"stdout\");//向标准输出输出\n    fprintf(stderr,\"strerr\");//向标准错误输出输出\n    fprintf(pfile,\"file\");//向文件输出\n    _exit(0);//不刷新缓冲区，直接退出\n    return ;\n}\n```\n\n终端和文件的内容为:\n```SHELL\nstderr\n```\n```file.txt\n\n```\n可以看到只有`标准错误输出`有实际的输出,而`标准输出`和`文件输出`都没有输出\n\n目前可以得出：\n+ `标准错误输出`是`无缓冲`的刷新规则\n\n因此我们再运行如下代码，再输出内容后面加上`\\n`换行\n\n```C\n#include <stdio.h>\n#include <unistd.h>\n\nint main()\n{\n    FILE* pfile = fopen(\"file.txt\",\"w\");//打开空文件\n\n    fprintf(stdout,\"stdout\\n\");//向标准输出输出\n    fprintf(pfile,\"file\\n\");//向文件输出\n    _exit(0);\n    return ;\n}\n```\n终端输出内容为\n```SHELL\nstdout\n\n```\n**而文件依然为空**\n\n由此可得:\n+ `标准输出`遵循`行缓冲`的刷新规则\n+ `文件输出`遵循`全缓冲`的刷新规则\n\n## 缓冲区在fork中的行为\n```C\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n\nint main()\n{\n    printf(\"hello1 \");//父进程向标准输出打印一句话\n    fprintf(stdout,\"hello2 \");//父进程向标准输出打印一句话\n\n    fork();\n    return 0;\n}\n```\n上段代码的输出内容为\n```SHELL\nhello1 hello2 hello1 hello2 \n```\n可见`fork`前的缓冲区内容被打印了两次（父子进程各一次），所以`fork`也会复制`缓冲区`的内容\n\n实际上`缓冲区`属于进程的一部分，且`fork`时遵循`写时拷贝`\n\n# 模拟一下C语言的文件接口（包括缓冲区）\n\n## 主要目标\n采用`Mystdio.h`声明，`Mystdio.c`实现的方式，封装`read`,`write`,`close`系统调用接口。并提供用户级缓冲区和缓冲区的刷新等功能\n\n## 声明结构体和接口\n我们先把主要的接口和主要的内容做出来看看封装效果\n```C\n#ifndef __MYSTDIO_H__ //利用预编译防止头文件被重复编译\n#define __MYSTDIO_H__\n\n#include <string.h>\n\n//声明文件结构体\ntypedef struct IO_FILE{\n    int fileno;\n}_FILE;\n\n_FILE * _fopen(const char *filename,const char *flag);\nint _fwrite(_FILE* fp,const char*s, int len);\nvoid _fclose(_FILE* fp);\n\n#endif \n```\n\n## 部分实现接口\n实现的部分由`Mystdio.c`完成\n### 头文件\n这里的头文件要能够提供使用系统调用接口,以及调用堆区的接口,所以 头文件如下:\n\n```C\n#include \"Mystdio.h\"\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <stdlib.h>\n```\n\n### _fopen函数\n我们先模拟实现`fopen`函数的主要功能，主要实现`\"w\"``\"a\"``\"r\"`的打开模式\n\n```C\n#define FILE_MODE 0666 //设置默认的文件权限\n\n_FILE * _fopen(const char *filename,const char *flag)\n{\n    int f = 0;//准备空位图\n    int fd = -1;\n    if(strcmp(flag,\"w\") == 0)\n    {\n        f = (O_CREAT|O_WRONLY|O_TRUNC);\n        fd = open(filename,f,FILE_MODE);//打开文件\n    }\n    else if(strcmp(flag,\"a\") == 0)\n    {\n        f = (O_CREAT|O_WRONLY|O_APPEND);\n        fd = open(filename,f,FILE_MODE);//打开文件\n    }\n    else if(strcmp(flag,\"w\") == 0)\n    {\n        f = O_RDONLY;\n        fd = open(filename,f);//打开文件\n    }\n    else return NULL;//非法的打开模式\n\n    if(fd == -1) return NULL;//打开失败\n    \n    _FILE *fp = (_FILE*)malloc(sizeof(_FILE));//创建_FILE结构体\n    fp->fileno = fp;//设置_FILE结构体\n    return fp;\n}\n```","source":"_posts/c-file-cache.md","raw":"---\ntitle: 文件缓冲区\ndate: 2024-07-26 10:16:19\ntags:\n---\n前置博客 [基础IO](https://www.supdriver.top/2024/07/10/basicIO/)\n\n# 为什么有缓冲\n因为`磁盘的读写`与`内存的读写`操作速度相比，磁盘的读写是相差数量级的慢，所以为了提高内存**多次**，**频繁**读写磁盘文件的效率，`缓冲区`被投入使用。尤其是内存内容**写入**磁盘时，常常先写入`内存级缓冲区`，再在特定规则下一次性将`缓冲区`的内容写入磁盘\n\n**本文以`C语言`提供的用户级缓冲区为例介绍缓冲区\n\n# 缓冲区的刷新规则\n首先当一个进程**正常退出**时，会先刷新缓冲区再关闭文件,此时必定有一次刷新\n\n而当进程**运行时**缓冲区的刷新策略主要有以下三种\n\n+ `无缓冲` 内容直接写入文件\n+ `行缓冲` 输入一般内容不刷新，遇到`\\n`时刷新一次缓冲区\n+ `全缓冲` 缓冲区有容量限制，**满了**之后就刷新\n\n# 认识一下C语言的缓冲区\n*这里的系统环境是Linux*\n\n\n## 刷新规则\n运行如下代码\n```C\n#include <stdio.h>\n#include <unistd.h>\n\nint main()\n{\n    FILE* pfile = fopen(\"file.txt\",\"w\");//打开空文件\n\n    fprintf(stdout,\"stdout\");//向标准输出输出\n    fprintf(stderr,\"strerr\");//向标准错误输出输出\n    fprintf(pfile,\"file\");//向文件输出\n    _exit(0);//不刷新缓冲区，直接退出\n    return ;\n}\n```\n\n终端和文件的内容为:\n```SHELL\nstderr\n```\n```file.txt\n\n```\n可以看到只有`标准错误输出`有实际的输出,而`标准输出`和`文件输出`都没有输出\n\n目前可以得出：\n+ `标准错误输出`是`无缓冲`的刷新规则\n\n因此我们再运行如下代码，再输出内容后面加上`\\n`换行\n\n```C\n#include <stdio.h>\n#include <unistd.h>\n\nint main()\n{\n    FILE* pfile = fopen(\"file.txt\",\"w\");//打开空文件\n\n    fprintf(stdout,\"stdout\\n\");//向标准输出输出\n    fprintf(pfile,\"file\\n\");//向文件输出\n    _exit(0);\n    return ;\n}\n```\n终端输出内容为\n```SHELL\nstdout\n\n```\n**而文件依然为空**\n\n由此可得:\n+ `标准输出`遵循`行缓冲`的刷新规则\n+ `文件输出`遵循`全缓冲`的刷新规则\n\n## 缓冲区在fork中的行为\n```C\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n\nint main()\n{\n    printf(\"hello1 \");//父进程向标准输出打印一句话\n    fprintf(stdout,\"hello2 \");//父进程向标准输出打印一句话\n\n    fork();\n    return 0;\n}\n```\n上段代码的输出内容为\n```SHELL\nhello1 hello2 hello1 hello2 \n```\n可见`fork`前的缓冲区内容被打印了两次（父子进程各一次），所以`fork`也会复制`缓冲区`的内容\n\n实际上`缓冲区`属于进程的一部分，且`fork`时遵循`写时拷贝`\n\n# 模拟一下C语言的文件接口（包括缓冲区）\n\n## 主要目标\n采用`Mystdio.h`声明，`Mystdio.c`实现的方式，封装`read`,`write`,`close`系统调用接口。并提供用户级缓冲区和缓冲区的刷新等功能\n\n## 声明结构体和接口\n我们先把主要的接口和主要的内容做出来看看封装效果\n```C\n#ifndef __MYSTDIO_H__ //利用预编译防止头文件被重复编译\n#define __MYSTDIO_H__\n\n#include <string.h>\n\n//声明文件结构体\ntypedef struct IO_FILE{\n    int fileno;\n}_FILE;\n\n_FILE * _fopen(const char *filename,const char *flag);\nint _fwrite(_FILE* fp,const char*s, int len);\nvoid _fclose(_FILE* fp);\n\n#endif \n```\n\n## 部分实现接口\n实现的部分由`Mystdio.c`完成\n### 头文件\n这里的头文件要能够提供使用系统调用接口,以及调用堆区的接口,所以 头文件如下:\n\n```C\n#include \"Mystdio.h\"\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <stdlib.h>\n```\n\n### _fopen函数\n我们先模拟实现`fopen`函数的主要功能，主要实现`\"w\"``\"a\"``\"r\"`的打开模式\n\n```C\n#define FILE_MODE 0666 //设置默认的文件权限\n\n_FILE * _fopen(const char *filename,const char *flag)\n{\n    int f = 0;//准备空位图\n    int fd = -1;\n    if(strcmp(flag,\"w\") == 0)\n    {\n        f = (O_CREAT|O_WRONLY|O_TRUNC);\n        fd = open(filename,f,FILE_MODE);//打开文件\n    }\n    else if(strcmp(flag,\"a\") == 0)\n    {\n        f = (O_CREAT|O_WRONLY|O_APPEND);\n        fd = open(filename,f,FILE_MODE);//打开文件\n    }\n    else if(strcmp(flag,\"w\") == 0)\n    {\n        f = O_RDONLY;\n        fd = open(filename,f);//打开文件\n    }\n    else return NULL;//非法的打开模式\n\n    if(fd == -1) return NULL;//打开失败\n    \n    _FILE *fp = (_FILE*)malloc(sizeof(_FILE));//创建_FILE结构体\n    fp->fileno = fp;//设置_FILE结构体\n    return fp;\n}\n```","slug":"c-file-cache","published":1,"updated":"2024-08-04T07:15:10.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv20003v8p56b8pgn0g","content":"<p>前置博客 <a href=\"https://www.supdriver.top/2024/07/10/basicIO/\">基础IO</a></p>\n<h1 id=\"为什么有缓冲\"><a href=\"#为什么有缓冲\" class=\"headerlink\" title=\"为什么有缓冲\"></a>为什么有缓冲</h1><p>因为<code>磁盘的读写</code>与<code>内存的读写</code>操作速度相比，磁盘的读写是相差数量级的慢，所以为了提高内存<strong>多次</strong>，<strong>频繁</strong>读写磁盘文件的效率，<code>缓冲区</code>被投入使用。尤其是内存内容<strong>写入</strong>磁盘时，常常先写入<code>内存级缓冲区</code>，再在特定规则下一次性将<code>缓冲区</code>的内容写入磁盘</p>\n<p>**本文以<code>C语言</code>提供的用户级缓冲区为例介绍缓冲区</p>\n<h1 id=\"缓冲区的刷新规则\"><a href=\"#缓冲区的刷新规则\" class=\"headerlink\" title=\"缓冲区的刷新规则\"></a>缓冲区的刷新规则</h1><p>首先当一个进程<strong>正常退出</strong>时，会先刷新缓冲区再关闭文件,此时必定有一次刷新</p>\n<p>而当进程<strong>运行时</strong>缓冲区的刷新策略主要有以下三种</p>\n<ul>\n<li><code>无缓冲</code> 内容直接写入文件</li>\n<li><code>行缓冲</code> 输入一般内容不刷新，遇到<code>\\n</code>时刷新一次缓冲区</li>\n<li><code>全缓冲</code> 缓冲区有容量限制，<strong>满了</strong>之后就刷新</li>\n</ul>\n<h1 id=\"认识一下C语言的缓冲区\"><a href=\"#认识一下C语言的缓冲区\" class=\"headerlink\" title=\"认识一下C语言的缓冲区\"></a>认识一下C语言的缓冲区</h1><p><em>这里的系统环境是Linux</em></p>\n<h2 id=\"刷新规则\"><a href=\"#刷新规则\" class=\"headerlink\" title=\"刷新规则\"></a>刷新规则</h2><p>运行如下代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//打开空文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stdout</span>,<span class=\"string\">&quot;stdout&quot;</span>);<span class=\"comment\">//向标准输出输出</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;strerr&quot;</span>);<span class=\"comment\">//向标准错误输出输出</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(pfile,<span class=\"string\">&quot;file&quot;</span>);<span class=\"comment\">//向文件输出</span></span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);<span class=\"comment\">//不刷新缓冲区，直接退出</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>终端和文件的内容为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stderr</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以看到只有<code>标准错误输出</code>有实际的输出,而<code>标准输出</code>和<code>文件输出</code>都没有输出</p>\n<p>目前可以得出：</p>\n<ul>\n<li><code>标准错误输出</code>是<code>无缓冲</code>的刷新规则</li>\n</ul>\n<p>因此我们再运行如下代码，再输出内容后面加上<code>\\n</code>换行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//打开空文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stdout</span>,<span class=\"string\">&quot;stdout\\n&quot;</span>);<span class=\"comment\">//向标准输出输出</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(pfile,<span class=\"string\">&quot;file\\n&quot;</span>);<span class=\"comment\">//向文件输出</span></span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>终端输出内容为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stdout</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>而文件依然为空</strong></p>\n<p>由此可得:</p>\n<ul>\n<li><code>标准输出</code>遵循<code>行缓冲</code>的刷新规则</li>\n<li><code>文件输出</code>遵循<code>全缓冲</code>的刷新规则</li>\n</ul>\n<h2 id=\"缓冲区在fork中的行为\"><a href=\"#缓冲区在fork中的行为\" class=\"headerlink\" title=\"缓冲区在fork中的行为\"></a>缓冲区在fork中的行为</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello1 &quot;</span>);<span class=\"comment\">//父进程向标准输出打印一句话</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stdout</span>,<span class=\"string\">&quot;hello2 &quot;</span>);<span class=\"comment\">//父进程向标准输出打印一句话</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fork();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上段代码的输出内容为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello1 hello2 hello1 hello2 </span><br></pre></td></tr></table></figure>\n<p>可见<code>fork</code>前的缓冲区内容被打印了两次（父子进程各一次），所以<code>fork</code>也会复制<code>缓冲区</code>的内容</p>\n<p>实际上<code>缓冲区</code>属于进程的一部分，且<code>fork</code>时遵循<code>写时拷贝</code></p>\n<h1 id=\"模拟一下C语言的文件接口（包括缓冲区）\"><a href=\"#模拟一下C语言的文件接口（包括缓冲区）\" class=\"headerlink\" title=\"模拟一下C语言的文件接口（包括缓冲区）\"></a>模拟一下C语言的文件接口（包括缓冲区）</h1><h2 id=\"主要目标\"><a href=\"#主要目标\" class=\"headerlink\" title=\"主要目标\"></a>主要目标</h2><p>采用<code>Mystdio.h</code>声明，<code>Mystdio.c</code>实现的方式，封装<code>read</code>,<code>write</code>,<code>close</code>系统调用接口。并提供用户级缓冲区和缓冲区的刷新等功能</p>\n<h2 id=\"声明结构体和接口\"><a href=\"#声明结构体和接口\" class=\"headerlink\" title=\"声明结构体和接口\"></a>声明结构体和接口</h2><p>我们先把主要的接口和主要的内容做出来看看封装效果</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __MYSTDIO_H__ <span class=\"comment\">//利用预编译防止头文件被重复编译</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __MYSTDIO_H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明文件结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IO_FILE</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fileno;</span><br><span class=\"line\">&#125;_FILE;</span><br><span class=\"line\"></span><br><span class=\"line\">_FILE * _fopen(<span class=\"type\">const</span> <span class=\"type\">char</span> *filename,<span class=\"type\">const</span> <span class=\"type\">char</span> *flag);</span><br><span class=\"line\"><span class=\"type\">int</span> _fwrite(_FILE* fp,<span class=\"type\">const</span> <span class=\"type\">char</span>*s, <span class=\"type\">int</span> len);</span><br><span class=\"line\"><span class=\"type\">void</span> _fclose(_FILE* fp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部分实现接口\"><a href=\"#部分实现接口\" class=\"headerlink\" title=\"部分实现接口\"></a>部分实现接口</h2><p>实现的部分由<code>Mystdio.c</code>完成</p>\n<h3 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h3><p>这里的头文件要能够提供使用系统调用接口,以及调用堆区的接口,所以 头文件如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Mystdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fopen函数\"><a href=\"#fopen函数\" class=\"headerlink\" title=\"_fopen函数\"></a>_fopen函数</h3><p>我们先模拟实现<code>fopen</code>函数的主要功能，主要实现<code>&quot;w&quot;``&quot;a&quot;``&quot;r&quot;</code>的打开模式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FILE_MODE 0666 <span class=\"comment\">//设置默认的文件权限</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">_FILE * _fopen(<span class=\"type\">const</span> <span class=\"type\">char</span> *filename,<span class=\"type\">const</span> <span class=\"type\">char</span> *flag)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f = <span class=\"number\">0</span>;<span class=\"comment\">//准备空位图</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fd = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(flag,<span class=\"string\">&quot;w&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f = (O_CREAT|O_WRONLY|O_TRUNC);</span><br><span class=\"line\">        fd = open(filename,f,FILE_MODE);<span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(flag,<span class=\"string\">&quot;a&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f = (O_CREAT|O_WRONLY|O_APPEND);</span><br><span class=\"line\">        fd = open(filename,f,FILE_MODE);<span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(flag,<span class=\"string\">&quot;w&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f = O_RDONLY;</span><br><span class=\"line\">        fd = open(filename,f);<span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;<span class=\"comment\">//非法的打开模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fd == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;<span class=\"comment\">//打开失败</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    _FILE *fp = (_FILE*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(_FILE));<span class=\"comment\">//创建_FILE结构体</span></span><br><span class=\"line\">    fp-&gt;fileno = fp;<span class=\"comment\">//设置_FILE结构体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<p>前置博客 <a href=\"https://www.supdriver.top/2024/07/10/basicIO/\">基础IO</a></p>\n<h1 id=\"为什么有缓冲\"><a href=\"#为什么有缓冲\" class=\"headerlink\" title=\"为什么有缓冲\"></a>为什么有缓冲</h1><p>因为<code>磁盘的读写</code>与<code>内存的读写</code>操作速度相比，磁盘的读写是相差数量级的慢，所以为了提高内存<strong>多次</strong>，<strong>频繁</strong>读写磁盘文件的效率，<code>缓冲区</code>被投入使用。尤其是内存内容<strong>写入</strong>磁盘时，常常先写入<code>内存级缓冲区</code>，再在特定规则下一次性将<code>缓冲区</code>的内容写入磁盘</p>\n<p>**本文以<code>C语言</code>提供的用户级缓冲区为例介绍缓冲区</p>\n<h1 id=\"缓冲区的刷新规则\"><a href=\"#缓冲区的刷新规则\" class=\"headerlink\" title=\"缓冲区的刷新规则\"></a>缓冲区的刷新规则</h1><p>首先当一个进程<strong>正常退出</strong>时，会先刷新缓冲区再关闭文件,此时必定有一次刷新</p>\n<p>而当进程<strong>运行时</strong>缓冲区的刷新策略主要有以下三种</p>\n<ul>\n<li><code>无缓冲</code> 内容直接写入文件</li>\n<li><code>行缓冲</code> 输入一般内容不刷新，遇到<code>\\n</code>时刷新一次缓冲区</li>\n<li><code>全缓冲</code> 缓冲区有容量限制，<strong>满了</strong>之后就刷新</li>\n</ul>\n<h1 id=\"认识一下C语言的缓冲区\"><a href=\"#认识一下C语言的缓冲区\" class=\"headerlink\" title=\"认识一下C语言的缓冲区\"></a>认识一下C语言的缓冲区</h1><p><em>这里的系统环境是Linux</em></p>\n<h2 id=\"刷新规则\"><a href=\"#刷新规则\" class=\"headerlink\" title=\"刷新规则\"></a>刷新规则</h2><p>运行如下代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//打开空文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stdout</span>,<span class=\"string\">&quot;stdout&quot;</span>);<span class=\"comment\">//向标准输出输出</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;strerr&quot;</span>);<span class=\"comment\">//向标准错误输出输出</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(pfile,<span class=\"string\">&quot;file&quot;</span>);<span class=\"comment\">//向文件输出</span></span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);<span class=\"comment\">//不刷新缓冲区，直接退出</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>终端和文件的内容为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stderr</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以看到只有<code>标准错误输出</code>有实际的输出,而<code>标准输出</code>和<code>文件输出</code>都没有输出</p>\n<p>目前可以得出：</p>\n<ul>\n<li><code>标准错误输出</code>是<code>无缓冲</code>的刷新规则</li>\n</ul>\n<p>因此我们再运行如下代码，再输出内容后面加上<code>\\n</code>换行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//打开空文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stdout</span>,<span class=\"string\">&quot;stdout\\n&quot;</span>);<span class=\"comment\">//向标准输出输出</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(pfile,<span class=\"string\">&quot;file\\n&quot;</span>);<span class=\"comment\">//向文件输出</span></span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>终端输出内容为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stdout</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>而文件依然为空</strong></p>\n<p>由此可得:</p>\n<ul>\n<li><code>标准输出</code>遵循<code>行缓冲</code>的刷新规则</li>\n<li><code>文件输出</code>遵循<code>全缓冲</code>的刷新规则</li>\n</ul>\n<h2 id=\"缓冲区在fork中的行为\"><a href=\"#缓冲区在fork中的行为\" class=\"headerlink\" title=\"缓冲区在fork中的行为\"></a>缓冲区在fork中的行为</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello1 &quot;</span>);<span class=\"comment\">//父进程向标准输出打印一句话</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stdout</span>,<span class=\"string\">&quot;hello2 &quot;</span>);<span class=\"comment\">//父进程向标准输出打印一句话</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fork();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上段代码的输出内容为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello1 hello2 hello1 hello2 </span><br></pre></td></tr></table></figure>\n<p>可见<code>fork</code>前的缓冲区内容被打印了两次（父子进程各一次），所以<code>fork</code>也会复制<code>缓冲区</code>的内容</p>\n<p>实际上<code>缓冲区</code>属于进程的一部分，且<code>fork</code>时遵循<code>写时拷贝</code></p>\n<h1 id=\"模拟一下C语言的文件接口（包括缓冲区）\"><a href=\"#模拟一下C语言的文件接口（包括缓冲区）\" class=\"headerlink\" title=\"模拟一下C语言的文件接口（包括缓冲区）\"></a>模拟一下C语言的文件接口（包括缓冲区）</h1><h2 id=\"主要目标\"><a href=\"#主要目标\" class=\"headerlink\" title=\"主要目标\"></a>主要目标</h2><p>采用<code>Mystdio.h</code>声明，<code>Mystdio.c</code>实现的方式，封装<code>read</code>,<code>write</code>,<code>close</code>系统调用接口。并提供用户级缓冲区和缓冲区的刷新等功能</p>\n<h2 id=\"声明结构体和接口\"><a href=\"#声明结构体和接口\" class=\"headerlink\" title=\"声明结构体和接口\"></a>声明结构体和接口</h2><p>我们先把主要的接口和主要的内容做出来看看封装效果</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __MYSTDIO_H__ <span class=\"comment\">//利用预编译防止头文件被重复编译</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __MYSTDIO_H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明文件结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IO_FILE</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fileno;</span><br><span class=\"line\">&#125;_FILE;</span><br><span class=\"line\"></span><br><span class=\"line\">_FILE * _fopen(<span class=\"type\">const</span> <span class=\"type\">char</span> *filename,<span class=\"type\">const</span> <span class=\"type\">char</span> *flag);</span><br><span class=\"line\"><span class=\"type\">int</span> _fwrite(_FILE* fp,<span class=\"type\">const</span> <span class=\"type\">char</span>*s, <span class=\"type\">int</span> len);</span><br><span class=\"line\"><span class=\"type\">void</span> _fclose(_FILE* fp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部分实现接口\"><a href=\"#部分实现接口\" class=\"headerlink\" title=\"部分实现接口\"></a>部分实现接口</h2><p>实现的部分由<code>Mystdio.c</code>完成</p>\n<h3 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h3><p>这里的头文件要能够提供使用系统调用接口,以及调用堆区的接口,所以 头文件如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Mystdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fopen函数\"><a href=\"#fopen函数\" class=\"headerlink\" title=\"_fopen函数\"></a>_fopen函数</h3><p>我们先模拟实现<code>fopen</code>函数的主要功能，主要实现<code>&quot;w&quot;``&quot;a&quot;``&quot;r&quot;</code>的打开模式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FILE_MODE 0666 <span class=\"comment\">//设置默认的文件权限</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">_FILE * _fopen(<span class=\"type\">const</span> <span class=\"type\">char</span> *filename,<span class=\"type\">const</span> <span class=\"type\">char</span> *flag)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f = <span class=\"number\">0</span>;<span class=\"comment\">//准备空位图</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fd = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(flag,<span class=\"string\">&quot;w&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f = (O_CREAT|O_WRONLY|O_TRUNC);</span><br><span class=\"line\">        fd = open(filename,f,FILE_MODE);<span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(flag,<span class=\"string\">&quot;a&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f = (O_CREAT|O_WRONLY|O_APPEND);</span><br><span class=\"line\">        fd = open(filename,f,FILE_MODE);<span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(flag,<span class=\"string\">&quot;w&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f = O_RDONLY;</span><br><span class=\"line\">        fd = open(filename,f);<span class=\"comment\">//打开文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;<span class=\"comment\">//非法的打开模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fd == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;<span class=\"comment\">//打开失败</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    _FILE *fp = (_FILE*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(_FILE));<span class=\"comment\">//创建_FILE结构体</span></span><br><span class=\"line\">    fp-&gt;fileno = fp;<span class=\"comment\">//设置_FILE结构体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"基础IO","date":"2024-07-10T07:24:34.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-25_12-52-35.png","_content":"# 共识原理\n+ 文件 = 内容 + 属性\n+ 被打开的文件需要加载到内存中\n+ **内存中**的文件需要被操作系统**管理**\n\n# 用户级文件接口\n[详见C++文件操作](https://www.supdriver.top/2024/05/14/cpp-file-op/)\n\n[详见C语言文件操作](https://www.supdriver.top/2024/07/15/cfileop/)\n\n# Linux系统调用接口\n\n## fd 文件描述符 与访问文件的本质\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-24_17-10-26.png)\n\n`fd`(*file descriptor*),即文件描述符,下文的系统调用接口经常以`fd`命名变量，`fd`是整形变量，作为数组下标，用于管理**打开的文件**\n\n可以看到,一个进程通过`struct files _struct`里的指针数组，管理多个同时打开的文件\n\n且每个进程启动时，会默认打开三个文件,且默认`fd`固定\n\n1. stdout \n\n## read \n**所需头文件**\n`#include <unistd.h>`\n**声明**\n`ssize_t read(int fd, void *buf, size_t count);`\n\n**参数**\n+ `fd`即为目标文件的文件描述符\n+ `buf`为要从文件读取字节到的内存地址\n+ `count`为最大读取字节数\n\n**返回值**\n+ 若成功，返回读取文件的字节数,类型为`ssize_t`,是层层封装的`long int`\n+ 若失败，返回`-1`,并设置`errno`的值\n\n## write\n**所需头文件**\n`#include <unistd.h>`\n**声明**\n`ssize_t write(int fd, const void *buf, size_t count);`\n\n**参数**\n+ `fd` 为目标文件的文件描述符\n+ `buf`为要写入文件的`源内存地址`,输入字节数量取决于`count`形参\n+ `count`为要输入的字节数量,若要输入为字符串，且要输入字符串的全部内容，建议使用`strlen(buf)`，防止输入`\\0`,因为对于**文件**来说，`\\0`是**非法字符**\n\n**返回值**\n+ 若成功，返回写入文件的字节数,类型为`ssize_t`,是层层封装的`long int`\n+ 若失败，返回`-1`,并设置`errno`的值\n\n**特别的**\n`read`函数从文件中读取的是`字节`内容，不把读取的内容看作字符串，因此，**不会自动**添加`\\0`在写入`buf`内容的结尾\n\n*用法见后文对`open`的介绍*\n\n\n## open\n**所需头文件**\n```C\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n```\n**声明**\n`int open(const char *pathname, int flags);`\n`int open(const char *pathname, int flags，mode_t mode);`\n\n**参数**:\n\n+ `pathname`为文件路径，若只有文件名，则默认在当前工作路径搜索\n+ `flag`则是一个`位图`,而**不应**看作整型参数，传参时可用`|`位运算传递多个参数到位图中,例如`O_CREAT | O_WRONLY`\n+ `mode`则是在**创建**文件时,传入权限信息,这里使用`八进制表示法`，例如传入`0666`\n**返回值**:\n+ 若成功，返回打开文件的`fd`值\n+ 若失败，则返回`-1`\n\n### 写入操作\n\n相关的`flags`\n\n+ `O_WRONLY` 仅写入\n+ `O_CREAT` 如果文件不存在，就创建，**注**新文件的权限由`open`函数传入的`mode`参数决定\n+ `O_TRUNC` 如果文件已存在且是`常规文件`,并且打开的模式组合**支持写入操作**(`O_RDWR`或`O_WRONLY`),该文件内容将会被清除。但如果该文件是`FIFO`(命名管道)文件或`终端设备文件`，则`O_TRUNC`将会被**忽略**\n+ `O_EXCL` 保证此次`open`操作打开新文件。**必须**和`O_CREAT`联合使用，否则打开**失败**。若`pathname`存在，即该路径的文件存在时，也会打开**失败**\n\n#### 打开已有文件并写入\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main()\n{\n    //前提是log.txt已存在\n    int fd = open(\"log.txt\",O_WRONLY,0666);//只写模式打开文件\n    \n    char msg[] = \"this is a msg\";//准备字符串\n    write(fd,msg,strlen(msg));//写入\n    close(fd);//关闭文件\n    return 0;\n}\n```\n\n当原本`log.txt`为空文件时\n```log.txt\nthis is a msg\n```\n当原`log.txt`不为空且内容长度大于程序输入的`msg`时，发生`部分覆写`\n\n例如原内容为`0000111100001111`时，执行后为\n```log.txt\nthis is a msg111\n```\n可以看到有一部分没有被覆盖\n\n#### 打开空文件 或 创建空文件\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main()\n{\n    //唯一的区别是这里的参数\n    //O_CREAT可以创建空文件\n    //O_TRUNC保证打开已有文件时，清空原文内容\n    int fd = open(\"log.txt\",O_CREAT|O_WRONLY|O_TRUNC,0666);\n    \n    char msg[] = \"this is a msg\";\n    write(fd,msg,strlen(msg));\n    close(fd);\n    return 0;\n}\n```\n#### 追加写入\n追加写入只需把`O_TRUNC`改成`O_APPEND`即可\n\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_CREAT|O_WRONLY|O_APPEND,0666);//追加模式打开文化\n    \n    char msg[] = \"this is a msg\";\n    write(fd,msg,strlen(msg));\n    close(fd);\n    return 0;\n}\n```\n\n这里我们事先删除`log.txt`文件，然后运行两次编译出的程序,可以获得如下内容\n```log.txt\nthis is a msgthis is a msg\n```\n可以看到内容追加了两次\n\n### 读取操作\n相关的`flags`\n\n+ `O_RDONLY`只读模式打开文件\n+ `O_RDWR` 读写模式打开文件\n\n#### 只读模式读取内容\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_RDONLY);\n    char* buf[1024];\n    ssize_t n = read(fd,buf,sizeof(buf)-1);//这里要储存字符串，所以要留一位给\\0\n    if(n<0) perror(\"read\");//打开失败，输出错误信息\n    else buf[n] = '\\0';//添加结尾\n    printf(\"%s\\n\",buf);//打印读取到的内容\n    return 0;\n}\n```\n实现准备内容为`123456`的`log.txt`文件\n\n然后运行`./mycmd`\n\n得到输出和文件内容\n```SHELL\n456\n```\n```log.txt\nzzz456\n```\n关于`read`没读取到前面新写入的`zzz`,是因为`wtrite`和`read`操作都是从文件的`同一处继续`操作的，并不会发生回退\n## close\n`int close(int fd);`\n\n用于冲刷缓冲区，并**关闭**一个文件描述符\n\n## dup2 文件重定向\n`int dup2(int oldfd, int newfd);`\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-24_19-55-30.png)\n\n如图所示，`dup2`能将`oldfd`对应的数组元素`覆盖`到`newfd`对应的数组元素处，完成对`newfd`对应文件的重定向\n\n图中就是完成了对`标准输出`的重定向,像`printf`之类的函数会直接输出内容到文件中,而不是显示器\n\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_RDWR|O_CREAT|O_TRUNC,0666);//打开一个新的空文件\n    dup2(fd,1);//标准输出重定向\n\n    printf(\"output1\\n\");//输出\n    printf(\"output2\\n\");//输出\n\n    return 0;\n}\n```\n运行代码后，可以看到`终端`**没有输出**\n\n而打开`log.txt`\n```log.txt\noutput1\noutput2\n```\n \n# 子进程 与 父进程的文件关系\n\n## 子进程对父进程的拷贝\n先运行一段代码测试 子进程是否**继承**父进程的打开文件\n\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/wait.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_RDWR|O_CREAT|O_TRUNC|O_APPEND);//追加模式打开一个新文件\n    dup2(fd,1);//在fork前就打开文件\n\n    pid_t id = fork();//创建子进程\n    if(id == 0)\n    {\n        printf(\"child output\\n\");//子进程输出到文件\n        exit(0);\n    }\n    else \n    {\n        waitpid(id,0,0);//阻塞等待子进程\n        printf(\"parent output\\n\");//父进程输出\n    }\n\n    return 0;\n}\n```\n这段代码中，我们在`fork`**之前**完成了对标准输出的**重定向**,然后`fork`之后令父进程和子进程进行不同的标准输出\n\n运行结果为父进程和子进程的`标准输出`都**重定向**到了文件\n\n```log.txt\nchild output\nparent output\n```\n\n## 子进程和父进程的 独立性\n接下来一段代码测试 父进程 和 子进程 的打开文件是否独立\n\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/wait.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_RDWR|O_CREAT|O_TRUNC|O_APPEND);//追加模式打开一个新文件\n\n    pid_t id = fork();//创建子进程\n    if(id == 0)\n    {\n        dup2(fd,1);//只有子进程重定向了标准输出\n        printf(\"child output\\n\");//子进程输出到文件\n        exit(0);\n    }\n    else \n    {\n        waitpid(id,0,0);//阻塞等待子进程\n        printf(\"parent output\\n\");//父进程输出\n    }\n\n    return 0;\n}\n```\n\n这里我们在`fork`之前都不进行重定向，`fork`后仅对子进程进行了标准输出重定向，而父进程不作任何重定向\n\n在运行后发现子进程的输出重定向不会影响父进程,二者有`独立性`\n\n```SHELL\nparent output\n```\n```log.txt\nchild output\n```\n\n# 进程替换\n先在同级文件夹准备一个待替换的程序\n\n> execute.c\n```C\n#include <stdio.h>\n\nint main()\n{\n    printf(\"exe output\\n\");\n}\n```\n然后运行`gcc -o execute execute.c`编译获得一个程序\n\n然后准备主程序\n\n> mycmd.c\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/wait.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_RDWR|O_CREAT|O_TRUNC|O_APPEND);//追加模式打开一个新文件\n\n    pid_t id = fork();//创建子进程\n    if(id == 0)\n    {\n        dup2(fd,1);//只有子进程重定向了标准输出\n        execvp(\"./execute\",NULL);//进程替换\n        exit(0);\n    }\n    else \n    {\n        waitpid(id,0,0);//阻塞等待子进程\n        printf(\"parent wait success\\n\");//父进程输出\n    }\n\n    return 0;\n}\n```\n这里我们使子进程**先**标准输出重定向， **再**进行进程替换，发现替换后的进程，也是标准输出重定向的状态\n\n```log.txt\nexe output\n```\n\n## 结论\n进程替换**不会**改变原进程的文件打开状态和重定向关系","source":"_posts/basicIO.md","raw":"---\ntitle: 基础IO\ndate: 2024-07-10 15:24:34\ntags: Linux\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-25_12-52-35.png\n---\n# 共识原理\n+ 文件 = 内容 + 属性\n+ 被打开的文件需要加载到内存中\n+ **内存中**的文件需要被操作系统**管理**\n\n# 用户级文件接口\n[详见C++文件操作](https://www.supdriver.top/2024/05/14/cpp-file-op/)\n\n[详见C语言文件操作](https://www.supdriver.top/2024/07/15/cfileop/)\n\n# Linux系统调用接口\n\n## fd 文件描述符 与访问文件的本质\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-24_17-10-26.png)\n\n`fd`(*file descriptor*),即文件描述符,下文的系统调用接口经常以`fd`命名变量，`fd`是整形变量，作为数组下标，用于管理**打开的文件**\n\n可以看到,一个进程通过`struct files _struct`里的指针数组，管理多个同时打开的文件\n\n且每个进程启动时，会默认打开三个文件,且默认`fd`固定\n\n1. stdout \n\n## read \n**所需头文件**\n`#include <unistd.h>`\n**声明**\n`ssize_t read(int fd, void *buf, size_t count);`\n\n**参数**\n+ `fd`即为目标文件的文件描述符\n+ `buf`为要从文件读取字节到的内存地址\n+ `count`为最大读取字节数\n\n**返回值**\n+ 若成功，返回读取文件的字节数,类型为`ssize_t`,是层层封装的`long int`\n+ 若失败，返回`-1`,并设置`errno`的值\n\n## write\n**所需头文件**\n`#include <unistd.h>`\n**声明**\n`ssize_t write(int fd, const void *buf, size_t count);`\n\n**参数**\n+ `fd` 为目标文件的文件描述符\n+ `buf`为要写入文件的`源内存地址`,输入字节数量取决于`count`形参\n+ `count`为要输入的字节数量,若要输入为字符串，且要输入字符串的全部内容，建议使用`strlen(buf)`，防止输入`\\0`,因为对于**文件**来说，`\\0`是**非法字符**\n\n**返回值**\n+ 若成功，返回写入文件的字节数,类型为`ssize_t`,是层层封装的`long int`\n+ 若失败，返回`-1`,并设置`errno`的值\n\n**特别的**\n`read`函数从文件中读取的是`字节`内容，不把读取的内容看作字符串，因此，**不会自动**添加`\\0`在写入`buf`内容的结尾\n\n*用法见后文对`open`的介绍*\n\n\n## open\n**所需头文件**\n```C\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n```\n**声明**\n`int open(const char *pathname, int flags);`\n`int open(const char *pathname, int flags，mode_t mode);`\n\n**参数**:\n\n+ `pathname`为文件路径，若只有文件名，则默认在当前工作路径搜索\n+ `flag`则是一个`位图`,而**不应**看作整型参数，传参时可用`|`位运算传递多个参数到位图中,例如`O_CREAT | O_WRONLY`\n+ `mode`则是在**创建**文件时,传入权限信息,这里使用`八进制表示法`，例如传入`0666`\n**返回值**:\n+ 若成功，返回打开文件的`fd`值\n+ 若失败，则返回`-1`\n\n### 写入操作\n\n相关的`flags`\n\n+ `O_WRONLY` 仅写入\n+ `O_CREAT` 如果文件不存在，就创建，**注**新文件的权限由`open`函数传入的`mode`参数决定\n+ `O_TRUNC` 如果文件已存在且是`常规文件`,并且打开的模式组合**支持写入操作**(`O_RDWR`或`O_WRONLY`),该文件内容将会被清除。但如果该文件是`FIFO`(命名管道)文件或`终端设备文件`，则`O_TRUNC`将会被**忽略**\n+ `O_EXCL` 保证此次`open`操作打开新文件。**必须**和`O_CREAT`联合使用，否则打开**失败**。若`pathname`存在，即该路径的文件存在时，也会打开**失败**\n\n#### 打开已有文件并写入\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main()\n{\n    //前提是log.txt已存在\n    int fd = open(\"log.txt\",O_WRONLY,0666);//只写模式打开文件\n    \n    char msg[] = \"this is a msg\";//准备字符串\n    write(fd,msg,strlen(msg));//写入\n    close(fd);//关闭文件\n    return 0;\n}\n```\n\n当原本`log.txt`为空文件时\n```log.txt\nthis is a msg\n```\n当原`log.txt`不为空且内容长度大于程序输入的`msg`时，发生`部分覆写`\n\n例如原内容为`0000111100001111`时，执行后为\n```log.txt\nthis is a msg111\n```\n可以看到有一部分没有被覆盖\n\n#### 打开空文件 或 创建空文件\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main()\n{\n    //唯一的区别是这里的参数\n    //O_CREAT可以创建空文件\n    //O_TRUNC保证打开已有文件时，清空原文内容\n    int fd = open(\"log.txt\",O_CREAT|O_WRONLY|O_TRUNC,0666);\n    \n    char msg[] = \"this is a msg\";\n    write(fd,msg,strlen(msg));\n    close(fd);\n    return 0;\n}\n```\n#### 追加写入\n追加写入只需把`O_TRUNC`改成`O_APPEND`即可\n\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_CREAT|O_WRONLY|O_APPEND,0666);//追加模式打开文化\n    \n    char msg[] = \"this is a msg\";\n    write(fd,msg,strlen(msg));\n    close(fd);\n    return 0;\n}\n```\n\n这里我们事先删除`log.txt`文件，然后运行两次编译出的程序,可以获得如下内容\n```log.txt\nthis is a msgthis is a msg\n```\n可以看到内容追加了两次\n\n### 读取操作\n相关的`flags`\n\n+ `O_RDONLY`只读模式打开文件\n+ `O_RDWR` 读写模式打开文件\n\n#### 只读模式读取内容\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_RDONLY);\n    char* buf[1024];\n    ssize_t n = read(fd,buf,sizeof(buf)-1);//这里要储存字符串，所以要留一位给\\0\n    if(n<0) perror(\"read\");//打开失败，输出错误信息\n    else buf[n] = '\\0';//添加结尾\n    printf(\"%s\\n\",buf);//打印读取到的内容\n    return 0;\n}\n```\n实现准备内容为`123456`的`log.txt`文件\n\n然后运行`./mycmd`\n\n得到输出和文件内容\n```SHELL\n456\n```\n```log.txt\nzzz456\n```\n关于`read`没读取到前面新写入的`zzz`,是因为`wtrite`和`read`操作都是从文件的`同一处继续`操作的，并不会发生回退\n## close\n`int close(int fd);`\n\n用于冲刷缓冲区，并**关闭**一个文件描述符\n\n## dup2 文件重定向\n`int dup2(int oldfd, int newfd);`\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-24_19-55-30.png)\n\n如图所示，`dup2`能将`oldfd`对应的数组元素`覆盖`到`newfd`对应的数组元素处，完成对`newfd`对应文件的重定向\n\n图中就是完成了对`标准输出`的重定向,像`printf`之类的函数会直接输出内容到文件中,而不是显示器\n\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_RDWR|O_CREAT|O_TRUNC,0666);//打开一个新的空文件\n    dup2(fd,1);//标准输出重定向\n\n    printf(\"output1\\n\");//输出\n    printf(\"output2\\n\");//输出\n\n    return 0;\n}\n```\n运行代码后，可以看到`终端`**没有输出**\n\n而打开`log.txt`\n```log.txt\noutput1\noutput2\n```\n \n# 子进程 与 父进程的文件关系\n\n## 子进程对父进程的拷贝\n先运行一段代码测试 子进程是否**继承**父进程的打开文件\n\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/wait.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_RDWR|O_CREAT|O_TRUNC|O_APPEND);//追加模式打开一个新文件\n    dup2(fd,1);//在fork前就打开文件\n\n    pid_t id = fork();//创建子进程\n    if(id == 0)\n    {\n        printf(\"child output\\n\");//子进程输出到文件\n        exit(0);\n    }\n    else \n    {\n        waitpid(id,0,0);//阻塞等待子进程\n        printf(\"parent output\\n\");//父进程输出\n    }\n\n    return 0;\n}\n```\n这段代码中，我们在`fork`**之前**完成了对标准输出的**重定向**,然后`fork`之后令父进程和子进程进行不同的标准输出\n\n运行结果为父进程和子进程的`标准输出`都**重定向**到了文件\n\n```log.txt\nchild output\nparent output\n```\n\n## 子进程和父进程的 独立性\n接下来一段代码测试 父进程 和 子进程 的打开文件是否独立\n\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/wait.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_RDWR|O_CREAT|O_TRUNC|O_APPEND);//追加模式打开一个新文件\n\n    pid_t id = fork();//创建子进程\n    if(id == 0)\n    {\n        dup2(fd,1);//只有子进程重定向了标准输出\n        printf(\"child output\\n\");//子进程输出到文件\n        exit(0);\n    }\n    else \n    {\n        waitpid(id,0,0);//阻塞等待子进程\n        printf(\"parent output\\n\");//父进程输出\n    }\n\n    return 0;\n}\n```\n\n这里我们在`fork`之前都不进行重定向，`fork`后仅对子进程进行了标准输出重定向，而父进程不作任何重定向\n\n在运行后发现子进程的输出重定向不会影响父进程,二者有`独立性`\n\n```SHELL\nparent output\n```\n```log.txt\nchild output\n```\n\n# 进程替换\n先在同级文件夹准备一个待替换的程序\n\n> execute.c\n```C\n#include <stdio.h>\n\nint main()\n{\n    printf(\"exe output\\n\");\n}\n```\n然后运行`gcc -o execute execute.c`编译获得一个程序\n\n然后准备主程序\n\n> mycmd.c\n```C\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/wait.h>\n\nint main()\n{\n    int fd = open(\"log.txt\",O_RDWR|O_CREAT|O_TRUNC|O_APPEND);//追加模式打开一个新文件\n\n    pid_t id = fork();//创建子进程\n    if(id == 0)\n    {\n        dup2(fd,1);//只有子进程重定向了标准输出\n        execvp(\"./execute\",NULL);//进程替换\n        exit(0);\n    }\n    else \n    {\n        waitpid(id,0,0);//阻塞等待子进程\n        printf(\"parent wait success\\n\");//父进程输出\n    }\n\n    return 0;\n}\n```\n这里我们使子进程**先**标准输出重定向， **再**进行进程替换，发现替换后的进程，也是标准输出重定向的状态\n\n```log.txt\nexe output\n```\n\n## 结论\n进程替换**不会**改变原进程的文件打开状态和重定向关系","slug":"basicIO","published":1,"updated":"2024-07-25T04:53:14.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv30006v8p5h1ln53ys","content":"<h1 id=\"共识原理\"><a href=\"#共识原理\" class=\"headerlink\" title=\"共识原理\"></a>共识原理</h1><ul>\n<li>文件 &#x3D; 内容 + 属性</li>\n<li>被打开的文件需要加载到内存中</li>\n<li><strong>内存中</strong>的文件需要被操作系统<strong>管理</strong></li>\n</ul>\n<h1 id=\"用户级文件接口\"><a href=\"#用户级文件接口\" class=\"headerlink\" title=\"用户级文件接口\"></a>用户级文件接口</h1><p><a href=\"https://www.supdriver.top/2024/05/14/cpp-file-op/\">详见C++文件操作</a></p>\n<p><a href=\"https://www.supdriver.top/2024/07/15/cfileop/\">详见C语言文件操作</a></p>\n<h1 id=\"Linux系统调用接口\"><a href=\"#Linux系统调用接口\" class=\"headerlink\" title=\"Linux系统调用接口\"></a>Linux系统调用接口</h1><h2 id=\"fd-文件描述符-与访问文件的本质\"><a href=\"#fd-文件描述符-与访问文件的本质\" class=\"headerlink\" title=\"fd 文件描述符 与访问文件的本质\"></a>fd 文件描述符 与访问文件的本质</h2><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-24_17-10-26.png\"></p>\n<p><code>fd</code>(<em>file descriptor</em>),即文件描述符,下文的系统调用接口经常以<code>fd</code>命名变量，<code>fd</code>是整形变量，作为数组下标，用于管理<strong>打开的文件</strong></p>\n<p>可以看到,一个进程通过<code>struct files _struct</code>里的指针数组，管理多个同时打开的文件</p>\n<p>且每个进程启动时，会默认打开三个文件,且默认<code>fd</code>固定</p>\n<ol>\n<li>stdout</li>\n</ol>\n<h2 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h2><p><strong>所需头文件</strong><br><code>#include &lt;unistd.h&gt;</code><br><strong>声明</strong><br><code>ssize_t read(int fd, void *buf, size_t count);</code></p>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>fd</code>即为目标文件的文件描述符</li>\n<li><code>buf</code>为要从文件读取字节到的内存地址</li>\n<li><code>count</code>为最大读取字节数</li>\n</ul>\n<p><strong>返回值</strong></p>\n<ul>\n<li>若成功，返回读取文件的字节数,类型为<code>ssize_t</code>,是层层封装的<code>long int</code></li>\n<li>若失败，返回<code>-1</code>,并设置<code>errno</code>的值</li>\n</ul>\n<h2 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write\"></a>write</h2><p><strong>所需头文件</strong><br><code>#include &lt;unistd.h&gt;</code><br><strong>声明</strong><br><code>ssize_t write(int fd, const void *buf, size_t count);</code></p>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>fd</code> 为目标文件的文件描述符</li>\n<li><code>buf</code>为要写入文件的<code>源内存地址</code>,输入字节数量取决于<code>count</code>形参</li>\n<li><code>count</code>为要输入的字节数量,若要输入为字符串，且要输入字符串的全部内容，建议使用<code>strlen(buf)</code>，防止输入<code>\\0</code>,因为对于<strong>文件</strong>来说，<code>\\0</code>是<strong>非法字符</strong></li>\n</ul>\n<p><strong>返回值</strong></p>\n<ul>\n<li>若成功，返回写入文件的字节数,类型为<code>ssize_t</code>,是层层封装的<code>long int</code></li>\n<li>若失败，返回<code>-1</code>,并设置<code>errno</code>的值</li>\n</ul>\n<p><strong>特别的</strong><br><code>read</code>函数从文件中读取的是<code>字节</code>内容，不把读取的内容看作字符串，因此，<strong>不会自动</strong>添加<code>\\0</code>在写入<code>buf</code>内容的结尾</p>\n<p><em>用法见后文对<code>open</code>的介绍</em></p>\n<h2 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open\"></a>open</h2><p><strong>所需头文件</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>声明</strong><br><code>int open(const char *pathname, int flags);</code><br><code>int open(const char *pathname, int flags，mode_t mode);</code></p>\n<p><strong>参数</strong>:</p>\n<ul>\n<li><code>pathname</code>为文件路径，若只有文件名，则默认在当前工作路径搜索</li>\n<li><code>flag</code>则是一个<code>位图</code>,而<strong>不应</strong>看作整型参数，传参时可用<code>|</code>位运算传递多个参数到位图中,例如<code>O_CREAT | O_WRONLY</code></li>\n<li><code>mode</code>则是在<strong>创建</strong>文件时,传入权限信息,这里使用<code>八进制表示法</code>，例如传入<code>0666</code><br><strong>返回值</strong>:</li>\n<li>若成功，返回打开文件的<code>fd</code>值</li>\n<li>若失败，则返回<code>-1</code></li>\n</ul>\n<h3 id=\"写入操作\"><a href=\"#写入操作\" class=\"headerlink\" title=\"写入操作\"></a>写入操作</h3><p>相关的<code>flags</code></p>\n<ul>\n<li><code>O_WRONLY</code> 仅写入</li>\n<li><code>O_CREAT</code> 如果文件不存在，就创建，<strong>注</strong>新文件的权限由<code>open</code>函数传入的<code>mode</code>参数决定</li>\n<li><code>O_TRUNC</code> 如果文件已存在且是<code>常规文件</code>,并且打开的模式组合<strong>支持写入操作</strong>(<code>O_RDWR</code>或<code>O_WRONLY</code>),该文件内容将会被清除。但如果该文件是<code>FIFO</code>(命名管道)文件或<code>终端设备文件</code>，则<code>O_TRUNC</code>将会被<strong>忽略</strong></li>\n<li><code>O_EXCL</code> 保证此次<code>open</code>操作打开新文件。<strong>必须</strong>和<code>O_CREAT</code>联合使用，否则打开<strong>失败</strong>。若<code>pathname</code>存在，即该路径的文件存在时，也会打开<strong>失败</strong></li>\n</ul>\n<h4 id=\"打开已有文件并写入\"><a href=\"#打开已有文件并写入\" class=\"headerlink\" title=\"打开已有文件并写入\"></a>打开已有文件并写入</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//前提是log.txt已存在</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_WRONLY,<span class=\"number\">0666</span>);<span class=\"comment\">//只写模式打开文件</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">char</span> msg[] = <span class=\"string\">&quot;this is a msg&quot;</span>;<span class=\"comment\">//准备字符串</span></span><br><span class=\"line\">    write(fd,msg,<span class=\"built_in\">strlen</span>(msg));<span class=\"comment\">//写入</span></span><br><span class=\"line\">    close(fd);<span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当原本<code>log.txt</code>为空文件时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a msg</span><br></pre></td></tr></table></figure>\n<p>当原<code>log.txt</code>不为空且内容长度大于程序输入的<code>msg</code>时，发生<code>部分覆写</code></p>\n<p>例如原内容为<code>0000111100001111</code>时，执行后为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a msg111</span><br></pre></td></tr></table></figure>\n<p>可以看到有一部分没有被覆盖</p>\n<h4 id=\"打开空文件-或-创建空文件\"><a href=\"#打开空文件-或-创建空文件\" class=\"headerlink\" title=\"打开空文件 或 创建空文件\"></a>打开空文件 或 创建空文件</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//唯一的区别是这里的参数</span></span><br><span class=\"line\">    <span class=\"comment\">//O_CREAT可以创建空文件</span></span><br><span class=\"line\">    <span class=\"comment\">//O_TRUNC保证打开已有文件时，清空原文内容</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_CREAT|O_WRONLY|O_TRUNC,<span class=\"number\">0666</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">char</span> msg[] = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">    write(fd,msg,<span class=\"built_in\">strlen</span>(msg));</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"追加写入\"><a href=\"#追加写入\" class=\"headerlink\" title=\"追加写入\"></a>追加写入</h4><p>追加写入只需把<code>O_TRUNC</code>改成<code>O_APPEND</code>即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_CREAT|O_WRONLY|O_APPEND,<span class=\"number\">0666</span>);<span class=\"comment\">//追加模式打开文化</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">char</span> msg[] = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">    write(fd,msg,<span class=\"built_in\">strlen</span>(msg));</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们事先删除<code>log.txt</code>文件，然后运行两次编译出的程序,可以获得如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a msgthis is a msg</span><br></pre></td></tr></table></figure>\n<p>可以看到内容追加了两次</p>\n<h3 id=\"读取操作\"><a href=\"#读取操作\" class=\"headerlink\" title=\"读取操作\"></a>读取操作</h3><p>相关的<code>flags</code></p>\n<ul>\n<li><code>O_RDONLY</code>只读模式打开文件</li>\n<li><code>O_RDWR</code> 读写模式打开文件</li>\n</ul>\n<h4 id=\"只读模式读取内容\"><a href=\"#只读模式读取内容\" class=\"headerlink\" title=\"只读模式读取内容\"></a>只读模式读取内容</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_RDONLY);</span><br><span class=\"line\">    <span class=\"type\">char</span>* buf[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"type\">ssize_t</span> n = read(fd,buf,<span class=\"keyword\">sizeof</span>(buf)<span class=\"number\">-1</span>);<span class=\"comment\">//这里要储存字符串，所以要留一位给\\0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">0</span>) perror(<span class=\"string\">&quot;read&quot;</span>);<span class=\"comment\">//打开失败，输出错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> buf[n] = <span class=\"string\">&#x27;\\0&#x27;</span>;<span class=\"comment\">//添加结尾</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,buf);<span class=\"comment\">//打印读取到的内容</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现准备内容为<code>123456</code>的<code>log.txt</code>文件</p>\n<p>然后运行<code>./mycmd</code></p>\n<p>得到输出和文件内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">456</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zzz456</span><br></pre></td></tr></table></figure>\n<p>关于<code>read</code>没读取到前面新写入的<code>zzz</code>,是因为<code>wtrite</code>和<code>read</code>操作都是从文件的<code>同一处继续</code>操作的，并不会发生回退</p>\n<h2 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close\"></a>close</h2><p><code>int close(int fd);</code></p>\n<p>用于冲刷缓冲区，并<strong>关闭</strong>一个文件描述符</p>\n<h2 id=\"dup2-文件重定向\"><a href=\"#dup2-文件重定向\" class=\"headerlink\" title=\"dup2 文件重定向\"></a>dup2 文件重定向</h2><p><code>int dup2(int oldfd, int newfd);</code></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-24_19-55-30.png\"></p>\n<p>如图所示，<code>dup2</code>能将<code>oldfd</code>对应的数组元素<code>覆盖</code>到<code>newfd</code>对应的数组元素处，完成对<code>newfd</code>对应文件的重定向</p>\n<p>图中就是完成了对<code>标准输出</code>的重定向,像<code>printf</code>之类的函数会直接输出内容到文件中,而不是显示器</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_RDWR|O_CREAT|O_TRUNC,<span class=\"number\">0666</span>);<span class=\"comment\">//打开一个新的空文件</span></span><br><span class=\"line\">    dup2(fd,<span class=\"number\">1</span>);<span class=\"comment\">//标准输出重定向</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;output1\\n&quot;</span>);<span class=\"comment\">//输出</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;output2\\n&quot;</span>);<span class=\"comment\">//输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行代码后，可以看到<code>终端</code><strong>没有输出</strong></p>\n<p>而打开<code>log.txt</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output1</span><br><span class=\"line\">output2</span><br></pre></td></tr></table></figure>\n<h1 id=\"子进程-与-父进程的文件关系\"><a href=\"#子进程-与-父进程的文件关系\" class=\"headerlink\" title=\"子进程 与 父进程的文件关系\"></a>子进程 与 父进程的文件关系</h1><h2 id=\"子进程对父进程的拷贝\"><a href=\"#子进程对父进程的拷贝\" class=\"headerlink\" title=\"子进程对父进程的拷贝\"></a>子进程对父进程的拷贝</h2><p>先运行一段代码测试 子进程是否<strong>继承</strong>父进程的打开文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_RDWR|O_CREAT|O_TRUNC|O_APPEND);<span class=\"comment\">//追加模式打开一个新文件</span></span><br><span class=\"line\">    dup2(fd,<span class=\"number\">1</span>);<span class=\"comment\">//在fork前就打开文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();<span class=\"comment\">//创建子进程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child output\\n&quot;</span>);<span class=\"comment\">//子进程输出到文件</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waitpid(id,<span class=\"number\">0</span>,<span class=\"number\">0</span>);<span class=\"comment\">//阻塞等待子进程</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent output\\n&quot;</span>);<span class=\"comment\">//父进程输出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码中，我们在<code>fork</code><strong>之前</strong>完成了对标准输出的<strong>重定向</strong>,然后<code>fork</code>之后令父进程和子进程进行不同的标准输出</p>\n<p>运行结果为父进程和子进程的<code>标准输出</code>都<strong>重定向</strong>到了文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child output</span><br><span class=\"line\">parent output</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子进程和父进程的-独立性\"><a href=\"#子进程和父进程的-独立性\" class=\"headerlink\" title=\"子进程和父进程的 独立性\"></a>子进程和父进程的 独立性</h2><p>接下来一段代码测试 父进程 和 子进程 的打开文件是否独立</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_RDWR|O_CREAT|O_TRUNC|O_APPEND);<span class=\"comment\">//追加模式打开一个新文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();<span class=\"comment\">//创建子进程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dup2(fd,<span class=\"number\">1</span>);<span class=\"comment\">//只有子进程重定向了标准输出</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child output\\n&quot;</span>);<span class=\"comment\">//子进程输出到文件</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waitpid(id,<span class=\"number\">0</span>,<span class=\"number\">0</span>);<span class=\"comment\">//阻塞等待子进程</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent output\\n&quot;</span>);<span class=\"comment\">//父进程输出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们在<code>fork</code>之前都不进行重定向，<code>fork</code>后仅对子进程进行了标准输出重定向，而父进程不作任何重定向</p>\n<p>在运行后发现子进程的输出重定向不会影响父进程,二者有<code>独立性</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent output</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child output</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"进程替换\"><a href=\"#进程替换\" class=\"headerlink\" title=\"进程替换\"></a>进程替换</h1><p>先在同级文件夹准备一个待替换的程序</p>\n<blockquote>\n<p>execute.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;exe output\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后运行<code>gcc -o execute execute.c</code>编译获得一个程序</p>\n<p>然后准备主程序</p>\n<blockquote>\n<p>mycmd.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_RDWR|O_CREAT|O_TRUNC|O_APPEND);<span class=\"comment\">//追加模式打开一个新文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();<span class=\"comment\">//创建子进程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dup2(fd,<span class=\"number\">1</span>);<span class=\"comment\">//只有子进程重定向了标准输出</span></span><br><span class=\"line\">        execvp(<span class=\"string\">&quot;./execute&quot;</span>,<span class=\"literal\">NULL</span>);<span class=\"comment\">//进程替换</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waitpid(id,<span class=\"number\">0</span>,<span class=\"number\">0</span>);<span class=\"comment\">//阻塞等待子进程</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent wait success\\n&quot;</span>);<span class=\"comment\">//父进程输出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们使子进程<strong>先</strong>标准输出重定向， <strong>再</strong>进行进程替换，发现替换后的进程，也是标准输出重定向的状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exe output</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>进程替换<strong>不会</strong>改变原进程的文件打开状态和重定向关系</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"共识原理\"><a href=\"#共识原理\" class=\"headerlink\" title=\"共识原理\"></a>共识原理</h1><ul>\n<li>文件 &#x3D; 内容 + 属性</li>\n<li>被打开的文件需要加载到内存中</li>\n<li><strong>内存中</strong>的文件需要被操作系统<strong>管理</strong></li>\n</ul>\n<h1 id=\"用户级文件接口\"><a href=\"#用户级文件接口\" class=\"headerlink\" title=\"用户级文件接口\"></a>用户级文件接口</h1><p><a href=\"https://www.supdriver.top/2024/05/14/cpp-file-op/\">详见C++文件操作</a></p>\n<p><a href=\"https://www.supdriver.top/2024/07/15/cfileop/\">详见C语言文件操作</a></p>\n<h1 id=\"Linux系统调用接口\"><a href=\"#Linux系统调用接口\" class=\"headerlink\" title=\"Linux系统调用接口\"></a>Linux系统调用接口</h1><h2 id=\"fd-文件描述符-与访问文件的本质\"><a href=\"#fd-文件描述符-与访问文件的本质\" class=\"headerlink\" title=\"fd 文件描述符 与访问文件的本质\"></a>fd 文件描述符 与访问文件的本质</h2><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-24_17-10-26.png\"></p>\n<p><code>fd</code>(<em>file descriptor</em>),即文件描述符,下文的系统调用接口经常以<code>fd</code>命名变量，<code>fd</code>是整形变量，作为数组下标，用于管理<strong>打开的文件</strong></p>\n<p>可以看到,一个进程通过<code>struct files _struct</code>里的指针数组，管理多个同时打开的文件</p>\n<p>且每个进程启动时，会默认打开三个文件,且默认<code>fd</code>固定</p>\n<ol>\n<li>stdout</li>\n</ol>\n<h2 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h2><p><strong>所需头文件</strong><br><code>#include &lt;unistd.h&gt;</code><br><strong>声明</strong><br><code>ssize_t read(int fd, void *buf, size_t count);</code></p>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>fd</code>即为目标文件的文件描述符</li>\n<li><code>buf</code>为要从文件读取字节到的内存地址</li>\n<li><code>count</code>为最大读取字节数</li>\n</ul>\n<p><strong>返回值</strong></p>\n<ul>\n<li>若成功，返回读取文件的字节数,类型为<code>ssize_t</code>,是层层封装的<code>long int</code></li>\n<li>若失败，返回<code>-1</code>,并设置<code>errno</code>的值</li>\n</ul>\n<h2 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write\"></a>write</h2><p><strong>所需头文件</strong><br><code>#include &lt;unistd.h&gt;</code><br><strong>声明</strong><br><code>ssize_t write(int fd, const void *buf, size_t count);</code></p>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>fd</code> 为目标文件的文件描述符</li>\n<li><code>buf</code>为要写入文件的<code>源内存地址</code>,输入字节数量取决于<code>count</code>形参</li>\n<li><code>count</code>为要输入的字节数量,若要输入为字符串，且要输入字符串的全部内容，建议使用<code>strlen(buf)</code>，防止输入<code>\\0</code>,因为对于<strong>文件</strong>来说，<code>\\0</code>是<strong>非法字符</strong></li>\n</ul>\n<p><strong>返回值</strong></p>\n<ul>\n<li>若成功，返回写入文件的字节数,类型为<code>ssize_t</code>,是层层封装的<code>long int</code></li>\n<li>若失败，返回<code>-1</code>,并设置<code>errno</code>的值</li>\n</ul>\n<p><strong>特别的</strong><br><code>read</code>函数从文件中读取的是<code>字节</code>内容，不把读取的内容看作字符串，因此，<strong>不会自动</strong>添加<code>\\0</code>在写入<code>buf</code>内容的结尾</p>\n<p><em>用法见后文对<code>open</code>的介绍</em></p>\n<h2 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open\"></a>open</h2><p><strong>所需头文件</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>声明</strong><br><code>int open(const char *pathname, int flags);</code><br><code>int open(const char *pathname, int flags，mode_t mode);</code></p>\n<p><strong>参数</strong>:</p>\n<ul>\n<li><code>pathname</code>为文件路径，若只有文件名，则默认在当前工作路径搜索</li>\n<li><code>flag</code>则是一个<code>位图</code>,而<strong>不应</strong>看作整型参数，传参时可用<code>|</code>位运算传递多个参数到位图中,例如<code>O_CREAT | O_WRONLY</code></li>\n<li><code>mode</code>则是在<strong>创建</strong>文件时,传入权限信息,这里使用<code>八进制表示法</code>，例如传入<code>0666</code><br><strong>返回值</strong>:</li>\n<li>若成功，返回打开文件的<code>fd</code>值</li>\n<li>若失败，则返回<code>-1</code></li>\n</ul>\n<h3 id=\"写入操作\"><a href=\"#写入操作\" class=\"headerlink\" title=\"写入操作\"></a>写入操作</h3><p>相关的<code>flags</code></p>\n<ul>\n<li><code>O_WRONLY</code> 仅写入</li>\n<li><code>O_CREAT</code> 如果文件不存在，就创建，<strong>注</strong>新文件的权限由<code>open</code>函数传入的<code>mode</code>参数决定</li>\n<li><code>O_TRUNC</code> 如果文件已存在且是<code>常规文件</code>,并且打开的模式组合<strong>支持写入操作</strong>(<code>O_RDWR</code>或<code>O_WRONLY</code>),该文件内容将会被清除。但如果该文件是<code>FIFO</code>(命名管道)文件或<code>终端设备文件</code>，则<code>O_TRUNC</code>将会被<strong>忽略</strong></li>\n<li><code>O_EXCL</code> 保证此次<code>open</code>操作打开新文件。<strong>必须</strong>和<code>O_CREAT</code>联合使用，否则打开<strong>失败</strong>。若<code>pathname</code>存在，即该路径的文件存在时，也会打开<strong>失败</strong></li>\n</ul>\n<h4 id=\"打开已有文件并写入\"><a href=\"#打开已有文件并写入\" class=\"headerlink\" title=\"打开已有文件并写入\"></a>打开已有文件并写入</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//前提是log.txt已存在</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_WRONLY,<span class=\"number\">0666</span>);<span class=\"comment\">//只写模式打开文件</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">char</span> msg[] = <span class=\"string\">&quot;this is a msg&quot;</span>;<span class=\"comment\">//准备字符串</span></span><br><span class=\"line\">    write(fd,msg,<span class=\"built_in\">strlen</span>(msg));<span class=\"comment\">//写入</span></span><br><span class=\"line\">    close(fd);<span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当原本<code>log.txt</code>为空文件时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a msg</span><br></pre></td></tr></table></figure>\n<p>当原<code>log.txt</code>不为空且内容长度大于程序输入的<code>msg</code>时，发生<code>部分覆写</code></p>\n<p>例如原内容为<code>0000111100001111</code>时，执行后为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a msg111</span><br></pre></td></tr></table></figure>\n<p>可以看到有一部分没有被覆盖</p>\n<h4 id=\"打开空文件-或-创建空文件\"><a href=\"#打开空文件-或-创建空文件\" class=\"headerlink\" title=\"打开空文件 或 创建空文件\"></a>打开空文件 或 创建空文件</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//唯一的区别是这里的参数</span></span><br><span class=\"line\">    <span class=\"comment\">//O_CREAT可以创建空文件</span></span><br><span class=\"line\">    <span class=\"comment\">//O_TRUNC保证打开已有文件时，清空原文内容</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_CREAT|O_WRONLY|O_TRUNC,<span class=\"number\">0666</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">char</span> msg[] = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">    write(fd,msg,<span class=\"built_in\">strlen</span>(msg));</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"追加写入\"><a href=\"#追加写入\" class=\"headerlink\" title=\"追加写入\"></a>追加写入</h4><p>追加写入只需把<code>O_TRUNC</code>改成<code>O_APPEND</code>即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_CREAT|O_WRONLY|O_APPEND,<span class=\"number\">0666</span>);<span class=\"comment\">//追加模式打开文化</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">char</span> msg[] = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">    write(fd,msg,<span class=\"built_in\">strlen</span>(msg));</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们事先删除<code>log.txt</code>文件，然后运行两次编译出的程序,可以获得如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a msgthis is a msg</span><br></pre></td></tr></table></figure>\n<p>可以看到内容追加了两次</p>\n<h3 id=\"读取操作\"><a href=\"#读取操作\" class=\"headerlink\" title=\"读取操作\"></a>读取操作</h3><p>相关的<code>flags</code></p>\n<ul>\n<li><code>O_RDONLY</code>只读模式打开文件</li>\n<li><code>O_RDWR</code> 读写模式打开文件</li>\n</ul>\n<h4 id=\"只读模式读取内容\"><a href=\"#只读模式读取内容\" class=\"headerlink\" title=\"只读模式读取内容\"></a>只读模式读取内容</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_RDONLY);</span><br><span class=\"line\">    <span class=\"type\">char</span>* buf[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"type\">ssize_t</span> n = read(fd,buf,<span class=\"keyword\">sizeof</span>(buf)<span class=\"number\">-1</span>);<span class=\"comment\">//这里要储存字符串，所以要留一位给\\0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">0</span>) perror(<span class=\"string\">&quot;read&quot;</span>);<span class=\"comment\">//打开失败，输出错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> buf[n] = <span class=\"string\">&#x27;\\0&#x27;</span>;<span class=\"comment\">//添加结尾</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,buf);<span class=\"comment\">//打印读取到的内容</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现准备内容为<code>123456</code>的<code>log.txt</code>文件</p>\n<p>然后运行<code>./mycmd</code></p>\n<p>得到输出和文件内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">456</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zzz456</span><br></pre></td></tr></table></figure>\n<p>关于<code>read</code>没读取到前面新写入的<code>zzz</code>,是因为<code>wtrite</code>和<code>read</code>操作都是从文件的<code>同一处继续</code>操作的，并不会发生回退</p>\n<h2 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close\"></a>close</h2><p><code>int close(int fd);</code></p>\n<p>用于冲刷缓冲区，并<strong>关闭</strong>一个文件描述符</p>\n<h2 id=\"dup2-文件重定向\"><a href=\"#dup2-文件重定向\" class=\"headerlink\" title=\"dup2 文件重定向\"></a>dup2 文件重定向</h2><p><code>int dup2(int oldfd, int newfd);</code></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-24_19-55-30.png\"></p>\n<p>如图所示，<code>dup2</code>能将<code>oldfd</code>对应的数组元素<code>覆盖</code>到<code>newfd</code>对应的数组元素处，完成对<code>newfd</code>对应文件的重定向</p>\n<p>图中就是完成了对<code>标准输出</code>的重定向,像<code>printf</code>之类的函数会直接输出内容到文件中,而不是显示器</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_RDWR|O_CREAT|O_TRUNC,<span class=\"number\">0666</span>);<span class=\"comment\">//打开一个新的空文件</span></span><br><span class=\"line\">    dup2(fd,<span class=\"number\">1</span>);<span class=\"comment\">//标准输出重定向</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;output1\\n&quot;</span>);<span class=\"comment\">//输出</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;output2\\n&quot;</span>);<span class=\"comment\">//输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行代码后，可以看到<code>终端</code><strong>没有输出</strong></p>\n<p>而打开<code>log.txt</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output1</span><br><span class=\"line\">output2</span><br></pre></td></tr></table></figure>\n<h1 id=\"子进程-与-父进程的文件关系\"><a href=\"#子进程-与-父进程的文件关系\" class=\"headerlink\" title=\"子进程 与 父进程的文件关系\"></a>子进程 与 父进程的文件关系</h1><h2 id=\"子进程对父进程的拷贝\"><a href=\"#子进程对父进程的拷贝\" class=\"headerlink\" title=\"子进程对父进程的拷贝\"></a>子进程对父进程的拷贝</h2><p>先运行一段代码测试 子进程是否<strong>继承</strong>父进程的打开文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_RDWR|O_CREAT|O_TRUNC|O_APPEND);<span class=\"comment\">//追加模式打开一个新文件</span></span><br><span class=\"line\">    dup2(fd,<span class=\"number\">1</span>);<span class=\"comment\">//在fork前就打开文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();<span class=\"comment\">//创建子进程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child output\\n&quot;</span>);<span class=\"comment\">//子进程输出到文件</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waitpid(id,<span class=\"number\">0</span>,<span class=\"number\">0</span>);<span class=\"comment\">//阻塞等待子进程</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent output\\n&quot;</span>);<span class=\"comment\">//父进程输出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码中，我们在<code>fork</code><strong>之前</strong>完成了对标准输出的<strong>重定向</strong>,然后<code>fork</code>之后令父进程和子进程进行不同的标准输出</p>\n<p>运行结果为父进程和子进程的<code>标准输出</code>都<strong>重定向</strong>到了文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child output</span><br><span class=\"line\">parent output</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子进程和父进程的-独立性\"><a href=\"#子进程和父进程的-独立性\" class=\"headerlink\" title=\"子进程和父进程的 独立性\"></a>子进程和父进程的 独立性</h2><p>接下来一段代码测试 父进程 和 子进程 的打开文件是否独立</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_RDWR|O_CREAT|O_TRUNC|O_APPEND);<span class=\"comment\">//追加模式打开一个新文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();<span class=\"comment\">//创建子进程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dup2(fd,<span class=\"number\">1</span>);<span class=\"comment\">//只有子进程重定向了标准输出</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child output\\n&quot;</span>);<span class=\"comment\">//子进程输出到文件</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waitpid(id,<span class=\"number\">0</span>,<span class=\"number\">0</span>);<span class=\"comment\">//阻塞等待子进程</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent output\\n&quot;</span>);<span class=\"comment\">//父进程输出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们在<code>fork</code>之前都不进行重定向，<code>fork</code>后仅对子进程进行了标准输出重定向，而父进程不作任何重定向</p>\n<p>在运行后发现子进程的输出重定向不会影响父进程,二者有<code>独立性</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent output</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child output</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"进程替换\"><a href=\"#进程替换\" class=\"headerlink\" title=\"进程替换\"></a>进程替换</h1><p>先在同级文件夹准备一个待替换的程序</p>\n<blockquote>\n<p>execute.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;exe output\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后运行<code>gcc -o execute execute.c</code>编译获得一个程序</p>\n<p>然后准备主程序</p>\n<blockquote>\n<p>mycmd.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;log.txt&quot;</span>,O_RDWR|O_CREAT|O_TRUNC|O_APPEND);<span class=\"comment\">//追加模式打开一个新文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();<span class=\"comment\">//创建子进程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dup2(fd,<span class=\"number\">1</span>);<span class=\"comment\">//只有子进程重定向了标准输出</span></span><br><span class=\"line\">        execvp(<span class=\"string\">&quot;./execute&quot;</span>,<span class=\"literal\">NULL</span>);<span class=\"comment\">//进程替换</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waitpid(id,<span class=\"number\">0</span>,<span class=\"number\">0</span>);<span class=\"comment\">//阻塞等待子进程</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent wait success\\n&quot;</span>);<span class=\"comment\">//父进程输出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们使子进程<strong>先</strong>标准输出重定向， <strong>再</strong>进行进程替换，发现替换后的进程，也是标准输出重定向的状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exe output</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>进程替换<strong>不会</strong>改变原进程的文件打开状态和重定向关系</p>\n"},{"title":"=C语言= 整型变量与过大的整数","date":"2023-10-13T23:09:14.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/bigint.jpg","_content":"## 整型家族 #\n在使用C语言写程序时，会储存各种长度的整型,而在整型家族中，长度的比较如下\n\n`char < short <= int <= long <long long `\n\n## 整型是如何储存在内存中的 #\n*以`char`为例*\n![char](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-14_15-33-30.jpg)\n\n`char`的长度为1个`字节`，8个`比特位`,其中**最高位**是**符号位**,`0`表示正数，`1`表示负数，剩下的位数用于储存变量的**绝对值**\n\n---\n而当使用无符号整型(带前缀`unsigned`)时，只需把符号位也用于存值即可\n\n## 能够储存的最大正整数 #\n\n`int`长度为4`字节`,能够储存的最大值为`2的31次方-1`,即**2,147,483,647**\n\n`unsigned int`能够储存的最大值为**4294967295**\n\n`unsigned long long`长度为8`字节`,能够储存的最大值为`2的64次方-1`,即**18,446,744,073,709,551,615**\n\n---\n\n## 限制 #\n\n虽然`unsigned long long`已经很大了，但当遇到`指数`,`阶乘`之类的运算时仍然可能**存不下!**(光`21!`就比`unsigned long long`长了)\n\n## 思路 #\n过大的整数，可能出现在**程序的过程**中，也可能出现在**输出**中，对于过程，可以尝试**改变实现思路**，让过程中不出现过大的整数；对于输出，可以尝试**改变输出的类型**，采用输出**字符或字符串**\n\n# 以下皆为例题 #\n\n## 1.求n!的结尾有多少个0\n\n最直白的思路就是把`n!`算出来，然后用`%10`再`/=10`的方法统计末尾的`0`,想法很简单，“实现”起来也不难，**但不幸的是**，`21!`就已经储存不了了，所以不能暴力求解\n\n所以要**改变思路**，先从末尾0是怎么来的下手。末尾的n个0来自因式分解后10的n次方，而采用质因数分解的方法，可以发现`0`来自分解后`2的n次方`和`5的n次方`,而一个数分解后`2的n次方`必定比`5的n次方` 多，所以只需统计`5的n次方`。**注意**：就别再倒回去，想着先算出阶乘再求`5的n次方`了。\n\n**这里采用逐步计数的方法**：结果中的`5的n次方`来自各个因数中`5的N次方`的累乘,所以只需要历遍每个因数，并统计其中`因数5`的次数。这样过程中就不会有过大的数字了\n\n```C\n//代码实现\nint count_num0(int n)\n{\n    int count = 0;\n    for(int i = 1;i<=n;i++)\n    {\n        int copy = i//防止改变循环变量\n        while(copy%5 == 0)//统计因数5的出现次数\n        {\n            if(copy%5 == 0)\n            {\n                count++;\n            }\n            copy/=5;\n        }\n    }\n\n    return count;\n}\n\n```\n\n## 快速输出1+2+……+10^n #\n*如下图*：当我们试图算一算答案时，发现`n`到了`10`时就已经算不出答案了\n\n![计算结果](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/gao_si.png)\n\n所以要**改变输出答案答案的方式**,观察一下`n`在`1~9`时的输出\n\n![输出](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-19_07-26-54.jpg)\n\n这时我们发现**答案颇有规律**：每个输出都是**两段**`先一个5，然后n-1个0`！\n\n这样我们只需**从最高位往最低位**逐位打印即可,代码如下\n\n```C\nvoid printChar(int n)//版本一，逐位打印字符(串)\n{\n    printf(\"5\");\n    for(int i =0;i<n-1;i++)\n    {\n        printf(\"0\");\n    }\n    //再重复一段\n    printf(\"5\");\n    for(int i =0;i<n-1;i++)\n    {\n        printf(\"0\");\n    }\n    printf(\"\\n\");\n}\n\nvoid printNum(int n)//版本二，逐位打印整型\n{\n    printf(\"%d\",5);\n    for(int i =0;i<n-1;i++)\n    {\n        printf(\"%d\",0);\n    }\n    //再重复一段\n    printf(\"%d\",5);\n    for(int i =0;i<n-1;i++)\n    {\n        printf(\"%d\",0);\n    }\n    printf(\"\\n\");\n}\n```","source":"_posts/BiiigInt.md","raw":"---\ntitle: =C语言= 整型变量与过大的整数\ndate: 2023-10-14 07:09:14\ntags: C语言\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/bigint.jpg\n---\n## 整型家族 #\n在使用C语言写程序时，会储存各种长度的整型,而在整型家族中，长度的比较如下\n\n`char < short <= int <= long <long long `\n\n## 整型是如何储存在内存中的 #\n*以`char`为例*\n![char](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-14_15-33-30.jpg)\n\n`char`的长度为1个`字节`，8个`比特位`,其中**最高位**是**符号位**,`0`表示正数，`1`表示负数，剩下的位数用于储存变量的**绝对值**\n\n---\n而当使用无符号整型(带前缀`unsigned`)时，只需把符号位也用于存值即可\n\n## 能够储存的最大正整数 #\n\n`int`长度为4`字节`,能够储存的最大值为`2的31次方-1`,即**2,147,483,647**\n\n`unsigned int`能够储存的最大值为**4294967295**\n\n`unsigned long long`长度为8`字节`,能够储存的最大值为`2的64次方-1`,即**18,446,744,073,709,551,615**\n\n---\n\n## 限制 #\n\n虽然`unsigned long long`已经很大了，但当遇到`指数`,`阶乘`之类的运算时仍然可能**存不下!**(光`21!`就比`unsigned long long`长了)\n\n## 思路 #\n过大的整数，可能出现在**程序的过程**中，也可能出现在**输出**中，对于过程，可以尝试**改变实现思路**，让过程中不出现过大的整数；对于输出，可以尝试**改变输出的类型**，采用输出**字符或字符串**\n\n# 以下皆为例题 #\n\n## 1.求n!的结尾有多少个0\n\n最直白的思路就是把`n!`算出来，然后用`%10`再`/=10`的方法统计末尾的`0`,想法很简单，“实现”起来也不难，**但不幸的是**，`21!`就已经储存不了了，所以不能暴力求解\n\n所以要**改变思路**，先从末尾0是怎么来的下手。末尾的n个0来自因式分解后10的n次方，而采用质因数分解的方法，可以发现`0`来自分解后`2的n次方`和`5的n次方`,而一个数分解后`2的n次方`必定比`5的n次方` 多，所以只需统计`5的n次方`。**注意**：就别再倒回去，想着先算出阶乘再求`5的n次方`了。\n\n**这里采用逐步计数的方法**：结果中的`5的n次方`来自各个因数中`5的N次方`的累乘,所以只需要历遍每个因数，并统计其中`因数5`的次数。这样过程中就不会有过大的数字了\n\n```C\n//代码实现\nint count_num0(int n)\n{\n    int count = 0;\n    for(int i = 1;i<=n;i++)\n    {\n        int copy = i//防止改变循环变量\n        while(copy%5 == 0)//统计因数5的出现次数\n        {\n            if(copy%5 == 0)\n            {\n                count++;\n            }\n            copy/=5;\n        }\n    }\n\n    return count;\n}\n\n```\n\n## 快速输出1+2+……+10^n #\n*如下图*：当我们试图算一算答案时，发现`n`到了`10`时就已经算不出答案了\n\n![计算结果](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/gao_si.png)\n\n所以要**改变输出答案答案的方式**,观察一下`n`在`1~9`时的输出\n\n![输出](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-19_07-26-54.jpg)\n\n这时我们发现**答案颇有规律**：每个输出都是**两段**`先一个5，然后n-1个0`！\n\n这样我们只需**从最高位往最低位**逐位打印即可,代码如下\n\n```C\nvoid printChar(int n)//版本一，逐位打印字符(串)\n{\n    printf(\"5\");\n    for(int i =0;i<n-1;i++)\n    {\n        printf(\"0\");\n    }\n    //再重复一段\n    printf(\"5\");\n    for(int i =0;i<n-1;i++)\n    {\n        printf(\"0\");\n    }\n    printf(\"\\n\");\n}\n\nvoid printNum(int n)//版本二，逐位打印整型\n{\n    printf(\"%d\",5);\n    for(int i =0;i<n-1;i++)\n    {\n        printf(\"%d\",0);\n    }\n    //再重复一段\n    printf(\"%d\",5);\n    for(int i =0;i<n-1;i++)\n    {\n        printf(\"%d\",0);\n    }\n    printf(\"\\n\");\n}\n```","slug":"BiiigInt","published":1,"updated":"2024-05-08T23:56:16.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv40008v8p59f3qdf2o","content":"<h2 id=\"整型家族\"><a href=\"#整型家族\" class=\"headerlink\" title=\"整型家族\"></a>整型家族</h2><p>在使用C语言写程序时，会储存各种长度的整型,而在整型家族中，长度的比较如下</p>\n<p><code>char &lt; short &lt;= int &lt;= long &lt;long long </code></p>\n<h2 id=\"整型是如何储存在内存中的\"><a href=\"#整型是如何储存在内存中的\" class=\"headerlink\" title=\"整型是如何储存在内存中的\"></a>整型是如何储存在内存中的</h2><p><em>以<code>char</code>为例</em><br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-14_15-33-30.jpg\" alt=\"char\"></p>\n<p><code>char</code>的长度为1个<code>字节</code>，8个<code>比特位</code>,其中<strong>最高位</strong>是<strong>符号位</strong>,<code>0</code>表示正数，<code>1</code>表示负数，剩下的位数用于储存变量的<strong>绝对值</strong></p>\n<hr>\n<p>而当使用无符号整型(带前缀<code>unsigned</code>)时，只需把符号位也用于存值即可</p>\n<h2 id=\"能够储存的最大正整数\"><a href=\"#能够储存的最大正整数\" class=\"headerlink\" title=\"能够储存的最大正整数\"></a>能够储存的最大正整数</h2><p><code>int</code>长度为4<code>字节</code>,能够储存的最大值为<code>2的31次方-1</code>,即<strong>2,147,483,647</strong></p>\n<p><code>unsigned int</code>能够储存的最大值为<strong>4294967295</strong></p>\n<p><code>unsigned long long</code>长度为8<code>字节</code>,能够储存的最大值为<code>2的64次方-1</code>,即<strong>18,446,744,073,709,551,615</strong></p>\n<hr>\n<h2 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h2><p>虽然<code>unsigned long long</code>已经很大了，但当遇到<code>指数</code>,<code>阶乘</code>之类的运算时仍然可能<strong>存不下!</strong>(光<code>21!</code>就比<code>unsigned long long</code>长了)</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>过大的整数，可能出现在<strong>程序的过程</strong>中，也可能出现在<strong>输出</strong>中，对于过程，可以尝试<strong>改变实现思路</strong>，让过程中不出现过大的整数；对于输出，可以尝试<strong>改变输出的类型</strong>，采用输出<strong>字符或字符串</strong></p>\n<h1 id=\"以下皆为例题\"><a href=\"#以下皆为例题\" class=\"headerlink\" title=\"以下皆为例题\"></a>以下皆为例题</h1><h2 id=\"1-求n-的结尾有多少个0\"><a href=\"#1-求n-的结尾有多少个0\" class=\"headerlink\" title=\"1.求n!的结尾有多少个0\"></a>1.求n!的结尾有多少个0</h2><p>最直白的思路就是把<code>n!</code>算出来，然后用<code>%10</code>再<code>/=10</code>的方法统计末尾的<code>0</code>,想法很简单，“实现”起来也不难，<strong>但不幸的是</strong>，<code>21!</code>就已经储存不了了，所以不能暴力求解</p>\n<p>所以要<strong>改变思路</strong>，先从末尾0是怎么来的下手。末尾的n个0来自因式分解后10的n次方，而采用质因数分解的方法，可以发现<code>0</code>来自分解后<code>2的n次方</code>和<code>5的n次方</code>,而一个数分解后<code>2的n次方</code>必定比<code>5的n次方</code> 多，所以只需统计<code>5的n次方</code>。<strong>注意</strong>：就别再倒回去，想着先算出阶乘再求<code>5的n次方</code>了。</p>\n<p><strong>这里采用逐步计数的方法</strong>：结果中的<code>5的n次方</code>来自各个因数中<code>5的N次方</code>的累乘,所以只需要历遍每个因数，并统计其中<code>因数5</code>的次数。这样过程中就不会有过大的数字了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">count_num0</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> copy = i<span class=\"comment\">//防止改变循环变量</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(copy%<span class=\"number\">5</span> == <span class=\"number\">0</span>)<span class=\"comment\">//统计因数5的出现次数</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(copy%<span class=\"number\">5</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            copy/=<span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速输出1-2-……-10-n\"><a href=\"#快速输出1-2-……-10-n\" class=\"headerlink\" title=\"快速输出1+2+……+10^n\"></a>快速输出1+2+……+10^n</h2><p><em>如下图</em>：当我们试图算一算答案时，发现<code>n</code>到了<code>10</code>时就已经算不出答案了</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/gao_si.png\" alt=\"计算结果\"></p>\n<p>所以要<strong>改变输出答案答案的方式</strong>,观察一下<code>n</code>在<code>1~9</code>时的输出</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-19_07-26-54.jpg\" alt=\"输出\"></p>\n<p>这时我们发现<strong>答案颇有规律</strong>：每个输出都是<strong>两段</strong><code>先一个5，然后n-1个0</code>！</p>\n<p>这样我们只需<strong>从最高位往最低位</strong>逐位打印即可,代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printChar</span><span class=\"params\">(<span class=\"type\">int</span> n)</span><span class=\"comment\">//版本一，逐位打印字符(串)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;5&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//再重复一段</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;5&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printNum</span><span class=\"params\">(<span class=\"type\">int</span> n)</span><span class=\"comment\">//版本二，逐位打印整型</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//再重复一段</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"整型家族\"><a href=\"#整型家族\" class=\"headerlink\" title=\"整型家族\"></a>整型家族</h2><p>在使用C语言写程序时，会储存各种长度的整型,而在整型家族中，长度的比较如下</p>\n<p><code>char &lt; short &lt;= int &lt;= long &lt;long long </code></p>\n<h2 id=\"整型是如何储存在内存中的\"><a href=\"#整型是如何储存在内存中的\" class=\"headerlink\" title=\"整型是如何储存在内存中的\"></a>整型是如何储存在内存中的</h2><p><em>以<code>char</code>为例</em><br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-14_15-33-30.jpg\" alt=\"char\"></p>\n<p><code>char</code>的长度为1个<code>字节</code>，8个<code>比特位</code>,其中<strong>最高位</strong>是<strong>符号位</strong>,<code>0</code>表示正数，<code>1</code>表示负数，剩下的位数用于储存变量的<strong>绝对值</strong></p>\n<hr>\n<p>而当使用无符号整型(带前缀<code>unsigned</code>)时，只需把符号位也用于存值即可</p>\n<h2 id=\"能够储存的最大正整数\"><a href=\"#能够储存的最大正整数\" class=\"headerlink\" title=\"能够储存的最大正整数\"></a>能够储存的最大正整数</h2><p><code>int</code>长度为4<code>字节</code>,能够储存的最大值为<code>2的31次方-1</code>,即<strong>2,147,483,647</strong></p>\n<p><code>unsigned int</code>能够储存的最大值为<strong>4294967295</strong></p>\n<p><code>unsigned long long</code>长度为8<code>字节</code>,能够储存的最大值为<code>2的64次方-1</code>,即<strong>18,446,744,073,709,551,615</strong></p>\n<hr>\n<h2 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h2><p>虽然<code>unsigned long long</code>已经很大了，但当遇到<code>指数</code>,<code>阶乘</code>之类的运算时仍然可能<strong>存不下!</strong>(光<code>21!</code>就比<code>unsigned long long</code>长了)</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>过大的整数，可能出现在<strong>程序的过程</strong>中，也可能出现在<strong>输出</strong>中，对于过程，可以尝试<strong>改变实现思路</strong>，让过程中不出现过大的整数；对于输出，可以尝试<strong>改变输出的类型</strong>，采用输出<strong>字符或字符串</strong></p>\n<h1 id=\"以下皆为例题\"><a href=\"#以下皆为例题\" class=\"headerlink\" title=\"以下皆为例题\"></a>以下皆为例题</h1><h2 id=\"1-求n-的结尾有多少个0\"><a href=\"#1-求n-的结尾有多少个0\" class=\"headerlink\" title=\"1.求n!的结尾有多少个0\"></a>1.求n!的结尾有多少个0</h2><p>最直白的思路就是把<code>n!</code>算出来，然后用<code>%10</code>再<code>/=10</code>的方法统计末尾的<code>0</code>,想法很简单，“实现”起来也不难，<strong>但不幸的是</strong>，<code>21!</code>就已经储存不了了，所以不能暴力求解</p>\n<p>所以要<strong>改变思路</strong>，先从末尾0是怎么来的下手。末尾的n个0来自因式分解后10的n次方，而采用质因数分解的方法，可以发现<code>0</code>来自分解后<code>2的n次方</code>和<code>5的n次方</code>,而一个数分解后<code>2的n次方</code>必定比<code>5的n次方</code> 多，所以只需统计<code>5的n次方</code>。<strong>注意</strong>：就别再倒回去，想着先算出阶乘再求<code>5的n次方</code>了。</p>\n<p><strong>这里采用逐步计数的方法</strong>：结果中的<code>5的n次方</code>来自各个因数中<code>5的N次方</code>的累乘,所以只需要历遍每个因数，并统计其中<code>因数5</code>的次数。这样过程中就不会有过大的数字了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">count_num0</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> copy = i<span class=\"comment\">//防止改变循环变量</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(copy%<span class=\"number\">5</span> == <span class=\"number\">0</span>)<span class=\"comment\">//统计因数5的出现次数</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(copy%<span class=\"number\">5</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            copy/=<span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速输出1-2-……-10-n\"><a href=\"#快速输出1-2-……-10-n\" class=\"headerlink\" title=\"快速输出1+2+……+10^n\"></a>快速输出1+2+……+10^n</h2><p><em>如下图</em>：当我们试图算一算答案时，发现<code>n</code>到了<code>10</code>时就已经算不出答案了</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/gao_si.png\" alt=\"计算结果\"></p>\n<p>所以要<strong>改变输出答案答案的方式</strong>,观察一下<code>n</code>在<code>1~9</code>时的输出</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-19_07-26-54.jpg\" alt=\"输出\"></p>\n<p>这时我们发现<strong>答案颇有规律</strong>：每个输出都是<strong>两段</strong><code>先一个5，然后n-1个0</code>！</p>\n<p>这样我们只需<strong>从最高位往最低位</strong>逐位打印即可,代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printChar</span><span class=\"params\">(<span class=\"type\">int</span> n)</span><span class=\"comment\">//版本一，逐位打印字符(串)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;5&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//再重复一段</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;5&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printNum</span><span class=\"params\">(<span class=\"type\">int</span> n)</span><span class=\"comment\">//版本二，逐位打印整型</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//再重复一段</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"C语言文件操作","date":"2024-07-15T12:32:12.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-25_12-56-36.png","_content":"\n# 用户级文件操作\n`C语言`的文件操作也是用户级的文件操作，通过`FILE`对象来**管理**每一个`被打开的文件`，以及提供了**用户级**文件缓冲区，因此还涉及到冲刷缓冲区等问题\n\n## `FILE` 类\n`FILE`类描述了一个文件流。里面存储了**文件控制**所需的信息:\n\n+ 指向自身缓冲区的的`指针`\n+ 位置指示器\n+ 状态指示器\n\n所以`C语言`中对文件的管理就是对`FILE`对象的管理\n# 基础操作 - 针对一般文件\n\n## 基础示例\n```C\n#include <stdio.h>\n\nint main()\n{\n\tFILE* pfile = fopen(\"file.txt\", \"w\");//\"w\"模式打开文件file.txt\n\tint code = 1;\n\tconst char* msg = \"this is a msg\";\n\tfprintf(pfile, \"get msg : %s code:%d\", msg, code);//格式化输出字符串\n\tfclose(pfile);//冲刷缓冲区并关闭文件\n\treturn 0;\n}\n```\n以上代码创建了一个`file.txt`文件，输入`格式化字符串`(就和使用printf打印一样)。然后用`flcose`关闭文件流\n\n## fopen 打开文件\n`fopen`能够打开以各种`模式`磁盘上的文件\n\n`FILE* fopen( const char * filename, const char * mode );`\n\n**返回值**:\n+ 成功时，返回一个不为空的`FILE*`指针，用于控制该文件\n+ 失败时，返回`NULL`空指针并设置了全局变量`errno`\n\n### 常见模式\n| 模式 | 简述 |\n| === | === |\n| `\"w\"` | 创建一个**新的空文件**用于输出操作。如果已存在`同名文件`,清除原文件并当作新文件处理 |\n| `\"r\"` | 只读模式打开文件。且该文件必须存在 |\n| `\"a\"` | 打开已有文件时，仅用于在文件末尾`追加`新的内容。并且重定位函数`(fseek,fsetpos,reweind)`会被忽略，即使成功调用，也没有效果；当文件不存在时，会创建一个新的空文件 |\n| \"`r+`\" | 读写模式打开已有文件，**不会清除**原文件内容,并且读写时均从文件开头开始。打开后第一次操作为写入时，从文件头部开始逐字符覆盖原文件。**注**读写模式同时只能`读`或`写`的一种，第一次取决于先进行哪种操作，可以用`fseek`函数转换读写模式 |\n| \"`w+`\" | 读写模式打开新文件，若存在，则清除原文件内容;读写模式的切换和`\"r+\"`模式相同，唯一的区别就是打开时是否清除原文件内容 |\n| \"`a+`\" | 从文件末尾打开读写模式，**不会清除原文件内容**，若打开后第一次操作为写，则从文件末尾开始；若第一次操作为读，则从头开始；读写模式的切换同上 |\n\n### 二进制模式\n如果要以二进制模式打开文件，只需要在上面的模式末尾加上字符`b`\n\n若有`+`,则`b`既可以放在末尾也可以放在中间\n\n+ `r+b` `w+b` `a+b`\n+ `rb+` `wb+` `ab+`\n\n### 强制新建文件\n新的C语言标准,`C2011`(不是C++11),添加了一种新的说明符`w`,可以被添加在任意`\"w\"`后面\n\n+ `\"wx\"` `\"wbx\"` `\"w+x\"`  `\"w+bx\"`/`\"wb+x\"`\n\n当文件**存在**时,`w`会**强制**`fopen`函数失败,返回一个`NULL`空指针\n\n## freopen 重定向文件流\n`FILE* freopen ( const char *filename, const char *mode, FILE * pFile );`\n\n+ 如果传入了新的文件名(与`pFile`控制的文件相比),该函数会**关闭**`pFile`原本指向的文件流，并取消关联。然后**不论**是否成功关闭，`freopen`会用和`fopen`同样的方式打开该文件\n+ 如果文件名还是原文件，则只会改变打开模式\n\n**返回值**:\n+ 成功时，返回`pFile`内储存的地址\n+ 失败时，返回`NULL`\n\n### 特别的\n`freopen`用于进程的输入输出重定向会特别有用\n\n```C\nfreopen (\"outfile.txt\",\"w\",stdout);//标准输出重定向到文件\n\nfreopen (\"readfile.txt\",\"w\",stdin);//标准输入重定向到文件\n\nfreopen (\"errdfile.txt\",\"w\",stderr);//标准错误输出重定向到文件\n```\n\n## 重定位 文件流位置指示器(stream position indicator)\n\n### 文件的抽象内存结构\n首先我们要明确一下文件的内存结构，如下图\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-20_21-23-32.png)\n\n这里及下文用图中的`ptr`代指标题的中的 `文件流位置指示器`,这个`ptr`决定了每一次对文件的`读/写`操作的**起点**,同时每一次`读/写`操作都会使`ptr`自动往后走，因此要显示控制`ptr`，就得使用`fseek,fsetpos`等接口\n\n## fseek 重定位\n`int fseek ( FILE *pFile, long int offset, int origin );`\n\n`fseek`能过直接重定位`ptr`所指的\n\n### 参数\n+ `pFile`：用于控制文件的`FILE*`类型指针\n+ `offset`：则是**偏移量**，长整型，表示偏移多少字节\n+ `origin`：该形参标注了**偏移量**相对于哪个位置计算**实际位置**\n\n`origin`有三个宏可以选\n| 宏 | 实际位置 |\n| `SEEK_SET` | 偏移量从`文件头`开始算 |\n| `SEEK_CUR` | 偏移量从`当前文件指针ptr(上文介绍的)所在位置`开始算 |\n| `SEEK_END` | 偏移量从`文件尾`开始算 |\n\n### 返回值\n\n+ 成功时,返回`0`\n+ 失败时，返回`非零值`，同时，**这条语句失效**,上文说的`ptr`没有改变\n\n## fgetpos 和 fsetpos 设置 ptr\n可以用`fgetpos`获取`ptr`的当前位置，并使用`输出型参数`输出一个`fpos_t`类型的变量，而`fsetpos`可以用`fpos_t`类型的形参设置`ptr`的当前位置\n\n就好比`ptr`是当前坐标，每次`fgetpos`得到一个传送点信息，而`fsetpos`就可以用这个传送点信息传送`ptr`过去\n\n*示例如下*\n```C\n#include <stdio.h>\n\nint main()\n{\n\t//准备一个文件\n\tFILE* pfile = fopen(\"file.txt\", \"w\");//\"w\"模式打开文件file.txt\n\tint code = 1;\n\tconst char* msg = \"this is a msg\";\n\tfprintf(pfile, \"get msg : %s code:%d\", msg, code);\n\tfclose(pfile);\n\t//===========\n\n\tfpos_t pos1,pos2;\n\tpfile = fopen(\"file.txt\", \"r\");\n\n\tfgetpos(pfile, &pos1);\n\tfgetc(pfile);\n\tfgetpos(pfile, &pos2);\n\tfor (int i = 0; i < 3; ++i)\n\t{\n\t\tfsetpos(pfile, &pos2);//循环令ptr指向第二个字符\n\t\tprintf(\"第2个字符为: %c\\n\", fgetc(pfile));\n\t}                                                     \n\tfsetpos(pfile, &pos1);//令ptr指向第一个字符\n\tprintf(\"第1个字符为: %c\\n\", fgetc(pfile));\n\n\tfclose(pfile);\n\n\treturn 0;\n}\n```\n```输出\n第2个字符为: e\n第2个字符为: e\n第2个字符为: e\n第1个字符为: g\n```\n\n## fclose 关闭文件流\n可以用`fclose`显式地关闭文件流\n\n用法为`fclose(pFile);`\n\n进程正常退出时，也会自动关闭文件流\n\n## fprintf 格式化输出字符串\n`fprintf`能格式化输出字符串到指定文件流，除了要**指定**文件流，格式化字符串的方式和`printf`一样\n\n+ 且`fprintf(stdout,format,...)`和`printf(format,...)`效果一样\n\n## fputs 输出字符串\n`int fputs ( const char * str, FILE * stream );`\n\n`fputs`能将`C语言`的字符串输入到指定文件流中\n\n## fwrite 输出内存数据块\n`size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);`\n\n+ `ptr`是指向`内存数据块`的指针\n+ `size`是每个`数组元素`的大小\n+ `nmemb`是元素数量\n+ `stream`是文件流\n\nfwrite可以向指定文件流输入特定大小的内存数据块\n\n```C\nint main()\n{\n\tFILE* pfile = fopen(\"file.txt\", \"w\");//\"w\"模式打开文件file.txt\n\tchar msg[] = \"this is a msg\";\n\tfwrite(msg, sizeof(char), strlen(msg), pfile);\n\n\tfclose(pfile);\n\n\treturn 0;\n}\n```\n\n## fscanf 格式化输入\n`fscanf`能像`scanf`读取标准输入流一样,读取指定文件流\n\n+ 且`scanf(stdin,format,...)`和`printf(format,...)`效果一样\n\n## fegts 获取一行\n`char * fgets (char *str, int num, FILE *stream );`\n### 行为\n`fegts`会一直读取直到`换行符`或`EOF文件结尾`结束读取，但`换行符`作为**非法**字符不会被拷贝到形参`str`中\n\n+ 字符串结尾的`\\0`会被自动添加,且**计算**在读入的**最大字符数**\n+ `fgets`和`gets`有很大差别，它需要**指定**最大的读入字符数\n\n### 形参\n+ `str`为传入的字符数组作为缓冲区\n+ `num`为拷贝的最大字符数，**包括**自动添加的结尾`\\0`\n+ `stream`为指定的文件流\n\n### 返回值\n+ 成功时，返回`str`的值\n+ 失败时，返回`NULL`\n\n### 示例\n```C\n#include <stdio.h>\n\nint main()\n{\n\t//准备一个文件\n\tFILE* pfile = fopen(\"file.txt\", \"w\");//\"w\"模式打开文件file.txt\n\tint code = 1;\n\tconst char* msg = \"this is a msg\";\n\tfprintf(pfile, \"get msg : %s code:%d\", msg, code);\n\tfclose(pfile);\n\t//=====\n\n\tpfile = fopen(\"file.txt\", \"r\");\n\tchar str[5] = { 0 };\n\tfgets(str, sizeof(str), pfile);//除去自动添加的\\0,最多从文件里读入4个字符\n\tprintf(str);\n\tprintf(\"|\");\n\treturn 0;\n}\n```\n```输出\nget |\n```\n","source":"_posts/cfileop.md","raw":"---\ntitle: C语言文件操作\ndate: 2024-07-15 20:32:12\ntags:\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-25_12-56-36.png\n---\n\n# 用户级文件操作\n`C语言`的文件操作也是用户级的文件操作，通过`FILE`对象来**管理**每一个`被打开的文件`，以及提供了**用户级**文件缓冲区，因此还涉及到冲刷缓冲区等问题\n\n## `FILE` 类\n`FILE`类描述了一个文件流。里面存储了**文件控制**所需的信息:\n\n+ 指向自身缓冲区的的`指针`\n+ 位置指示器\n+ 状态指示器\n\n所以`C语言`中对文件的管理就是对`FILE`对象的管理\n# 基础操作 - 针对一般文件\n\n## 基础示例\n```C\n#include <stdio.h>\n\nint main()\n{\n\tFILE* pfile = fopen(\"file.txt\", \"w\");//\"w\"模式打开文件file.txt\n\tint code = 1;\n\tconst char* msg = \"this is a msg\";\n\tfprintf(pfile, \"get msg : %s code:%d\", msg, code);//格式化输出字符串\n\tfclose(pfile);//冲刷缓冲区并关闭文件\n\treturn 0;\n}\n```\n以上代码创建了一个`file.txt`文件，输入`格式化字符串`(就和使用printf打印一样)。然后用`flcose`关闭文件流\n\n## fopen 打开文件\n`fopen`能够打开以各种`模式`磁盘上的文件\n\n`FILE* fopen( const char * filename, const char * mode );`\n\n**返回值**:\n+ 成功时，返回一个不为空的`FILE*`指针，用于控制该文件\n+ 失败时，返回`NULL`空指针并设置了全局变量`errno`\n\n### 常见模式\n| 模式 | 简述 |\n| === | === |\n| `\"w\"` | 创建一个**新的空文件**用于输出操作。如果已存在`同名文件`,清除原文件并当作新文件处理 |\n| `\"r\"` | 只读模式打开文件。且该文件必须存在 |\n| `\"a\"` | 打开已有文件时，仅用于在文件末尾`追加`新的内容。并且重定位函数`(fseek,fsetpos,reweind)`会被忽略，即使成功调用，也没有效果；当文件不存在时，会创建一个新的空文件 |\n| \"`r+`\" | 读写模式打开已有文件，**不会清除**原文件内容,并且读写时均从文件开头开始。打开后第一次操作为写入时，从文件头部开始逐字符覆盖原文件。**注**读写模式同时只能`读`或`写`的一种，第一次取决于先进行哪种操作，可以用`fseek`函数转换读写模式 |\n| \"`w+`\" | 读写模式打开新文件，若存在，则清除原文件内容;读写模式的切换和`\"r+\"`模式相同，唯一的区别就是打开时是否清除原文件内容 |\n| \"`a+`\" | 从文件末尾打开读写模式，**不会清除原文件内容**，若打开后第一次操作为写，则从文件末尾开始；若第一次操作为读，则从头开始；读写模式的切换同上 |\n\n### 二进制模式\n如果要以二进制模式打开文件，只需要在上面的模式末尾加上字符`b`\n\n若有`+`,则`b`既可以放在末尾也可以放在中间\n\n+ `r+b` `w+b` `a+b`\n+ `rb+` `wb+` `ab+`\n\n### 强制新建文件\n新的C语言标准,`C2011`(不是C++11),添加了一种新的说明符`w`,可以被添加在任意`\"w\"`后面\n\n+ `\"wx\"` `\"wbx\"` `\"w+x\"`  `\"w+bx\"`/`\"wb+x\"`\n\n当文件**存在**时,`w`会**强制**`fopen`函数失败,返回一个`NULL`空指针\n\n## freopen 重定向文件流\n`FILE* freopen ( const char *filename, const char *mode, FILE * pFile );`\n\n+ 如果传入了新的文件名(与`pFile`控制的文件相比),该函数会**关闭**`pFile`原本指向的文件流，并取消关联。然后**不论**是否成功关闭，`freopen`会用和`fopen`同样的方式打开该文件\n+ 如果文件名还是原文件，则只会改变打开模式\n\n**返回值**:\n+ 成功时，返回`pFile`内储存的地址\n+ 失败时，返回`NULL`\n\n### 特别的\n`freopen`用于进程的输入输出重定向会特别有用\n\n```C\nfreopen (\"outfile.txt\",\"w\",stdout);//标准输出重定向到文件\n\nfreopen (\"readfile.txt\",\"w\",stdin);//标准输入重定向到文件\n\nfreopen (\"errdfile.txt\",\"w\",stderr);//标准错误输出重定向到文件\n```\n\n## 重定位 文件流位置指示器(stream position indicator)\n\n### 文件的抽象内存结构\n首先我们要明确一下文件的内存结构，如下图\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-20_21-23-32.png)\n\n这里及下文用图中的`ptr`代指标题的中的 `文件流位置指示器`,这个`ptr`决定了每一次对文件的`读/写`操作的**起点**,同时每一次`读/写`操作都会使`ptr`自动往后走，因此要显示控制`ptr`，就得使用`fseek,fsetpos`等接口\n\n## fseek 重定位\n`int fseek ( FILE *pFile, long int offset, int origin );`\n\n`fseek`能过直接重定位`ptr`所指的\n\n### 参数\n+ `pFile`：用于控制文件的`FILE*`类型指针\n+ `offset`：则是**偏移量**，长整型，表示偏移多少字节\n+ `origin`：该形参标注了**偏移量**相对于哪个位置计算**实际位置**\n\n`origin`有三个宏可以选\n| 宏 | 实际位置 |\n| `SEEK_SET` | 偏移量从`文件头`开始算 |\n| `SEEK_CUR` | 偏移量从`当前文件指针ptr(上文介绍的)所在位置`开始算 |\n| `SEEK_END` | 偏移量从`文件尾`开始算 |\n\n### 返回值\n\n+ 成功时,返回`0`\n+ 失败时，返回`非零值`，同时，**这条语句失效**,上文说的`ptr`没有改变\n\n## fgetpos 和 fsetpos 设置 ptr\n可以用`fgetpos`获取`ptr`的当前位置，并使用`输出型参数`输出一个`fpos_t`类型的变量，而`fsetpos`可以用`fpos_t`类型的形参设置`ptr`的当前位置\n\n就好比`ptr`是当前坐标，每次`fgetpos`得到一个传送点信息，而`fsetpos`就可以用这个传送点信息传送`ptr`过去\n\n*示例如下*\n```C\n#include <stdio.h>\n\nint main()\n{\n\t//准备一个文件\n\tFILE* pfile = fopen(\"file.txt\", \"w\");//\"w\"模式打开文件file.txt\n\tint code = 1;\n\tconst char* msg = \"this is a msg\";\n\tfprintf(pfile, \"get msg : %s code:%d\", msg, code);\n\tfclose(pfile);\n\t//===========\n\n\tfpos_t pos1,pos2;\n\tpfile = fopen(\"file.txt\", \"r\");\n\n\tfgetpos(pfile, &pos1);\n\tfgetc(pfile);\n\tfgetpos(pfile, &pos2);\n\tfor (int i = 0; i < 3; ++i)\n\t{\n\t\tfsetpos(pfile, &pos2);//循环令ptr指向第二个字符\n\t\tprintf(\"第2个字符为: %c\\n\", fgetc(pfile));\n\t}                                                     \n\tfsetpos(pfile, &pos1);//令ptr指向第一个字符\n\tprintf(\"第1个字符为: %c\\n\", fgetc(pfile));\n\n\tfclose(pfile);\n\n\treturn 0;\n}\n```\n```输出\n第2个字符为: e\n第2个字符为: e\n第2个字符为: e\n第1个字符为: g\n```\n\n## fclose 关闭文件流\n可以用`fclose`显式地关闭文件流\n\n用法为`fclose(pFile);`\n\n进程正常退出时，也会自动关闭文件流\n\n## fprintf 格式化输出字符串\n`fprintf`能格式化输出字符串到指定文件流，除了要**指定**文件流，格式化字符串的方式和`printf`一样\n\n+ 且`fprintf(stdout,format,...)`和`printf(format,...)`效果一样\n\n## fputs 输出字符串\n`int fputs ( const char * str, FILE * stream );`\n\n`fputs`能将`C语言`的字符串输入到指定文件流中\n\n## fwrite 输出内存数据块\n`size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);`\n\n+ `ptr`是指向`内存数据块`的指针\n+ `size`是每个`数组元素`的大小\n+ `nmemb`是元素数量\n+ `stream`是文件流\n\nfwrite可以向指定文件流输入特定大小的内存数据块\n\n```C\nint main()\n{\n\tFILE* pfile = fopen(\"file.txt\", \"w\");//\"w\"模式打开文件file.txt\n\tchar msg[] = \"this is a msg\";\n\tfwrite(msg, sizeof(char), strlen(msg), pfile);\n\n\tfclose(pfile);\n\n\treturn 0;\n}\n```\n\n## fscanf 格式化输入\n`fscanf`能像`scanf`读取标准输入流一样,读取指定文件流\n\n+ 且`scanf(stdin,format,...)`和`printf(format,...)`效果一样\n\n## fegts 获取一行\n`char * fgets (char *str, int num, FILE *stream );`\n### 行为\n`fegts`会一直读取直到`换行符`或`EOF文件结尾`结束读取，但`换行符`作为**非法**字符不会被拷贝到形参`str`中\n\n+ 字符串结尾的`\\0`会被自动添加,且**计算**在读入的**最大字符数**\n+ `fgets`和`gets`有很大差别，它需要**指定**最大的读入字符数\n\n### 形参\n+ `str`为传入的字符数组作为缓冲区\n+ `num`为拷贝的最大字符数，**包括**自动添加的结尾`\\0`\n+ `stream`为指定的文件流\n\n### 返回值\n+ 成功时，返回`str`的值\n+ 失败时，返回`NULL`\n\n### 示例\n```C\n#include <stdio.h>\n\nint main()\n{\n\t//准备一个文件\n\tFILE* pfile = fopen(\"file.txt\", \"w\");//\"w\"模式打开文件file.txt\n\tint code = 1;\n\tconst char* msg = \"this is a msg\";\n\tfprintf(pfile, \"get msg : %s code:%d\", msg, code);\n\tfclose(pfile);\n\t//=====\n\n\tpfile = fopen(\"file.txt\", \"r\");\n\tchar str[5] = { 0 };\n\tfgets(str, sizeof(str), pfile);//除去自动添加的\\0,最多从文件里读入4个字符\n\tprintf(str);\n\tprintf(\"|\");\n\treturn 0;\n}\n```\n```输出\nget |\n```\n","slug":"cfileop","published":1,"updated":"2024-07-26T13:44:16.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv5000av8p543u4g20d","content":"<h1 id=\"用户级文件操作\"><a href=\"#用户级文件操作\" class=\"headerlink\" title=\"用户级文件操作\"></a>用户级文件操作</h1><p><code>C语言</code>的文件操作也是用户级的文件操作，通过<code>FILE</code>对象来<strong>管理</strong>每一个<code>被打开的文件</code>，以及提供了<strong>用户级</strong>文件缓冲区，因此还涉及到冲刷缓冲区等问题</p>\n<h2 id=\"FILE-类\"><a href=\"#FILE-类\" class=\"headerlink\" title=\"FILE 类\"></a><code>FILE</code> 类</h2><p><code>FILE</code>类描述了一个文件流。里面存储了<strong>文件控制</strong>所需的信息:</p>\n<ul>\n<li>指向自身缓冲区的的<code>指针</code></li>\n<li>位置指示器</li>\n<li>状态指示器</li>\n</ul>\n<p>所以<code>C语言</code>中对文件的管理就是对<code>FILE</code>对象的管理</p>\n<h1 id=\"基础操作-针对一般文件\"><a href=\"#基础操作-针对一般文件\" class=\"headerlink\" title=\"基础操作 - 针对一般文件\"></a>基础操作 - 针对一般文件</h1><h2 id=\"基础示例\"><a href=\"#基础示例\" class=\"headerlink\" title=\"基础示例\"></a>基础示例</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//&quot;w&quot;模式打开文件file.txt</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> code = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* msg = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(pfile, <span class=\"string\">&quot;get msg : %s code:%d&quot;</span>, msg, code);<span class=\"comment\">//格式化输出字符串</span></span><br><span class=\"line\">\tfclose(pfile);<span class=\"comment\">//冲刷缓冲区并关闭文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码创建了一个<code>file.txt</code>文件，输入<code>格式化字符串</code>(就和使用printf打印一样)。然后用<code>flcose</code>关闭文件流</p>\n<h2 id=\"fopen-打开文件\"><a href=\"#fopen-打开文件\" class=\"headerlink\" title=\"fopen 打开文件\"></a>fopen 打开文件</h2><p><code>fopen</code>能够打开以各种<code>模式</code>磁盘上的文件</p>\n<p><code>FILE* fopen( const char * filename, const char * mode );</code></p>\n<p><strong>返回值</strong>:</p>\n<ul>\n<li>成功时，返回一个不为空的<code>FILE*</code>指针，用于控制该文件</li>\n<li>失败时，返回<code>NULL</code>空指针并设置了全局变量<code>errno</code></li>\n</ul>\n<h3 id=\"常见模式\"><a href=\"#常见模式\" class=\"headerlink\" title=\"常见模式\"></a>常见模式</h3><p>| 模式 | 简述 |<br>| &#x3D;&#x3D;&#x3D; | &#x3D;&#x3D;&#x3D; |<br>| <code>&quot;w&quot;</code> | 创建一个<strong>新的空文件</strong>用于输出操作。如果已存在<code>同名文件</code>,清除原文件并当作新文件处理 |<br>| <code>&quot;r&quot;</code> | 只读模式打开文件。且该文件必须存在 |<br>| <code>&quot;a&quot;</code> | 打开已有文件时，仅用于在文件末尾<code>追加</code>新的内容。并且重定位函数<code>(fseek,fsetpos,reweind)</code>会被忽略，即使成功调用，也没有效果；当文件不存在时，会创建一个新的空文件 |<br>| “<code>r+</code>“ | 读写模式打开已有文件，<strong>不会清除</strong>原文件内容,并且读写时均从文件开头开始。打开后第一次操作为写入时，从文件头部开始逐字符覆盖原文件。<strong>注</strong>读写模式同时只能<code>读</code>或<code>写</code>的一种，第一次取决于先进行哪种操作，可以用<code>fseek</code>函数转换读写模式 |<br>| “<code>w+</code>“ | 读写模式打开新文件，若存在，则清除原文件内容;读写模式的切换和<code>&quot;r+&quot;</code>模式相同，唯一的区别就是打开时是否清除原文件内容 |<br>| “<code>a+</code>“ | 从文件末尾打开读写模式，<strong>不会清除原文件内容</strong>，若打开后第一次操作为写，则从文件末尾开始；若第一次操作为读，则从头开始；读写模式的切换同上 |</p>\n<h3 id=\"二进制模式\"><a href=\"#二进制模式\" class=\"headerlink\" title=\"二进制模式\"></a>二进制模式</h3><p>如果要以二进制模式打开文件，只需要在上面的模式末尾加上字符<code>b</code></p>\n<p>若有<code>+</code>,则<code>b</code>既可以放在末尾也可以放在中间</p>\n<ul>\n<li><code>r+b</code> <code>w+b</code> <code>a+b</code></li>\n<li><code>rb+</code> <code>wb+</code> <code>ab+</code></li>\n</ul>\n<h3 id=\"强制新建文件\"><a href=\"#强制新建文件\" class=\"headerlink\" title=\"强制新建文件\"></a>强制新建文件</h3><p>新的C语言标准,<code>C2011</code>(不是C++11),添加了一种新的说明符<code>w</code>,可以被添加在任意<code>&quot;w&quot;</code>后面</p>\n<ul>\n<li><code>&quot;wx&quot;</code> <code>&quot;wbx&quot;</code> <code>&quot;w+x&quot;</code>  <code>&quot;w+bx&quot;</code>&#x2F;<code>&quot;wb+x&quot;</code></li>\n</ul>\n<p>当文件<strong>存在</strong>时,<code>w</code>会<strong>强制</strong><code>fopen</code>函数失败,返回一个<code>NULL</code>空指针</p>\n<h2 id=\"freopen-重定向文件流\"><a href=\"#freopen-重定向文件流\" class=\"headerlink\" title=\"freopen 重定向文件流\"></a>freopen 重定向文件流</h2><p><code>FILE* freopen ( const char *filename, const char *mode, FILE * pFile );</code></p>\n<ul>\n<li>如果传入了新的文件名(与<code>pFile</code>控制的文件相比),该函数会<strong>关闭</strong><code>pFile</code>原本指向的文件流，并取消关联。然后<strong>不论</strong>是否成功关闭，<code>freopen</code>会用和<code>fopen</code>同样的方式打开该文件</li>\n<li>如果文件名还是原文件，则只会改变打开模式</li>\n</ul>\n<p><strong>返回值</strong>:</p>\n<ul>\n<li>成功时，返回<code>pFile</code>内储存的地址</li>\n<li>失败时，返回<code>NULL</code></li>\n</ul>\n<h3 id=\"特别的\"><a href=\"#特别的\" class=\"headerlink\" title=\"特别的\"></a>特别的</h3><p><code>freopen</code>用于进程的输入输出重定向会特别有用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">freopen (<span class=\"string\">&quot;outfile.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stdout</span>);<span class=\"comment\">//标准输出重定向到文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">freopen (<span class=\"string\">&quot;readfile.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stdin</span>);<span class=\"comment\">//标准输入重定向到文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">freopen (<span class=\"string\">&quot;errdfile.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stderr</span>);<span class=\"comment\">//标准错误输出重定向到文件</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重定位-文件流位置指示器-stream-position-indicator\"><a href=\"#重定位-文件流位置指示器-stream-position-indicator\" class=\"headerlink\" title=\"重定位 文件流位置指示器(stream position indicator)\"></a>重定位 文件流位置指示器(stream position indicator)</h2><h3 id=\"文件的抽象内存结构\"><a href=\"#文件的抽象内存结构\" class=\"headerlink\" title=\"文件的抽象内存结构\"></a>文件的抽象内存结构</h3><p>首先我们要明确一下文件的内存结构，如下图</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-20_21-23-32.png\"></p>\n<p>这里及下文用图中的<code>ptr</code>代指标题的中的 <code>文件流位置指示器</code>,这个<code>ptr</code>决定了每一次对文件的<code>读/写</code>操作的<strong>起点</strong>,同时每一次<code>读/写</code>操作都会使<code>ptr</code>自动往后走，因此要显示控制<code>ptr</code>，就得使用<code>fseek,fsetpos</code>等接口</p>\n<h2 id=\"fseek-重定位\"><a href=\"#fseek-重定位\" class=\"headerlink\" title=\"fseek 重定位\"></a>fseek 重定位</h2><p><code>int fseek ( FILE *pFile, long int offset, int origin );</code></p>\n<p><code>fseek</code>能过直接重定位<code>ptr</code>所指的</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><code>pFile</code>：用于控制文件的<code>FILE*</code>类型指针</li>\n<li><code>offset</code>：则是<strong>偏移量</strong>，长整型，表示偏移多少字节</li>\n<li><code>origin</code>：该形参标注了<strong>偏移量</strong>相对于哪个位置计算<strong>实际位置</strong></li>\n</ul>\n<p><code>origin</code>有三个宏可以选<br>| 宏 | 实际位置 |<br>| <code>SEEK_SET</code> | 偏移量从<code>文件头</code>开始算 |<br>| <code>SEEK_CUR</code> | 偏移量从<code>当前文件指针ptr(上文介绍的)所在位置</code>开始算 |<br>| <code>SEEK_END</code> | 偏移量从<code>文件尾</code>开始算 |</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><ul>\n<li>成功时,返回<code>0</code></li>\n<li>失败时，返回<code>非零值</code>，同时，<strong>这条语句失效</strong>,上文说的<code>ptr</code>没有改变</li>\n</ul>\n<h2 id=\"fgetpos-和-fsetpos-设置-ptr\"><a href=\"#fgetpos-和-fsetpos-设置-ptr\" class=\"headerlink\" title=\"fgetpos 和 fsetpos 设置 ptr\"></a>fgetpos 和 fsetpos 设置 ptr</h2><p>可以用<code>fgetpos</code>获取<code>ptr</code>的当前位置，并使用<code>输出型参数</code>输出一个<code>fpos_t</code>类型的变量，而<code>fsetpos</code>可以用<code>fpos_t</code>类型的形参设置<code>ptr</code>的当前位置</p>\n<p>就好比<code>ptr</code>是当前坐标，每次<code>fgetpos</code>得到一个传送点信息，而<code>fsetpos</code>就可以用这个传送点信息传送<code>ptr</code>过去</p>\n<p><em>示例如下</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//准备一个文件</span></span><br><span class=\"line\">\tFILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//&quot;w&quot;模式打开文件file.txt</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> code = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* msg = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(pfile, <span class=\"string\">&quot;get msg : %s code:%d&quot;</span>, msg, code);</span><br><span class=\"line\">\tfclose(pfile);</span><br><span class=\"line\">\t<span class=\"comment\">//===========</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">fpos_t</span> pos1,pos2;</span><br><span class=\"line\">\tpfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfgetpos(pfile, &amp;pos1);</span><br><span class=\"line\">\tfgetc(pfile);</span><br><span class=\"line\">\tfgetpos(pfile, &amp;pos2);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfsetpos(pfile, &amp;pos2);<span class=\"comment\">//循环令ptr指向第二个字符</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第2个字符为: %c\\n&quot;</span>, fgetc(pfile));</span><br><span class=\"line\">\t&#125;                                                     </span><br><span class=\"line\">\tfsetpos(pfile, &amp;pos1);<span class=\"comment\">//令ptr指向第一个字符</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第1个字符为: %c\\n&quot;</span>, fgetc(pfile));</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(pfile);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第2个字符为: e</span><br><span class=\"line\">第2个字符为: e</span><br><span class=\"line\">第2个字符为: e</span><br><span class=\"line\">第1个字符为: g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fclose-关闭文件流\"><a href=\"#fclose-关闭文件流\" class=\"headerlink\" title=\"fclose 关闭文件流\"></a>fclose 关闭文件流</h2><p>可以用<code>fclose</code>显式地关闭文件流</p>\n<p>用法为<code>fclose(pFile);</code></p>\n<p>进程正常退出时，也会自动关闭文件流</p>\n<h2 id=\"fprintf-格式化输出字符串\"><a href=\"#fprintf-格式化输出字符串\" class=\"headerlink\" title=\"fprintf 格式化输出字符串\"></a>fprintf 格式化输出字符串</h2><p><code>fprintf</code>能格式化输出字符串到指定文件流，除了要<strong>指定</strong>文件流，格式化字符串的方式和<code>printf</code>一样</p>\n<ul>\n<li>且<code>fprintf(stdout,format,...)</code>和<code>printf(format,...)</code>效果一样</li>\n</ul>\n<h2 id=\"fputs-输出字符串\"><a href=\"#fputs-输出字符串\" class=\"headerlink\" title=\"fputs 输出字符串\"></a>fputs 输出字符串</h2><p><code>int fputs ( const char * str, FILE * stream );</code></p>\n<p><code>fputs</code>能将<code>C语言</code>的字符串输入到指定文件流中</p>\n<h2 id=\"fwrite-输出内存数据块\"><a href=\"#fwrite-输出内存数据块\" class=\"headerlink\" title=\"fwrite 输出内存数据块\"></a>fwrite 输出内存数据块</h2><p><code>size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);</code></p>\n<ul>\n<li><code>ptr</code>是指向<code>内存数据块</code>的指针</li>\n<li><code>size</code>是每个<code>数组元素</code>的大小</li>\n<li><code>nmemb</code>是元素数量</li>\n<li><code>stream</code>是文件流</li>\n</ul>\n<p>fwrite可以向指定文件流输入特定大小的内存数据块</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//&quot;w&quot;模式打开文件file.txt</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> msg[] = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">\tfwrite(msg, <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>), <span class=\"built_in\">strlen</span>(msg), pfile);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(pfile);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fscanf-格式化输入\"><a href=\"#fscanf-格式化输入\" class=\"headerlink\" title=\"fscanf 格式化输入\"></a>fscanf 格式化输入</h2><p><code>fscanf</code>能像<code>scanf</code>读取标准输入流一样,读取指定文件流</p>\n<ul>\n<li>且<code>scanf(stdin,format,...)</code>和<code>printf(format,...)</code>效果一样</li>\n</ul>\n<h2 id=\"fegts-获取一行\"><a href=\"#fegts-获取一行\" class=\"headerlink\" title=\"fegts 获取一行\"></a>fegts 获取一行</h2><p><code>char * fgets (char *str, int num, FILE *stream );</code></p>\n<h3 id=\"行为\"><a href=\"#行为\" class=\"headerlink\" title=\"行为\"></a>行为</h3><p><code>fegts</code>会一直读取直到<code>换行符</code>或<code>EOF文件结尾</code>结束读取，但<code>换行符</code>作为<strong>非法</strong>字符不会被拷贝到形参<code>str</code>中</p>\n<ul>\n<li>字符串结尾的<code>\\0</code>会被自动添加,且<strong>计算</strong>在读入的<strong>最大字符数</strong></li>\n<li><code>fgets</code>和<code>gets</code>有很大差别，它需要<strong>指定</strong>最大的读入字符数</li>\n</ul>\n<h3 id=\"形参\"><a href=\"#形参\" class=\"headerlink\" title=\"形参\"></a>形参</h3><ul>\n<li><code>str</code>为传入的字符数组作为缓冲区</li>\n<li><code>num</code>为拷贝的最大字符数，<strong>包括</strong>自动添加的结尾<code>\\0</code></li>\n<li><code>stream</code>为指定的文件流</li>\n</ul>\n<h3 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><ul>\n<li>成功时，返回<code>str</code>的值</li>\n<li>失败时，返回<code>NULL</code></li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//准备一个文件</span></span><br><span class=\"line\">\tFILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//&quot;w&quot;模式打开文件file.txt</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> code = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* msg = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(pfile, <span class=\"string\">&quot;get msg : %s code:%d&quot;</span>, msg, code);</span><br><span class=\"line\">\tfclose(pfile);</span><br><span class=\"line\">\t<span class=\"comment\">//=====</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span> str[<span class=\"number\">5</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tfgets(str, <span class=\"keyword\">sizeof</span>(str), pfile);<span class=\"comment\">//除去自动添加的\\0,最多从文件里读入4个字符</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(str);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get |</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"用户级文件操作\"><a href=\"#用户级文件操作\" class=\"headerlink\" title=\"用户级文件操作\"></a>用户级文件操作</h1><p><code>C语言</code>的文件操作也是用户级的文件操作，通过<code>FILE</code>对象来<strong>管理</strong>每一个<code>被打开的文件</code>，以及提供了<strong>用户级</strong>文件缓冲区，因此还涉及到冲刷缓冲区等问题</p>\n<h2 id=\"FILE-类\"><a href=\"#FILE-类\" class=\"headerlink\" title=\"FILE 类\"></a><code>FILE</code> 类</h2><p><code>FILE</code>类描述了一个文件流。里面存储了<strong>文件控制</strong>所需的信息:</p>\n<ul>\n<li>指向自身缓冲区的的<code>指针</code></li>\n<li>位置指示器</li>\n<li>状态指示器</li>\n</ul>\n<p>所以<code>C语言</code>中对文件的管理就是对<code>FILE</code>对象的管理</p>\n<h1 id=\"基础操作-针对一般文件\"><a href=\"#基础操作-针对一般文件\" class=\"headerlink\" title=\"基础操作 - 针对一般文件\"></a>基础操作 - 针对一般文件</h1><h2 id=\"基础示例\"><a href=\"#基础示例\" class=\"headerlink\" title=\"基础示例\"></a>基础示例</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//&quot;w&quot;模式打开文件file.txt</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> code = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* msg = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(pfile, <span class=\"string\">&quot;get msg : %s code:%d&quot;</span>, msg, code);<span class=\"comment\">//格式化输出字符串</span></span><br><span class=\"line\">\tfclose(pfile);<span class=\"comment\">//冲刷缓冲区并关闭文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码创建了一个<code>file.txt</code>文件，输入<code>格式化字符串</code>(就和使用printf打印一样)。然后用<code>flcose</code>关闭文件流</p>\n<h2 id=\"fopen-打开文件\"><a href=\"#fopen-打开文件\" class=\"headerlink\" title=\"fopen 打开文件\"></a>fopen 打开文件</h2><p><code>fopen</code>能够打开以各种<code>模式</code>磁盘上的文件</p>\n<p><code>FILE* fopen( const char * filename, const char * mode );</code></p>\n<p><strong>返回值</strong>:</p>\n<ul>\n<li>成功时，返回一个不为空的<code>FILE*</code>指针，用于控制该文件</li>\n<li>失败时，返回<code>NULL</code>空指针并设置了全局变量<code>errno</code></li>\n</ul>\n<h3 id=\"常见模式\"><a href=\"#常见模式\" class=\"headerlink\" title=\"常见模式\"></a>常见模式</h3><p>| 模式 | 简述 |<br>| &#x3D;&#x3D;&#x3D; | &#x3D;&#x3D;&#x3D; |<br>| <code>&quot;w&quot;</code> | 创建一个<strong>新的空文件</strong>用于输出操作。如果已存在<code>同名文件</code>,清除原文件并当作新文件处理 |<br>| <code>&quot;r&quot;</code> | 只读模式打开文件。且该文件必须存在 |<br>| <code>&quot;a&quot;</code> | 打开已有文件时，仅用于在文件末尾<code>追加</code>新的内容。并且重定位函数<code>(fseek,fsetpos,reweind)</code>会被忽略，即使成功调用，也没有效果；当文件不存在时，会创建一个新的空文件 |<br>| “<code>r+</code>“ | 读写模式打开已有文件，<strong>不会清除</strong>原文件内容,并且读写时均从文件开头开始。打开后第一次操作为写入时，从文件头部开始逐字符覆盖原文件。<strong>注</strong>读写模式同时只能<code>读</code>或<code>写</code>的一种，第一次取决于先进行哪种操作，可以用<code>fseek</code>函数转换读写模式 |<br>| “<code>w+</code>“ | 读写模式打开新文件，若存在，则清除原文件内容;读写模式的切换和<code>&quot;r+&quot;</code>模式相同，唯一的区别就是打开时是否清除原文件内容 |<br>| “<code>a+</code>“ | 从文件末尾打开读写模式，<strong>不会清除原文件内容</strong>，若打开后第一次操作为写，则从文件末尾开始；若第一次操作为读，则从头开始；读写模式的切换同上 |</p>\n<h3 id=\"二进制模式\"><a href=\"#二进制模式\" class=\"headerlink\" title=\"二进制模式\"></a>二进制模式</h3><p>如果要以二进制模式打开文件，只需要在上面的模式末尾加上字符<code>b</code></p>\n<p>若有<code>+</code>,则<code>b</code>既可以放在末尾也可以放在中间</p>\n<ul>\n<li><code>r+b</code> <code>w+b</code> <code>a+b</code></li>\n<li><code>rb+</code> <code>wb+</code> <code>ab+</code></li>\n</ul>\n<h3 id=\"强制新建文件\"><a href=\"#强制新建文件\" class=\"headerlink\" title=\"强制新建文件\"></a>强制新建文件</h3><p>新的C语言标准,<code>C2011</code>(不是C++11),添加了一种新的说明符<code>w</code>,可以被添加在任意<code>&quot;w&quot;</code>后面</p>\n<ul>\n<li><code>&quot;wx&quot;</code> <code>&quot;wbx&quot;</code> <code>&quot;w+x&quot;</code>  <code>&quot;w+bx&quot;</code>&#x2F;<code>&quot;wb+x&quot;</code></li>\n</ul>\n<p>当文件<strong>存在</strong>时,<code>w</code>会<strong>强制</strong><code>fopen</code>函数失败,返回一个<code>NULL</code>空指针</p>\n<h2 id=\"freopen-重定向文件流\"><a href=\"#freopen-重定向文件流\" class=\"headerlink\" title=\"freopen 重定向文件流\"></a>freopen 重定向文件流</h2><p><code>FILE* freopen ( const char *filename, const char *mode, FILE * pFile );</code></p>\n<ul>\n<li>如果传入了新的文件名(与<code>pFile</code>控制的文件相比),该函数会<strong>关闭</strong><code>pFile</code>原本指向的文件流，并取消关联。然后<strong>不论</strong>是否成功关闭，<code>freopen</code>会用和<code>fopen</code>同样的方式打开该文件</li>\n<li>如果文件名还是原文件，则只会改变打开模式</li>\n</ul>\n<p><strong>返回值</strong>:</p>\n<ul>\n<li>成功时，返回<code>pFile</code>内储存的地址</li>\n<li>失败时，返回<code>NULL</code></li>\n</ul>\n<h3 id=\"特别的\"><a href=\"#特别的\" class=\"headerlink\" title=\"特别的\"></a>特别的</h3><p><code>freopen</code>用于进程的输入输出重定向会特别有用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">freopen (<span class=\"string\">&quot;outfile.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stdout</span>);<span class=\"comment\">//标准输出重定向到文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">freopen (<span class=\"string\">&quot;readfile.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stdin</span>);<span class=\"comment\">//标准输入重定向到文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">freopen (<span class=\"string\">&quot;errdfile.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stderr</span>);<span class=\"comment\">//标准错误输出重定向到文件</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重定位-文件流位置指示器-stream-position-indicator\"><a href=\"#重定位-文件流位置指示器-stream-position-indicator\" class=\"headerlink\" title=\"重定位 文件流位置指示器(stream position indicator)\"></a>重定位 文件流位置指示器(stream position indicator)</h2><h3 id=\"文件的抽象内存结构\"><a href=\"#文件的抽象内存结构\" class=\"headerlink\" title=\"文件的抽象内存结构\"></a>文件的抽象内存结构</h3><p>首先我们要明确一下文件的内存结构，如下图</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-20_21-23-32.png\"></p>\n<p>这里及下文用图中的<code>ptr</code>代指标题的中的 <code>文件流位置指示器</code>,这个<code>ptr</code>决定了每一次对文件的<code>读/写</code>操作的<strong>起点</strong>,同时每一次<code>读/写</code>操作都会使<code>ptr</code>自动往后走，因此要显示控制<code>ptr</code>，就得使用<code>fseek,fsetpos</code>等接口</p>\n<h2 id=\"fseek-重定位\"><a href=\"#fseek-重定位\" class=\"headerlink\" title=\"fseek 重定位\"></a>fseek 重定位</h2><p><code>int fseek ( FILE *pFile, long int offset, int origin );</code></p>\n<p><code>fseek</code>能过直接重定位<code>ptr</code>所指的</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><code>pFile</code>：用于控制文件的<code>FILE*</code>类型指针</li>\n<li><code>offset</code>：则是<strong>偏移量</strong>，长整型，表示偏移多少字节</li>\n<li><code>origin</code>：该形参标注了<strong>偏移量</strong>相对于哪个位置计算<strong>实际位置</strong></li>\n</ul>\n<p><code>origin</code>有三个宏可以选<br>| 宏 | 实际位置 |<br>| <code>SEEK_SET</code> | 偏移量从<code>文件头</code>开始算 |<br>| <code>SEEK_CUR</code> | 偏移量从<code>当前文件指针ptr(上文介绍的)所在位置</code>开始算 |<br>| <code>SEEK_END</code> | 偏移量从<code>文件尾</code>开始算 |</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><ul>\n<li>成功时,返回<code>0</code></li>\n<li>失败时，返回<code>非零值</code>，同时，<strong>这条语句失效</strong>,上文说的<code>ptr</code>没有改变</li>\n</ul>\n<h2 id=\"fgetpos-和-fsetpos-设置-ptr\"><a href=\"#fgetpos-和-fsetpos-设置-ptr\" class=\"headerlink\" title=\"fgetpos 和 fsetpos 设置 ptr\"></a>fgetpos 和 fsetpos 设置 ptr</h2><p>可以用<code>fgetpos</code>获取<code>ptr</code>的当前位置，并使用<code>输出型参数</code>输出一个<code>fpos_t</code>类型的变量，而<code>fsetpos</code>可以用<code>fpos_t</code>类型的形参设置<code>ptr</code>的当前位置</p>\n<p>就好比<code>ptr</code>是当前坐标，每次<code>fgetpos</code>得到一个传送点信息，而<code>fsetpos</code>就可以用这个传送点信息传送<code>ptr</code>过去</p>\n<p><em>示例如下</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//准备一个文件</span></span><br><span class=\"line\">\tFILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//&quot;w&quot;模式打开文件file.txt</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> code = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* msg = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(pfile, <span class=\"string\">&quot;get msg : %s code:%d&quot;</span>, msg, code);</span><br><span class=\"line\">\tfclose(pfile);</span><br><span class=\"line\">\t<span class=\"comment\">//===========</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">fpos_t</span> pos1,pos2;</span><br><span class=\"line\">\tpfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfgetpos(pfile, &amp;pos1);</span><br><span class=\"line\">\tfgetc(pfile);</span><br><span class=\"line\">\tfgetpos(pfile, &amp;pos2);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfsetpos(pfile, &amp;pos2);<span class=\"comment\">//循环令ptr指向第二个字符</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第2个字符为: %c\\n&quot;</span>, fgetc(pfile));</span><br><span class=\"line\">\t&#125;                                                     </span><br><span class=\"line\">\tfsetpos(pfile, &amp;pos1);<span class=\"comment\">//令ptr指向第一个字符</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第1个字符为: %c\\n&quot;</span>, fgetc(pfile));</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(pfile);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第2个字符为: e</span><br><span class=\"line\">第2个字符为: e</span><br><span class=\"line\">第2个字符为: e</span><br><span class=\"line\">第1个字符为: g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fclose-关闭文件流\"><a href=\"#fclose-关闭文件流\" class=\"headerlink\" title=\"fclose 关闭文件流\"></a>fclose 关闭文件流</h2><p>可以用<code>fclose</code>显式地关闭文件流</p>\n<p>用法为<code>fclose(pFile);</code></p>\n<p>进程正常退出时，也会自动关闭文件流</p>\n<h2 id=\"fprintf-格式化输出字符串\"><a href=\"#fprintf-格式化输出字符串\" class=\"headerlink\" title=\"fprintf 格式化输出字符串\"></a>fprintf 格式化输出字符串</h2><p><code>fprintf</code>能格式化输出字符串到指定文件流，除了要<strong>指定</strong>文件流，格式化字符串的方式和<code>printf</code>一样</p>\n<ul>\n<li>且<code>fprintf(stdout,format,...)</code>和<code>printf(format,...)</code>效果一样</li>\n</ul>\n<h2 id=\"fputs-输出字符串\"><a href=\"#fputs-输出字符串\" class=\"headerlink\" title=\"fputs 输出字符串\"></a>fputs 输出字符串</h2><p><code>int fputs ( const char * str, FILE * stream );</code></p>\n<p><code>fputs</code>能将<code>C语言</code>的字符串输入到指定文件流中</p>\n<h2 id=\"fwrite-输出内存数据块\"><a href=\"#fwrite-输出内存数据块\" class=\"headerlink\" title=\"fwrite 输出内存数据块\"></a>fwrite 输出内存数据块</h2><p><code>size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);</code></p>\n<ul>\n<li><code>ptr</code>是指向<code>内存数据块</code>的指针</li>\n<li><code>size</code>是每个<code>数组元素</code>的大小</li>\n<li><code>nmemb</code>是元素数量</li>\n<li><code>stream</code>是文件流</li>\n</ul>\n<p>fwrite可以向指定文件流输入特定大小的内存数据块</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//&quot;w&quot;模式打开文件file.txt</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> msg[] = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">\tfwrite(msg, <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>), <span class=\"built_in\">strlen</span>(msg), pfile);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(pfile);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fscanf-格式化输入\"><a href=\"#fscanf-格式化输入\" class=\"headerlink\" title=\"fscanf 格式化输入\"></a>fscanf 格式化输入</h2><p><code>fscanf</code>能像<code>scanf</code>读取标准输入流一样,读取指定文件流</p>\n<ul>\n<li>且<code>scanf(stdin,format,...)</code>和<code>printf(format,...)</code>效果一样</li>\n</ul>\n<h2 id=\"fegts-获取一行\"><a href=\"#fegts-获取一行\" class=\"headerlink\" title=\"fegts 获取一行\"></a>fegts 获取一行</h2><p><code>char * fgets (char *str, int num, FILE *stream );</code></p>\n<h3 id=\"行为\"><a href=\"#行为\" class=\"headerlink\" title=\"行为\"></a>行为</h3><p><code>fegts</code>会一直读取直到<code>换行符</code>或<code>EOF文件结尾</code>结束读取，但<code>换行符</code>作为<strong>非法</strong>字符不会被拷贝到形参<code>str</code>中</p>\n<ul>\n<li>字符串结尾的<code>\\0</code>会被自动添加,且<strong>计算</strong>在读入的<strong>最大字符数</strong></li>\n<li><code>fgets</code>和<code>gets</code>有很大差别，它需要<strong>指定</strong>最大的读入字符数</li>\n</ul>\n<h3 id=\"形参\"><a href=\"#形参\" class=\"headerlink\" title=\"形参\"></a>形参</h3><ul>\n<li><code>str</code>为传入的字符数组作为缓冲区</li>\n<li><code>num</code>为拷贝的最大字符数，<strong>包括</strong>自动添加的结尾<code>\\0</code></li>\n<li><code>stream</code>为指定的文件流</li>\n</ul>\n<h3 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><ul>\n<li>成功时，返回<code>str</code>的值</li>\n<li>失败时，返回<code>NULL</code></li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//准备一个文件</span></span><br><span class=\"line\">\tFILE* pfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);<span class=\"comment\">//&quot;w&quot;模式打开文件file.txt</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> code = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* msg = <span class=\"string\">&quot;this is a msg&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(pfile, <span class=\"string\">&quot;get msg : %s code:%d&quot;</span>, msg, code);</span><br><span class=\"line\">\tfclose(pfile);</span><br><span class=\"line\">\t<span class=\"comment\">//=====</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpfile = fopen(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span> str[<span class=\"number\">5</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tfgets(str, <span class=\"keyword\">sizeof</span>(str), pfile);<span class=\"comment\">//除去自动添加的\\0,最多从文件里读入4个字符</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(str);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get |</span><br></pre></td></tr></table></figure>\n"},{"title":"C++文件操作","date":"2024-05-14T02:19:32.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-59-20.png","_content":"\n*注:追求代码简洁,有一致的C++风格，可参阅本篇博客，若追求更高的读写效率，建议参阅C语言篇* [但文章还没写]()\n\n本篇文章主要研究头文件`fstream`中的**函数**和**类**\n\n目前C++文件操作主要有两种流派,一种是声明`fstream`对象,另一种是分开声明`ifstream`和`ofstream`\n\n**注意，本文代码为了简洁，都是在展开std命名空间的前提下书写**\n\n# fstream的使用\n先写一段示例代码\n```C++\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nint main()\n{\n\tfstream f(\"file.txt\", ios::out);//调用构造函数以out模式打开文件file.txt 注:out模式下file.txt 会自动创建\n\tstring str = \"This is a sentence\";//在内存中准备一段字符串\n\tf << str;//将字符串从内存写入文件\n\tf.close();//关闭文件流\n\n\t//f对象可以复用\n\tf.open(\"file.txt\", ios::in);//以in模式打开file.txt\n\tstring content;//声明变量\n\tf >> content;//从文件流读取数据写入变量(内存)\n\tcout << content;//打印出来看一眼\n    f.close();\n\n\treturn 0;\n}\n\n```\n*输出结果*\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-14_18-49-56.png)\n\n这一小段代码完成了文件的两种模式的打开和读写，已经体现了`fstream`的基本功能,接下来分别详细介绍`成员函数`和`操作符重载`\n\n## fstreanm::open()\n函数声明:`void open(const char* filename, ios_base::openmode mode)`\n\n特别的,**C++11**增加了一个函数重载，第一个形参变为`const string& filename`\n\n实际上，也可以通过`fstream`类的构造函数来打开文件，参数与`open()`函数相同\n\n```C++\nfstream f(\"filename\",ios::out);\n```\n\n接下来分别介绍两个形参\n### filename\n**一般**第一个形参是文件名，可以传`字符串`/`char*`指针，C++11还支持传`string`对象\n\n文件名没什么好说的，就是有后缀的文件要**注意后缀**,以及文件名要写对，勤检查\n\n**但实际上**,第一个形参是`文件路径`,且支持`相对路径`,~~绝对路径我测不出来~~\n\n*代码示例如下*\n```C++\nf.open(\"this,txt\",ios::in);///打开当前文件夹的文件,this.txt是文件名\nf.open(\"../father.txt\",ios::in);//打开父级文件夹的文件,father.txt是文件名\nf.open(\"./dir/child.txt\",ios::in);//打开子级文件夹的文件(dir是文件夹名称)child.txt是文件名\n```\n\n### mode\n\n**用前须知**:这些`mode`都存在于`ios_base`的类域中,但由于`ios`继承自`ios_base`,混用二者皆可，本文为了简洁，指定类域时，使用`ios`，如`f.open(\"file.txt\",ios::out)`\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-16_19-22-46.png)\n\n*上图是继承关系图，箭头指向父类*\n\n\n这里依然统一使用`fstream`类声明一个`f`对象\n\n```C++\nfstream f;\n```\n\n打开模式比较多，下面先放一张表\n\n| mode | stands for | 描述 |\n| --- | --- | --- |\n| out | output | 打开文件用于`写入`,即`内存->文件`,且会**完全覆盖**原文件,内置的流缓存(`internal stream buffer`)支持输出操作(类似`cout`)|\n| in  | input | 打开文件用于读取,即`文件->内存`,内置的流缓存支持输入操作(`类似cin`)|\n| app | append | 所有的输出操作都**追加在文件末尾**,向已有内容追加文本 |\n| trunc | truncate | 在打文件**前**,**清除所有内容** |\n| binary | binary | 所有操作都以`二进制`的形式，而不是文本 |\n| ate | at end | 输出操作在文件末尾开始 |\n\n*注*,这些`mode`能用`|`操作符连接,**同时**使用这些`mode`\n\n**但是**\n\n-使用`trunc | app`会打开失败\n-使用`trunc`而未使用`|`连接`out`,也会失败\n\n接下来逐一介绍这些`mode`\n\n#### out 和 in\n`out`是最常用的模式之一,用于`覆盖`写入文件,而且当文件不存在时，会按文件名**新建**一个文件并执行写入操作(哪怕是空文件)\n\n`in`也是最常用的模式之一，用于`只读`地读取文件，且当文件不存在时，会**抛异常**(*这里挖个坑*)\n\n\n\n- 使用`out`时，`f`对象支持`<<`流插入操作符\n\n```C++\nstring str(\"123456\");\nf<<str<<endl;//和输出内容到终端(cout)是一样的\n```\n\n- 使用`in`时,`f`对象支持`>>`流提取和作为`getline`函数的参数\n\n```C++\nstring s1,s2;\nf>>s1>>s2;//和从终端提取内容(cin)是一样的\n\nstring line;\ngetline(f,line);//从文件流中提取一行,存入line对象\n\nwhile(getline(f,line))//逐行提取至文件末尾\n{\n\t//....\n}\n```\n\n- 使用`in | out`时，`f`同时支持以上操作\n\n但是`写入`操作又和单一个`out`不一样，`单out`是完全覆盖，不考虑原文件内容,而`in | out`时，是**不完全**覆盖：从头开始覆盖，新写入的内容没有原文件长时，剩下的原文件**依然保留**\n\n>*示例代码*\n```C++\nint main()\n{\n\tfstream f;\n\tf.open(\"ff.txt\", ios::out);\n\tf << \"LongWord\";//准备一个有内容的原文件\n\tf.close();\n\n\tf.open(\"ff.txt\", ios::in | ios::out);\n\tf << \"1234\";//写入1234\n\tf.close();\n\t//最后ff.txt的内容为\"1234Word\",不完全覆盖\n\treturn 0;\n}\n\n```\n\n但是，同时进行流插入和流提取时，文件的操作结果会比较诡异，所以并不建议对**同一个文件流**同时进行读写操作。\n\n在一段`f.open()`和`f.close()`之间依然还是只进行读取**或**写入中的**一种**，而不要混合操作\n\n**缺省参数**：其实`mode`形参是有缺省参数的，正是`ios_base::in | ios_base::out`,也就是说在明确只使用`out`或`in`的情况下，且执行覆盖写入操作时，单写一个`f.open(文件名)`即可\n\n#### 其它mode\n\n##### app\n正如表格里描述的，使用`app`时，写入时不会覆盖远内容，而是`追加`到文件末尾。其中与`out`一样，当文件不存在时，会自动创建并写入内容。(即使没内容，也会创建空文件)\n```C++\nint main()\n{\n\tfstream f;\n\n\tf.open(\"file.txt\",ios::out);\n\tf << \"111\";//准备一个内容为111的文件\n\tf.close();\n\tf.open(\"file.txt\", ios::app);\n\tf << \"222\";//111后面追加222\n\tf.close();\n\t//文件内容为111222\n\treturn 0;\n}\n```\n\n##### trunc\n因为不加`out`会打开失败，所以`trunc`算是个`out`的修正,在以`out`模式打开前，清空原文件的内容\n\n乍一看，因为`单out`是`完全覆盖写入`,似乎`trunc`没什么用\n\n但是使用`ios::out | ios::in | ios::trunc`时是不完全覆盖写入，所以提前清空内容还是很有意义的。~~(那为啥不用单out呢)~~\n\n##### ate\n全称`at end`,单用`ate`也会打开失败,当然，`ios::ate | ios::out`没有意义，因为还是完全覆盖写入,`ate`在`ios::in | ios::out | ios::in`更加有用，可以从文件末尾追加内容\n\n##### binary\n虽然表格里是那么说了，有没有用`binary`我是真测不出差别(~~真要用的话，另寻高就把~~)\n\n但是单用`binary`依然会打开失败,需要再连个`out`或`in`\n\n---\n\n# ifstream 和 ofstream\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-17_11-18-29.png)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-17_11-18-48.png)\n\n上图分别为二者的继承关系,实际上二者用起来和`fstream`是基本一样的，只不过在打开文件时，一个始终自带`ios::in`,另一个始终自带`ios::out`\n\n# 读取文件流的一些方法\n\n## `>>`操作符\n这是最容易理解的方式，和从终端读取`数据`到变量里是一样的,只要类型匹配，不一定要存到字符串里\n\n## `getline()`函数\n用`getline`可以读取一行(即读到`\\n`或文件末尾`EOF`)\n\n但`getline`主要有两种，存在于不同的头文件中，且参数不同\n\n### &lt;string&gt;中的getline\n`istream& getline (istream& is, string& str);`\n\n函数声明如上，第一个参数是文件流(`fstream`类或`istream`类都可以),第二个参数就是个`string`对象\n\n下面是一个逐行提取的例子\n```C++\n#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n\t//提前准备一个待提取文件\n\tfstream f;\n\tf.open(\"ff.txt\", ios::out);\n\tf << \"line 1\" << endl << \"line 2\" << endl;\n\tf.close();\n\t//================\n\tf.open(\"ff.txt\");\n\tstring str;\n\twhile (getline(f, str))//当f为空时，循环停止\n\t{\n\t\tcout << str << endl;//打印每行,str内不含换行符\n\t}\n\tf.close();\n\treturn 0;\n}\n```\n\n### 成员函数中的getline\n`std::istream::getline`\n\n根据继承关系,`fstream`继承了来自`istream`的`getline`成员函数,也就是说它们的对象都能调用这一成员函数\n\n`istream& getline (char* s, streamsize n );`\n\n函数声明如上，可以看到，第一个参数是`char*`，要传给它一个`字符数组`,第二个则是读入字符数的最大值,当实际读入的字符数**小于**`n`时，会自动在结尾加一个`\\0`\n\n~~讲真这个函数更像是来自C语言的函数~~\n\n示例代码\n```C++\nint main()\n{\n\tfstream f;\n\tf.open(\"ff.txt\", ios::out);\n\tf << \"line 1\" << endl << \"line 2\" << endl;\n\tf.close();\n\n\tf.open(\"ff.txt\");\n\tchar str[256] = { 0 };\n\tf.getline(str, 256);//str里存了line 1\\0\n\tf.close();\n\tcout << str;\n\treturn 0;\n}\n```\n\n## get() 函数\n```C++\nint get();\nistream& get (char& c);\n```\n\n如上是两种常用的函数重载,均为继承来的`成员函数`,逐字符提取的话就能提取到`\\n``\\r`之类的转义字符\n\n代码示例\n```C++\nint main()\n{\n\t//提前准备一个待提取文件\n\tfstream f;\n\tf.open(\"ff.txt\", ios::out);\n\tf << \"line 1\" << endl << \"line 2\" << endl;\n\tf.close();\n\t//================\n\t//方法1\n\tf.open(\"ff.txt\");\n\tchar ch;\n\twhile (f.get(ch))//获取字符\n\t{\n\t\tcout << ch;//打印字符\n\t}\n\tf.close();\n\t//方法2\n\tf.open(\"ff.txt\");\n\twhile ((ch = f.get()) != EOF)//因为优先级的问题，必须加括号\n\t{\n\t\tcout << ch;//打印字符\n\t}\n\tf.close();\n\treturn 0;\n}\n```\n\n# 小结\n以上就是C++文件操作的大部分常用内容了。挖一挖确实也不少内容了,值得总结。\n\n","source":"_posts/cpp-file-op.md","raw":"---\ntitle: C++文件操作\ndate: 2024-05-14 10:19:32\ntags: C++ 文件\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-59-20.png\n---\n\n*注:追求代码简洁,有一致的C++风格，可参阅本篇博客，若追求更高的读写效率，建议参阅C语言篇* [但文章还没写]()\n\n本篇文章主要研究头文件`fstream`中的**函数**和**类**\n\n目前C++文件操作主要有两种流派,一种是声明`fstream`对象,另一种是分开声明`ifstream`和`ofstream`\n\n**注意，本文代码为了简洁，都是在展开std命名空间的前提下书写**\n\n# fstream的使用\n先写一段示例代码\n```C++\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nint main()\n{\n\tfstream f(\"file.txt\", ios::out);//调用构造函数以out模式打开文件file.txt 注:out模式下file.txt 会自动创建\n\tstring str = \"This is a sentence\";//在内存中准备一段字符串\n\tf << str;//将字符串从内存写入文件\n\tf.close();//关闭文件流\n\n\t//f对象可以复用\n\tf.open(\"file.txt\", ios::in);//以in模式打开file.txt\n\tstring content;//声明变量\n\tf >> content;//从文件流读取数据写入变量(内存)\n\tcout << content;//打印出来看一眼\n    f.close();\n\n\treturn 0;\n}\n\n```\n*输出结果*\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-14_18-49-56.png)\n\n这一小段代码完成了文件的两种模式的打开和读写，已经体现了`fstream`的基本功能,接下来分别详细介绍`成员函数`和`操作符重载`\n\n## fstreanm::open()\n函数声明:`void open(const char* filename, ios_base::openmode mode)`\n\n特别的,**C++11**增加了一个函数重载，第一个形参变为`const string& filename`\n\n实际上，也可以通过`fstream`类的构造函数来打开文件，参数与`open()`函数相同\n\n```C++\nfstream f(\"filename\",ios::out);\n```\n\n接下来分别介绍两个形参\n### filename\n**一般**第一个形参是文件名，可以传`字符串`/`char*`指针，C++11还支持传`string`对象\n\n文件名没什么好说的，就是有后缀的文件要**注意后缀**,以及文件名要写对，勤检查\n\n**但实际上**,第一个形参是`文件路径`,且支持`相对路径`,~~绝对路径我测不出来~~\n\n*代码示例如下*\n```C++\nf.open(\"this,txt\",ios::in);///打开当前文件夹的文件,this.txt是文件名\nf.open(\"../father.txt\",ios::in);//打开父级文件夹的文件,father.txt是文件名\nf.open(\"./dir/child.txt\",ios::in);//打开子级文件夹的文件(dir是文件夹名称)child.txt是文件名\n```\n\n### mode\n\n**用前须知**:这些`mode`都存在于`ios_base`的类域中,但由于`ios`继承自`ios_base`,混用二者皆可，本文为了简洁，指定类域时，使用`ios`，如`f.open(\"file.txt\",ios::out)`\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-16_19-22-46.png)\n\n*上图是继承关系图，箭头指向父类*\n\n\n这里依然统一使用`fstream`类声明一个`f`对象\n\n```C++\nfstream f;\n```\n\n打开模式比较多，下面先放一张表\n\n| mode | stands for | 描述 |\n| --- | --- | --- |\n| out | output | 打开文件用于`写入`,即`内存->文件`,且会**完全覆盖**原文件,内置的流缓存(`internal stream buffer`)支持输出操作(类似`cout`)|\n| in  | input | 打开文件用于读取,即`文件->内存`,内置的流缓存支持输入操作(`类似cin`)|\n| app | append | 所有的输出操作都**追加在文件末尾**,向已有内容追加文本 |\n| trunc | truncate | 在打文件**前**,**清除所有内容** |\n| binary | binary | 所有操作都以`二进制`的形式，而不是文本 |\n| ate | at end | 输出操作在文件末尾开始 |\n\n*注*,这些`mode`能用`|`操作符连接,**同时**使用这些`mode`\n\n**但是**\n\n-使用`trunc | app`会打开失败\n-使用`trunc`而未使用`|`连接`out`,也会失败\n\n接下来逐一介绍这些`mode`\n\n#### out 和 in\n`out`是最常用的模式之一,用于`覆盖`写入文件,而且当文件不存在时，会按文件名**新建**一个文件并执行写入操作(哪怕是空文件)\n\n`in`也是最常用的模式之一，用于`只读`地读取文件，且当文件不存在时，会**抛异常**(*这里挖个坑*)\n\n\n\n- 使用`out`时，`f`对象支持`<<`流插入操作符\n\n```C++\nstring str(\"123456\");\nf<<str<<endl;//和输出内容到终端(cout)是一样的\n```\n\n- 使用`in`时,`f`对象支持`>>`流提取和作为`getline`函数的参数\n\n```C++\nstring s1,s2;\nf>>s1>>s2;//和从终端提取内容(cin)是一样的\n\nstring line;\ngetline(f,line);//从文件流中提取一行,存入line对象\n\nwhile(getline(f,line))//逐行提取至文件末尾\n{\n\t//....\n}\n```\n\n- 使用`in | out`时，`f`同时支持以上操作\n\n但是`写入`操作又和单一个`out`不一样，`单out`是完全覆盖，不考虑原文件内容,而`in | out`时，是**不完全**覆盖：从头开始覆盖，新写入的内容没有原文件长时，剩下的原文件**依然保留**\n\n>*示例代码*\n```C++\nint main()\n{\n\tfstream f;\n\tf.open(\"ff.txt\", ios::out);\n\tf << \"LongWord\";//准备一个有内容的原文件\n\tf.close();\n\n\tf.open(\"ff.txt\", ios::in | ios::out);\n\tf << \"1234\";//写入1234\n\tf.close();\n\t//最后ff.txt的内容为\"1234Word\",不完全覆盖\n\treturn 0;\n}\n\n```\n\n但是，同时进行流插入和流提取时，文件的操作结果会比较诡异，所以并不建议对**同一个文件流**同时进行读写操作。\n\n在一段`f.open()`和`f.close()`之间依然还是只进行读取**或**写入中的**一种**，而不要混合操作\n\n**缺省参数**：其实`mode`形参是有缺省参数的，正是`ios_base::in | ios_base::out`,也就是说在明确只使用`out`或`in`的情况下，且执行覆盖写入操作时，单写一个`f.open(文件名)`即可\n\n#### 其它mode\n\n##### app\n正如表格里描述的，使用`app`时，写入时不会覆盖远内容，而是`追加`到文件末尾。其中与`out`一样，当文件不存在时，会自动创建并写入内容。(即使没内容，也会创建空文件)\n```C++\nint main()\n{\n\tfstream f;\n\n\tf.open(\"file.txt\",ios::out);\n\tf << \"111\";//准备一个内容为111的文件\n\tf.close();\n\tf.open(\"file.txt\", ios::app);\n\tf << \"222\";//111后面追加222\n\tf.close();\n\t//文件内容为111222\n\treturn 0;\n}\n```\n\n##### trunc\n因为不加`out`会打开失败，所以`trunc`算是个`out`的修正,在以`out`模式打开前，清空原文件的内容\n\n乍一看，因为`单out`是`完全覆盖写入`,似乎`trunc`没什么用\n\n但是使用`ios::out | ios::in | ios::trunc`时是不完全覆盖写入，所以提前清空内容还是很有意义的。~~(那为啥不用单out呢)~~\n\n##### ate\n全称`at end`,单用`ate`也会打开失败,当然，`ios::ate | ios::out`没有意义，因为还是完全覆盖写入,`ate`在`ios::in | ios::out | ios::in`更加有用，可以从文件末尾追加内容\n\n##### binary\n虽然表格里是那么说了，有没有用`binary`我是真测不出差别(~~真要用的话，另寻高就把~~)\n\n但是单用`binary`依然会打开失败,需要再连个`out`或`in`\n\n---\n\n# ifstream 和 ofstream\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-17_11-18-29.png)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-17_11-18-48.png)\n\n上图分别为二者的继承关系,实际上二者用起来和`fstream`是基本一样的，只不过在打开文件时，一个始终自带`ios::in`,另一个始终自带`ios::out`\n\n# 读取文件流的一些方法\n\n## `>>`操作符\n这是最容易理解的方式，和从终端读取`数据`到变量里是一样的,只要类型匹配，不一定要存到字符串里\n\n## `getline()`函数\n用`getline`可以读取一行(即读到`\\n`或文件末尾`EOF`)\n\n但`getline`主要有两种，存在于不同的头文件中，且参数不同\n\n### &lt;string&gt;中的getline\n`istream& getline (istream& is, string& str);`\n\n函数声明如上，第一个参数是文件流(`fstream`类或`istream`类都可以),第二个参数就是个`string`对象\n\n下面是一个逐行提取的例子\n```C++\n#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n\t//提前准备一个待提取文件\n\tfstream f;\n\tf.open(\"ff.txt\", ios::out);\n\tf << \"line 1\" << endl << \"line 2\" << endl;\n\tf.close();\n\t//================\n\tf.open(\"ff.txt\");\n\tstring str;\n\twhile (getline(f, str))//当f为空时，循环停止\n\t{\n\t\tcout << str << endl;//打印每行,str内不含换行符\n\t}\n\tf.close();\n\treturn 0;\n}\n```\n\n### 成员函数中的getline\n`std::istream::getline`\n\n根据继承关系,`fstream`继承了来自`istream`的`getline`成员函数,也就是说它们的对象都能调用这一成员函数\n\n`istream& getline (char* s, streamsize n );`\n\n函数声明如上，可以看到，第一个参数是`char*`，要传给它一个`字符数组`,第二个则是读入字符数的最大值,当实际读入的字符数**小于**`n`时，会自动在结尾加一个`\\0`\n\n~~讲真这个函数更像是来自C语言的函数~~\n\n示例代码\n```C++\nint main()\n{\n\tfstream f;\n\tf.open(\"ff.txt\", ios::out);\n\tf << \"line 1\" << endl << \"line 2\" << endl;\n\tf.close();\n\n\tf.open(\"ff.txt\");\n\tchar str[256] = { 0 };\n\tf.getline(str, 256);//str里存了line 1\\0\n\tf.close();\n\tcout << str;\n\treturn 0;\n}\n```\n\n## get() 函数\n```C++\nint get();\nistream& get (char& c);\n```\n\n如上是两种常用的函数重载,均为继承来的`成员函数`,逐字符提取的话就能提取到`\\n``\\r`之类的转义字符\n\n代码示例\n```C++\nint main()\n{\n\t//提前准备一个待提取文件\n\tfstream f;\n\tf.open(\"ff.txt\", ios::out);\n\tf << \"line 1\" << endl << \"line 2\" << endl;\n\tf.close();\n\t//================\n\t//方法1\n\tf.open(\"ff.txt\");\n\tchar ch;\n\twhile (f.get(ch))//获取字符\n\t{\n\t\tcout << ch;//打印字符\n\t}\n\tf.close();\n\t//方法2\n\tf.open(\"ff.txt\");\n\twhile ((ch = f.get()) != EOF)//因为优先级的问题，必须加括号\n\t{\n\t\tcout << ch;//打印字符\n\t}\n\tf.close();\n\treturn 0;\n}\n```\n\n# 小结\n以上就是C++文件操作的大部分常用内容了。挖一挖确实也不少内容了,值得总结。\n\n","slug":"cpp-file-op","published":1,"updated":"2024-05-22T04:09:13.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv5000dv8p5hrut3lxt","content":"<p><em>注:追求代码简洁,有一致的C++风格，可参阅本篇博客，若追求更高的读写效率，建议参阅C语言篇</em> <a href=\"\">但文章还没写</a></p>\n<p>本篇文章主要研究头文件<code>fstream</code>中的<strong>函数</strong>和<strong>类</strong></p>\n<p>目前C++文件操作主要有两种流派,一种是声明<code>fstream</code>对象,另一种是分开声明<code>ifstream</code>和<code>ofstream</code></p>\n<p><strong>注意，本文代码为了简洁，都是在展开std命名空间的前提下书写</strong></p>\n<h1 id=\"fstream的使用\"><a href=\"#fstream的使用\" class=\"headerlink\" title=\"fstream的使用\"></a>fstream的使用</h1><p>先写一段示例代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">fstream <span class=\"title\">f</span><span class=\"params\">(<span class=\"string\">&quot;file.txt&quot;</span>, ios::out)</span></span>;<span class=\"comment\">//调用构造函数以out模式打开文件file.txt 注:out模式下file.txt 会自动创建</span></span><br><span class=\"line\">\tstring str = <span class=\"string\">&quot;This is a sentence&quot;</span>;<span class=\"comment\">//在内存中准备一段字符串</span></span><br><span class=\"line\">\tf &lt;&lt; str;<span class=\"comment\">//将字符串从内存写入文件</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();<span class=\"comment\">//关闭文件流</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//f对象可以复用</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;file.txt&quot;</span>, ios::in);<span class=\"comment\">//以in模式打开file.txt</span></span><br><span class=\"line\">\tstring content;<span class=\"comment\">//声明变量</span></span><br><span class=\"line\">\tf &gt;&gt; content;<span class=\"comment\">//从文件流读取数据写入变量(内存)</span></span><br><span class=\"line\">\tcout &lt;&lt; content;<span class=\"comment\">//打印出来看一眼</span></span><br><span class=\"line\">    f.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em>输出结果</em><br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-14_18-49-56.png\"></p>\n<p>这一小段代码完成了文件的两种模式的打开和读写，已经体现了<code>fstream</code>的基本功能,接下来分别详细介绍<code>成员函数</code>和<code>操作符重载</code></p>\n<h2 id=\"fstreanm-open\"><a href=\"#fstreanm-open\" class=\"headerlink\" title=\"fstreanm::open()\"></a>fstreanm::open()</h2><p>函数声明:<code>void open(const char* filename, ios_base::openmode mode)</code></p>\n<p>特别的,<strong>C++11</strong>增加了一个函数重载，第一个形参变为<code>const string&amp; filename</code></p>\n<p>实际上，也可以通过<code>fstream</code>类的构造函数来打开文件，参数与<code>open()</code>函数相同</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fstream <span class=\"title\">f</span><span class=\"params\">(<span class=\"string\">&quot;filename&quot;</span>,ios::out)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>接下来分别介绍两个形参</p>\n<h3 id=\"filename\"><a href=\"#filename\" class=\"headerlink\" title=\"filename\"></a>filename</h3><p><strong>一般</strong>第一个形参是文件名，可以传<code>字符串</code>&#x2F;<code>char*</code>指针，C++11还支持传<code>string</code>对象</p>\n<p>文件名没什么好说的，就是有后缀的文件要<strong>注意后缀</strong>,以及文件名要写对，勤检查</p>\n<p><strong>但实际上</strong>,第一个形参是<code>文件路径</code>,且支持<code>相对路径</code>,<del>绝对路径我测不出来</del></p>\n<p><em>代码示例如下</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;this,txt&quot;</span>,ios::in);<span class=\"comment\">///打开当前文件夹的文件,this.txt是文件名</span></span><br><span class=\"line\">f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;../father.txt&quot;</span>,ios::in);<span class=\"comment\">//打开父级文件夹的文件,father.txt是文件名</span></span><br><span class=\"line\">f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./dir/child.txt&quot;</span>,ios::in);<span class=\"comment\">//打开子级文件夹的文件(dir是文件夹名称)child.txt是文件名</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h3><p><strong>用前须知</strong>:这些<code>mode</code>都存在于<code>ios_base</code>的类域中,但由于<code>ios</code>继承自<code>ios_base</code>,混用二者皆可，本文为了简洁，指定类域时，使用<code>ios</code>，如<code>f.open(&quot;file.txt&quot;,ios::out)</code></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-16_19-22-46.png\"></p>\n<p><em>上图是继承关系图，箭头指向父类</em></p>\n<p>这里依然统一使用<code>fstream</code>类声明一个<code>f</code>对象</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fstream f;</span><br></pre></td></tr></table></figure>\n\n<p>打开模式比较多，下面先放一张表</p>\n<table>\n<thead>\n<tr>\n<th>mode</th>\n<th>stands for</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>out</td>\n<td>output</td>\n<td>打开文件用于<code>写入</code>,即<code>内存-&gt;文件</code>,且会<strong>完全覆盖</strong>原文件,内置的流缓存(<code>internal stream buffer</code>)支持输出操作(类似<code>cout</code>)</td>\n</tr>\n<tr>\n<td>in</td>\n<td>input</td>\n<td>打开文件用于读取,即<code>文件-&gt;内存</code>,内置的流缓存支持输入操作(<code>类似cin</code>)</td>\n</tr>\n<tr>\n<td>app</td>\n<td>append</td>\n<td>所有的输出操作都<strong>追加在文件末尾</strong>,向已有内容追加文本</td>\n</tr>\n<tr>\n<td>trunc</td>\n<td>truncate</td>\n<td>在打文件<strong>前</strong>,<strong>清除所有内容</strong></td>\n</tr>\n<tr>\n<td>binary</td>\n<td>binary</td>\n<td>所有操作都以<code>二进制</code>的形式，而不是文本</td>\n</tr>\n<tr>\n<td>ate</td>\n<td>at end</td>\n<td>输出操作在文件末尾开始</td>\n</tr>\n</tbody></table>\n<p><em>注</em>,这些<code>mode</code>能用<code>|</code>操作符连接,<strong>同时</strong>使用这些<code>mode</code></p>\n<p><strong>但是</strong></p>\n<p>-使用<code>trunc | app</code>会打开失败<br>-使用<code>trunc</code>而未使用<code>|</code>连接<code>out</code>,也会失败</p>\n<p>接下来逐一介绍这些<code>mode</code></p>\n<h4 id=\"out-和-in\"><a href=\"#out-和-in\" class=\"headerlink\" title=\"out 和 in\"></a>out 和 in</h4><p><code>out</code>是最常用的模式之一,用于<code>覆盖</code>写入文件,而且当文件不存在时，会按文件名<strong>新建</strong>一个文件并执行写入操作(哪怕是空文件)</p>\n<p><code>in</code>也是最常用的模式之一，用于<code>只读</code>地读取文件，且当文件不存在时，会<strong>抛异常</strong>(<em>这里挖个坑</em>)</p>\n<ul>\n<li>使用<code>out</code>时，<code>f</code>对象支持<code>&lt;&lt;</code>流插入操作符</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">string <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">&quot;123456&quot;</span>)</span></span>;</span><br><span class=\"line\">f&lt;&lt;str&lt;&lt;endl;<span class=\"comment\">//和输出内容到终端(cout)是一样的</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>in</code>时,<code>f</code>对象支持<code>&gt;&gt;</code>流提取和作为<code>getline</code>函数的参数</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1,s2;</span><br><span class=\"line\">f&gt;&gt;s1&gt;&gt;s2;<span class=\"comment\">//和从终端提取内容(cin)是一样的</span></span><br><span class=\"line\"></span><br><span class=\"line\">string line;</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(f,line);<span class=\"comment\">//从文件流中提取一行,存入line对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">getline</span>(f,line))<span class=\"comment\">//逐行提取至文件末尾</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>in | out</code>时，<code>f</code>同时支持以上操作</li>\n</ul>\n<p>但是<code>写入</code>操作又和单一个<code>out</code>不一样，<code>单out</code>是完全覆盖，不考虑原文件内容,而<code>in | out</code>时，是<strong>不完全</strong>覆盖：从头开始覆盖，新写入的内容没有原文件长时，剩下的原文件<strong>依然保留</strong></p>\n<blockquote>\n<p><em>示例代码</em></p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfstream f;</span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>, ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;LongWord&quot;</span>;<span class=\"comment\">//准备一个有内容的原文件</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>, ios::in | ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;1234&quot;</span>;<span class=\"comment\">//写入1234</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//最后ff.txt的内容为&quot;1234Word&quot;,不完全覆盖</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>但是，同时进行流插入和流提取时，文件的操作结果会比较诡异，所以并不建议对<strong>同一个文件流</strong>同时进行读写操作。</p>\n<p>在一段<code>f.open()</code>和<code>f.close()</code>之间依然还是只进行读取<strong>或</strong>写入中的<strong>一种</strong>，而不要混合操作</p>\n<p><strong>缺省参数</strong>：其实<code>mode</code>形参是有缺省参数的，正是<code>ios_base::in | ios_base::out</code>,也就是说在明确只使用<code>out</code>或<code>in</code>的情况下，且执行覆盖写入操作时，单写一个<code>f.open(文件名)</code>即可</p>\n<h4 id=\"其它mode\"><a href=\"#其它mode\" class=\"headerlink\" title=\"其它mode\"></a>其它mode</h4><h5 id=\"app\"><a href=\"#app\" class=\"headerlink\" title=\"app\"></a>app</h5><p>正如表格里描述的，使用<code>app</code>时，写入时不会覆盖远内容，而是<code>追加</code>到文件末尾。其中与<code>out</code>一样，当文件不存在时，会自动创建并写入内容。(即使没内容，也会创建空文件)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfstream f;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;file.txt&quot;</span>,ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;111&quot;</span>;<span class=\"comment\">//准备一个内容为111的文件</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;file.txt&quot;</span>, ios::app);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;222&quot;</span>;<span class=\"comment\">//111后面追加222</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//文件内容为111222</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"trunc\"><a href=\"#trunc\" class=\"headerlink\" title=\"trunc\"></a>trunc</h5><p>因为不加<code>out</code>会打开失败，所以<code>trunc</code>算是个<code>out</code>的修正,在以<code>out</code>模式打开前，清空原文件的内容</p>\n<p>乍一看，因为<code>单out</code>是<code>完全覆盖写入</code>,似乎<code>trunc</code>没什么用</p>\n<p>但是使用<code>ios::out | ios::in | ios::trunc</code>时是不完全覆盖写入，所以提前清空内容还是很有意义的。<del>(那为啥不用单out呢)</del></p>\n<h5 id=\"ate\"><a href=\"#ate\" class=\"headerlink\" title=\"ate\"></a>ate</h5><p>全称<code>at end</code>,单用<code>ate</code>也会打开失败,当然，<code>ios::ate | ios::out</code>没有意义，因为还是完全覆盖写入,<code>ate</code>在<code>ios::in | ios::out | ios::in</code>更加有用，可以从文件末尾追加内容</p>\n<h5 id=\"binary\"><a href=\"#binary\" class=\"headerlink\" title=\"binary\"></a>binary</h5><p>虽然表格里是那么说了，有没有用<code>binary</code>我是真测不出差别(<del>真要用的话，另寻高就把</del>)</p>\n<p>但是单用<code>binary</code>依然会打开失败,需要再连个<code>out</code>或<code>in</code></p>\n<hr>\n<h1 id=\"ifstream-和-ofstream\"><a href=\"#ifstream-和-ofstream\" class=\"headerlink\" title=\"ifstream 和 ofstream\"></a>ifstream 和 ofstream</h1><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-17_11-18-29.png\"></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-17_11-18-48.png\"></p>\n<p>上图分别为二者的继承关系,实际上二者用起来和<code>fstream</code>是基本一样的，只不过在打开文件时，一个始终自带<code>ios::in</code>,另一个始终自带<code>ios::out</code></p>\n<h1 id=\"读取文件流的一些方法\"><a href=\"#读取文件流的一些方法\" class=\"headerlink\" title=\"读取文件流的一些方法\"></a>读取文件流的一些方法</h1><h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"&gt;&gt;操作符\"></a><code>&gt;&gt;</code>操作符</h2><p>这是最容易理解的方式，和从终端读取<code>数据</code>到变量里是一样的,只要类型匹配，不一定要存到字符串里</p>\n<h2 id=\"getline-函数\"><a href=\"#getline-函数\" class=\"headerlink\" title=\"getline()函数\"></a><code>getline()</code>函数</h2><p>用<code>getline</code>可以读取一行(即读到<code>\\n</code>或文件末尾<code>EOF</code>)</p>\n<p>但<code>getline</code>主要有两种，存在于不同的头文件中，且参数不同</p>\n<h3 id=\"中的getline\"><a href=\"#中的getline\" class=\"headerlink\" title=\"&lt;string&gt;中的getline\"></a>&lt;string&gt;中的getline</h3><p><code>istream&amp; getline (istream&amp; is, string&amp; str);</code></p>\n<p>函数声明如上，第一个参数是文件流(<code>fstream</code>类或<code>istream</code>类都可以),第二个参数就是个<code>string</code>对象</p>\n<p>下面是一个逐行提取的例子</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//提前准备一个待提取文件</span></span><br><span class=\"line\">\tfstream f;</span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>, ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;line 1&quot;</span> &lt;&lt; endl &lt;&lt; <span class=\"string\">&quot;line 2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//================</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>);</span><br><span class=\"line\">\tstring str;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">getline</span>(f, str))<span class=\"comment\">//当f为空时，循环停止</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; str &lt;&lt; endl;<span class=\"comment\">//打印每行,str内不含换行符</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成员函数中的getline\"><a href=\"#成员函数中的getline\" class=\"headerlink\" title=\"成员函数中的getline\"></a>成员函数中的getline</h3><p><code>std::istream::getline</code></p>\n<p>根据继承关系,<code>fstream</code>继承了来自<code>istream</code>的<code>getline</code>成员函数,也就是说它们的对象都能调用这一成员函数</p>\n<p><code>istream&amp; getline (char* s, streamsize n );</code></p>\n<p>函数声明如上，可以看到，第一个参数是<code>char*</code>，要传给它一个<code>字符数组</code>,第二个则是读入字符数的最大值,当实际读入的字符数<strong>小于</strong><code>n</code>时，会自动在结尾加一个<code>\\0</code></p>\n<p><del>讲真这个函数更像是来自C语言的函数</del></p>\n<p>示例代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfstream f;</span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>, ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;line 1&quot;</span> &lt;&lt; endl &lt;&lt; <span class=\"string\">&quot;line 2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span> str[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tf.<span class=\"built_in\">getline</span>(str, <span class=\"number\">256</span>);<span class=\"comment\">//str里存了line 1\\0</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\tcout &lt;&lt; str;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"get-函数\"><a href=\"#get-函数\" class=\"headerlink\" title=\"get() 函数\"></a>get() 函数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">istream&amp; <span class=\"title\">get</span> <span class=\"params\">(<span class=\"type\">char</span>&amp; c)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>如上是两种常用的函数重载,均为继承来的<code>成员函数</code>,逐字符提取的话就能提取到<code>\\n``\\r</code>之类的转义字符</p>\n<p>代码示例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//提前准备一个待提取文件</span></span><br><span class=\"line\">\tfstream f;</span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>, ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;line 1&quot;</span> &lt;&lt; endl &lt;&lt; <span class=\"string\">&quot;line 2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//================</span></span><br><span class=\"line\">\t<span class=\"comment\">//方法1</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span> ch;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (f.<span class=\"built_in\">get</span>(ch))<span class=\"comment\">//获取字符</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; ch;<span class=\"comment\">//打印字符</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//方法2</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((ch = f.<span class=\"built_in\">get</span>()) != EOF)<span class=\"comment\">//因为优先级的问题，必须加括号</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; ch;<span class=\"comment\">//打印字符</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>以上就是C++文件操作的大部分常用内容了。挖一挖确实也不少内容了,值得总结。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<p><em>注:追求代码简洁,有一致的C++风格，可参阅本篇博客，若追求更高的读写效率，建议参阅C语言篇</em> <a href=\"\">但文章还没写</a></p>\n<p>本篇文章主要研究头文件<code>fstream</code>中的<strong>函数</strong>和<strong>类</strong></p>\n<p>目前C++文件操作主要有两种流派,一种是声明<code>fstream</code>对象,另一种是分开声明<code>ifstream</code>和<code>ofstream</code></p>\n<p><strong>注意，本文代码为了简洁，都是在展开std命名空间的前提下书写</strong></p>\n<h1 id=\"fstream的使用\"><a href=\"#fstream的使用\" class=\"headerlink\" title=\"fstream的使用\"></a>fstream的使用</h1><p>先写一段示例代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">fstream <span class=\"title\">f</span><span class=\"params\">(<span class=\"string\">&quot;file.txt&quot;</span>, ios::out)</span></span>;<span class=\"comment\">//调用构造函数以out模式打开文件file.txt 注:out模式下file.txt 会自动创建</span></span><br><span class=\"line\">\tstring str = <span class=\"string\">&quot;This is a sentence&quot;</span>;<span class=\"comment\">//在内存中准备一段字符串</span></span><br><span class=\"line\">\tf &lt;&lt; str;<span class=\"comment\">//将字符串从内存写入文件</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();<span class=\"comment\">//关闭文件流</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//f对象可以复用</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;file.txt&quot;</span>, ios::in);<span class=\"comment\">//以in模式打开file.txt</span></span><br><span class=\"line\">\tstring content;<span class=\"comment\">//声明变量</span></span><br><span class=\"line\">\tf &gt;&gt; content;<span class=\"comment\">//从文件流读取数据写入变量(内存)</span></span><br><span class=\"line\">\tcout &lt;&lt; content;<span class=\"comment\">//打印出来看一眼</span></span><br><span class=\"line\">    f.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em>输出结果</em><br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-14_18-49-56.png\"></p>\n<p>这一小段代码完成了文件的两种模式的打开和读写，已经体现了<code>fstream</code>的基本功能,接下来分别详细介绍<code>成员函数</code>和<code>操作符重载</code></p>\n<h2 id=\"fstreanm-open\"><a href=\"#fstreanm-open\" class=\"headerlink\" title=\"fstreanm::open()\"></a>fstreanm::open()</h2><p>函数声明:<code>void open(const char* filename, ios_base::openmode mode)</code></p>\n<p>特别的,<strong>C++11</strong>增加了一个函数重载，第一个形参变为<code>const string&amp; filename</code></p>\n<p>实际上，也可以通过<code>fstream</code>类的构造函数来打开文件，参数与<code>open()</code>函数相同</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fstream <span class=\"title\">f</span><span class=\"params\">(<span class=\"string\">&quot;filename&quot;</span>,ios::out)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>接下来分别介绍两个形参</p>\n<h3 id=\"filename\"><a href=\"#filename\" class=\"headerlink\" title=\"filename\"></a>filename</h3><p><strong>一般</strong>第一个形参是文件名，可以传<code>字符串</code>&#x2F;<code>char*</code>指针，C++11还支持传<code>string</code>对象</p>\n<p>文件名没什么好说的，就是有后缀的文件要<strong>注意后缀</strong>,以及文件名要写对，勤检查</p>\n<p><strong>但实际上</strong>,第一个形参是<code>文件路径</code>,且支持<code>相对路径</code>,<del>绝对路径我测不出来</del></p>\n<p><em>代码示例如下</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;this,txt&quot;</span>,ios::in);<span class=\"comment\">///打开当前文件夹的文件,this.txt是文件名</span></span><br><span class=\"line\">f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;../father.txt&quot;</span>,ios::in);<span class=\"comment\">//打开父级文件夹的文件,father.txt是文件名</span></span><br><span class=\"line\">f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./dir/child.txt&quot;</span>,ios::in);<span class=\"comment\">//打开子级文件夹的文件(dir是文件夹名称)child.txt是文件名</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h3><p><strong>用前须知</strong>:这些<code>mode</code>都存在于<code>ios_base</code>的类域中,但由于<code>ios</code>继承自<code>ios_base</code>,混用二者皆可，本文为了简洁，指定类域时，使用<code>ios</code>，如<code>f.open(&quot;file.txt&quot;,ios::out)</code></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-16_19-22-46.png\"></p>\n<p><em>上图是继承关系图，箭头指向父类</em></p>\n<p>这里依然统一使用<code>fstream</code>类声明一个<code>f</code>对象</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fstream f;</span><br></pre></td></tr></table></figure>\n\n<p>打开模式比较多，下面先放一张表</p>\n<table>\n<thead>\n<tr>\n<th>mode</th>\n<th>stands for</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>out</td>\n<td>output</td>\n<td>打开文件用于<code>写入</code>,即<code>内存-&gt;文件</code>,且会<strong>完全覆盖</strong>原文件,内置的流缓存(<code>internal stream buffer</code>)支持输出操作(类似<code>cout</code>)</td>\n</tr>\n<tr>\n<td>in</td>\n<td>input</td>\n<td>打开文件用于读取,即<code>文件-&gt;内存</code>,内置的流缓存支持输入操作(<code>类似cin</code>)</td>\n</tr>\n<tr>\n<td>app</td>\n<td>append</td>\n<td>所有的输出操作都<strong>追加在文件末尾</strong>,向已有内容追加文本</td>\n</tr>\n<tr>\n<td>trunc</td>\n<td>truncate</td>\n<td>在打文件<strong>前</strong>,<strong>清除所有内容</strong></td>\n</tr>\n<tr>\n<td>binary</td>\n<td>binary</td>\n<td>所有操作都以<code>二进制</code>的形式，而不是文本</td>\n</tr>\n<tr>\n<td>ate</td>\n<td>at end</td>\n<td>输出操作在文件末尾开始</td>\n</tr>\n</tbody></table>\n<p><em>注</em>,这些<code>mode</code>能用<code>|</code>操作符连接,<strong>同时</strong>使用这些<code>mode</code></p>\n<p><strong>但是</strong></p>\n<p>-使用<code>trunc | app</code>会打开失败<br>-使用<code>trunc</code>而未使用<code>|</code>连接<code>out</code>,也会失败</p>\n<p>接下来逐一介绍这些<code>mode</code></p>\n<h4 id=\"out-和-in\"><a href=\"#out-和-in\" class=\"headerlink\" title=\"out 和 in\"></a>out 和 in</h4><p><code>out</code>是最常用的模式之一,用于<code>覆盖</code>写入文件,而且当文件不存在时，会按文件名<strong>新建</strong>一个文件并执行写入操作(哪怕是空文件)</p>\n<p><code>in</code>也是最常用的模式之一，用于<code>只读</code>地读取文件，且当文件不存在时，会<strong>抛异常</strong>(<em>这里挖个坑</em>)</p>\n<ul>\n<li>使用<code>out</code>时，<code>f</code>对象支持<code>&lt;&lt;</code>流插入操作符</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">string <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">&quot;123456&quot;</span>)</span></span>;</span><br><span class=\"line\">f&lt;&lt;str&lt;&lt;endl;<span class=\"comment\">//和输出内容到终端(cout)是一样的</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>in</code>时,<code>f</code>对象支持<code>&gt;&gt;</code>流提取和作为<code>getline</code>函数的参数</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1,s2;</span><br><span class=\"line\">f&gt;&gt;s1&gt;&gt;s2;<span class=\"comment\">//和从终端提取内容(cin)是一样的</span></span><br><span class=\"line\"></span><br><span class=\"line\">string line;</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(f,line);<span class=\"comment\">//从文件流中提取一行,存入line对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">getline</span>(f,line))<span class=\"comment\">//逐行提取至文件末尾</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>in | out</code>时，<code>f</code>同时支持以上操作</li>\n</ul>\n<p>但是<code>写入</code>操作又和单一个<code>out</code>不一样，<code>单out</code>是完全覆盖，不考虑原文件内容,而<code>in | out</code>时，是<strong>不完全</strong>覆盖：从头开始覆盖，新写入的内容没有原文件长时，剩下的原文件<strong>依然保留</strong></p>\n<blockquote>\n<p><em>示例代码</em></p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfstream f;</span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>, ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;LongWord&quot;</span>;<span class=\"comment\">//准备一个有内容的原文件</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>, ios::in | ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;1234&quot;</span>;<span class=\"comment\">//写入1234</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//最后ff.txt的内容为&quot;1234Word&quot;,不完全覆盖</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>但是，同时进行流插入和流提取时，文件的操作结果会比较诡异，所以并不建议对<strong>同一个文件流</strong>同时进行读写操作。</p>\n<p>在一段<code>f.open()</code>和<code>f.close()</code>之间依然还是只进行读取<strong>或</strong>写入中的<strong>一种</strong>，而不要混合操作</p>\n<p><strong>缺省参数</strong>：其实<code>mode</code>形参是有缺省参数的，正是<code>ios_base::in | ios_base::out</code>,也就是说在明确只使用<code>out</code>或<code>in</code>的情况下，且执行覆盖写入操作时，单写一个<code>f.open(文件名)</code>即可</p>\n<h4 id=\"其它mode\"><a href=\"#其它mode\" class=\"headerlink\" title=\"其它mode\"></a>其它mode</h4><h5 id=\"app\"><a href=\"#app\" class=\"headerlink\" title=\"app\"></a>app</h5><p>正如表格里描述的，使用<code>app</code>时，写入时不会覆盖远内容，而是<code>追加</code>到文件末尾。其中与<code>out</code>一样，当文件不存在时，会自动创建并写入内容。(即使没内容，也会创建空文件)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfstream f;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;file.txt&quot;</span>,ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;111&quot;</span>;<span class=\"comment\">//准备一个内容为111的文件</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;file.txt&quot;</span>, ios::app);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;222&quot;</span>;<span class=\"comment\">//111后面追加222</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//文件内容为111222</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"trunc\"><a href=\"#trunc\" class=\"headerlink\" title=\"trunc\"></a>trunc</h5><p>因为不加<code>out</code>会打开失败，所以<code>trunc</code>算是个<code>out</code>的修正,在以<code>out</code>模式打开前，清空原文件的内容</p>\n<p>乍一看，因为<code>单out</code>是<code>完全覆盖写入</code>,似乎<code>trunc</code>没什么用</p>\n<p>但是使用<code>ios::out | ios::in | ios::trunc</code>时是不完全覆盖写入，所以提前清空内容还是很有意义的。<del>(那为啥不用单out呢)</del></p>\n<h5 id=\"ate\"><a href=\"#ate\" class=\"headerlink\" title=\"ate\"></a>ate</h5><p>全称<code>at end</code>,单用<code>ate</code>也会打开失败,当然，<code>ios::ate | ios::out</code>没有意义，因为还是完全覆盖写入,<code>ate</code>在<code>ios::in | ios::out | ios::in</code>更加有用，可以从文件末尾追加内容</p>\n<h5 id=\"binary\"><a href=\"#binary\" class=\"headerlink\" title=\"binary\"></a>binary</h5><p>虽然表格里是那么说了，有没有用<code>binary</code>我是真测不出差别(<del>真要用的话，另寻高就把</del>)</p>\n<p>但是单用<code>binary</code>依然会打开失败,需要再连个<code>out</code>或<code>in</code></p>\n<hr>\n<h1 id=\"ifstream-和-ofstream\"><a href=\"#ifstream-和-ofstream\" class=\"headerlink\" title=\"ifstream 和 ofstream\"></a>ifstream 和 ofstream</h1><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-17_11-18-29.png\"></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-17_11-18-48.png\"></p>\n<p>上图分别为二者的继承关系,实际上二者用起来和<code>fstream</code>是基本一样的，只不过在打开文件时，一个始终自带<code>ios::in</code>,另一个始终自带<code>ios::out</code></p>\n<h1 id=\"读取文件流的一些方法\"><a href=\"#读取文件流的一些方法\" class=\"headerlink\" title=\"读取文件流的一些方法\"></a>读取文件流的一些方法</h1><h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"&gt;&gt;操作符\"></a><code>&gt;&gt;</code>操作符</h2><p>这是最容易理解的方式，和从终端读取<code>数据</code>到变量里是一样的,只要类型匹配，不一定要存到字符串里</p>\n<h2 id=\"getline-函数\"><a href=\"#getline-函数\" class=\"headerlink\" title=\"getline()函数\"></a><code>getline()</code>函数</h2><p>用<code>getline</code>可以读取一行(即读到<code>\\n</code>或文件末尾<code>EOF</code>)</p>\n<p>但<code>getline</code>主要有两种，存在于不同的头文件中，且参数不同</p>\n<h3 id=\"中的getline\"><a href=\"#中的getline\" class=\"headerlink\" title=\"&lt;string&gt;中的getline\"></a>&lt;string&gt;中的getline</h3><p><code>istream&amp; getline (istream&amp; is, string&amp; str);</code></p>\n<p>函数声明如上，第一个参数是文件流(<code>fstream</code>类或<code>istream</code>类都可以),第二个参数就是个<code>string</code>对象</p>\n<p>下面是一个逐行提取的例子</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//提前准备一个待提取文件</span></span><br><span class=\"line\">\tfstream f;</span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>, ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;line 1&quot;</span> &lt;&lt; endl &lt;&lt; <span class=\"string\">&quot;line 2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//================</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>);</span><br><span class=\"line\">\tstring str;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">getline</span>(f, str))<span class=\"comment\">//当f为空时，循环停止</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; str &lt;&lt; endl;<span class=\"comment\">//打印每行,str内不含换行符</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成员函数中的getline\"><a href=\"#成员函数中的getline\" class=\"headerlink\" title=\"成员函数中的getline\"></a>成员函数中的getline</h3><p><code>std::istream::getline</code></p>\n<p>根据继承关系,<code>fstream</code>继承了来自<code>istream</code>的<code>getline</code>成员函数,也就是说它们的对象都能调用这一成员函数</p>\n<p><code>istream&amp; getline (char* s, streamsize n );</code></p>\n<p>函数声明如上，可以看到，第一个参数是<code>char*</code>，要传给它一个<code>字符数组</code>,第二个则是读入字符数的最大值,当实际读入的字符数<strong>小于</strong><code>n</code>时，会自动在结尾加一个<code>\\0</code></p>\n<p><del>讲真这个函数更像是来自C语言的函数</del></p>\n<p>示例代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfstream f;</span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>, ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;line 1&quot;</span> &lt;&lt; endl &lt;&lt; <span class=\"string\">&quot;line 2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span> str[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tf.<span class=\"built_in\">getline</span>(str, <span class=\"number\">256</span>);<span class=\"comment\">//str里存了line 1\\0</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\tcout &lt;&lt; str;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"get-函数\"><a href=\"#get-函数\" class=\"headerlink\" title=\"get() 函数\"></a>get() 函数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">istream&amp; <span class=\"title\">get</span> <span class=\"params\">(<span class=\"type\">char</span>&amp; c)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>如上是两种常用的函数重载,均为继承来的<code>成员函数</code>,逐字符提取的话就能提取到<code>\\n``\\r</code>之类的转义字符</p>\n<p>代码示例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//提前准备一个待提取文件</span></span><br><span class=\"line\">\tfstream f;</span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>, ios::out);</span><br><span class=\"line\">\tf &lt;&lt; <span class=\"string\">&quot;line 1&quot;</span> &lt;&lt; endl &lt;&lt; <span class=\"string\">&quot;line 2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//================</span></span><br><span class=\"line\">\t<span class=\"comment\">//方法1</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span> ch;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (f.<span class=\"built_in\">get</span>(ch))<span class=\"comment\">//获取字符</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; ch;<span class=\"comment\">//打印字符</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//方法2</span></span><br><span class=\"line\">\tf.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;ff.txt&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((ch = f.<span class=\"built_in\">get</span>()) != EOF)<span class=\"comment\">//因为优先级的问题，必须加括号</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; ch;<span class=\"comment\">//打印字符</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>以上就是C++文件操作的大部分常用内容了。挖一挖确实也不少内容了,值得总结。</p>\n"},{"title":"从构建一个Date类入门C++类与对象","date":"2023-12-06T23:42:59.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Date.jpg","_content":"# 类的定义 #\n```C++\nclass Date\n{\npublic:\n    void Init(int year = 1,int month = 1,int day = 1)\n    {\n        _year = year;\n        _month = month;\n        _day = day;\n    }\n\n    void Print()\n    {\n        cout << _year << \":\" << _month << \":\" << _day << endl;\n    }\nprivate:\n    int _year;\n    int _month;\n    int _day;\n};\n```\n## 抽象数据类型(类) #\n通过如上代码，我们就在源代码中通过`class`声明了一个抽象数据类型`Date`,简称`类`，那么封装一个类有什么好处呢？\n好处是类把相关的操作分为**两类**:\n\n- 类的**设计者**:负责考虑类的具体实现，提供类的接口，成员变量等\n- 类的**使用者**:只关心类**提供**了哪些功能，而不关心具体实现，从而简化思路\n  \n以上面的`Date`类为例\n>对设计者\n- 要考虑实现`Date`,就需要声明**成员变量**`_year` `_month` `_day`,以及声明及实现**成员函数**`Init`和`Print`\n  \n>对使用者\n- 只需知道可以调用`Date`的**成员函数**`Init`和`Print`,以及知道它们的用处即可\n\n## 实例化 -- 将类真正投入使用 ##\n类也可以用于声明变量，例如`Date d`就声明了一个变量`d`,但由于是由`类`声明的,我们将这一过程称为`实例化`,其中`Date`这样的抽象数据类型称为`类`，像`d`这样的变量称为`对象`\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-04-16_11-19-21.png)\n\n实例化后的对象拥有**私有**的`成员变量`和整个类**公有**的`成员函数`,接下来对`对象`的操作都是对`成员变量`和`成员函数`的操作\n\n## 访问成员函数/变量\n\n### 在`类的内部`\n对于类的成员函数，除了显式声明的`函数参数`外,还有**隐式**传入的`this`指针，这是个**默认`非const`修饰**的,指向调用该成员函数的**对象的指针**,编译器可以通过这个指针访问该对象的`成员变量`和`成员函数`。\n\n\n而我们作为类的**设计者**，既然语法都**隐式**地传入`this`指针了，自然也可以**隐式**地调用`成员`,即**直接写**变量名/函数名调用\n\n*当然，手动显式调用this指针也是可以的*\n\n>以`Date`为例\n```C++\n//该函数声明在Date类中，成员变量见文章开头\nvoid TestPrint()\n{\n    _year = 2024;//隐式调用this访问成员变量\n    this->_month = 4;//显式调用this\n    _day = 1;\n    Print();//隐式调用this来调用成员函数Print()\n    this->Print();//显式调用this，效果与上一句相同\n}\n```\n但由于`const`修饰的`对象`传出的是`const`修饰的`this`指针，普通的`this`形参无法接收。\n那么如何让`成员函数`传入`const`修饰的`this`指针,来使`const`修饰的`对象`有成员函数可调用呢？\n\n语法规定，在函数的参数列表(*圆括号后面*)紧跟一个`const`可使函数传入`const`修饰的`this`指针\n\n*这种函数称为常量成员函数*\n\n>*举个例子*\n```C++\n//示例代码\n//该函数声明在类中\nvoid constPrint() const\n{\n    //....\n}\n```\n\n### 在`类的外部`\n和C语言的结构体一样，访问对象内的成员有两种方式\n\n- *对象名* + `.` + 成员名 ： 用`.`操作符访问对应成员\n- *对象的指针* + `->` + 成员名 : 用`->`操作符访问指针**指向对象**的对应成员\n\n>以`Date`实例化一个`d`为例\n\n```C++\n// class Date\n// {\n//     ....\n// };\n\nvoid test1()\n{\n    Date d;\n    Date* pd = &d;\n    d.Init(2024,4,1);// . 操作符调用Init成员函数来初始化对象\n    pd->Print();//->操作符调用Print成员函数来打印内容\n}\n\nvoid test2()\n{\n    Date d;\n    d._year = 2024;//试图访问成员变量_year,但是访问权限冲突\n}\n```\n```C++\n//test1输出\n2024:4:1\n//test2输出\n报错，无输出，因为访问权限冲突\n```\n\n代码如上，`test1`运行的很好，但`test2`报错了，原因在于`test2`作为**非成员函数**访问了访问限定符`private`控制的成员`_year`,权限冲突，就会报错。\n\n由此，C++类和对象还有一个重要概念需要强调--**访问控制**\n\n## 访问权限控制与封装 ##\n使用类和对象编程的一大优点就是类可以`封装`代码，让使用者只能使用公有的接口和成员变量，而对内部的具体实现不可见，来提高类的`易用性`和`安全性`\n\n所以C++语法提供了三种`访问说明符`(*access specifiers*)\n\n- public: 该说明符之后的成员在整个程序内可被访问\n- private: 之后的成员仅可被该类的的类域里（*如成员函数*）访问\n- protected: 一般同`private`,主要特点体现在类的继承，这里**不作讨论**\n\n### 作用范围 #\n\n某一`访问说明符`的作用范围开始于它的`冒号`,终止于下一个`访问说明符`或`类的结尾`,而`类的开始`到第一个`访问说明符`前的访问权限取决于**声明**类的`关键字`,分类如下\n\n- `class`默认为`private`权限\n- `struct`默认为`public`权限\n\n> 图例如下\n> \n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-04-18_14-15-40.png)\n\n\n实际上`class`和`struct`除了默认权限不一样，基本**没有差别**。\n\n所以为了防止误读，**提高可读性**,**不建议**在`默认区`写代码,而是保证每段语句前都有合适的`访问限定符`\n\n### 封装 #\n作为类的设计者，一个类按`访问权限`可以分为两个区\n\n- `public`: 将提供给`使用者`的`接口（函数）`和`成员变量`声明在此，用于外部调用接口和修改非私有的成员函数\n- `private`: 用于存放**受保护**的`成员变量`和`成员函数`,防止外部使用者*意外*或*恶意*调用或修改,造成类的内部结构被破坏等**安全问题**,所以特别重要的成员变量，和不希望被外部调用的函数声明在这里\n\n>例如在声明`Date`类时，我们将`Init`和`Print`接口提供给使用者，用`public`控制；`_year`等成员变量不希望被外部随意修改，就用`private`控制\n\n\n# 进阶 #\n学完以上内容，不过是会写个高级点的`结构体`而已，要写一个完整的类，还需要学习更多的语法知识\n\n## 构造函数 #\n像本篇的`Date`类那样显式地调用`Init`函数来初始化是非常挫的，既然语言本身的`内置类型`可以在声明的时候初始化，那么类的设计者设计出来的类也应当提供`初始化的接口`,而支持这一功能的接口便是`构造函数`\n\n按语法规定，`构造函数`的函数名必须是`类名`,**没有返回值**，`const`修饰的成员变量必须位于`初始化列表`,其它则可省略。*关于初始化列表，稍后详细解释*\n\n>以`Date`类为例\n```C++\nclass Date\n{\npublic:\n    //一个普通的构造函数\n    Date(int year,int month,int day)\n    {\n        //进入括号时成员变量已经声明，且未初始化\n        _year = year;//这是一个赋值操作，而不是初始化\n        _month = month;\n        _day = day;\n    }\n\nprivate:\n    int _year;\n    int _month;\n    int _day;\n}\n\nint main()\n{\n    Date d(2024,4,1);//使用构造函数声明了一个d对象\n    return 0;\n}\n\n```\n\n以上的构造函数基本能用了,但还有两个问题\n\n- 构造函数没有初始化成员变量，而是采用赋值操作,无法初始化`const`修饰的成员变量\n- 使用`Date d`是会报错的，因为没有提供`默认构造函数`\n\n对于**第一个问题**，就要引入`初始化列表`这一概念，让初始化函数直接拥有`初始化成员变量`的功能\n\n初始化列表位于构造函数的参数列表之后，花括号之前，以`:`开头，用`,`分隔成员变量\n\n>以`Date`为例\n```C++\nDate(int year,int month,int day):_year(year) , _month(month) , _day(day) {}\n//或者换个书写格式（二者完全等价）\nDate(int year,int month,int day):_year(year) \n, _month(month) \n, _day(day) \n{}\n```\n通过这样`初始化列表`,便能在声明对象时，**直接**初始化成员变量\n\n对于**问题二**，我们开启另一个个小专题\n\n### 构造函数的重载和缺省参数 #\n没错，构造函数和函数一样，也是能`重载`和给参数传`缺省值`的\n\n*也就是说我们能写好几个构造函数*\n\n下面特别说明几个**特殊**的构造函数\n\n#### 默认构造函数 #\n原则上对于每一个类，都应该提供**有且仅有一个**默认构造函数（*多个`默认构造函数`会报错!*）\n\n而要**声明**默认构造函数，只需声明`无参数`构造函数，或者`全缺省参数`构造函数即可\n\n>以`Date`为例\n```C++\nDate():_year(2024),_month(4),_day(1){}\n//====分割线=======\n//或者全缺省，两个函数不能同时声明\nDate(int year = 2024,int month = 4,int day = 1): _year(year),_month(month),_day(day){}\n\n```\n\n以上就是两种默认构造函数的声明形式\n\n#### 拷贝构造函数 #\n有时候我们会希望用**现有的**的对象去初始化一个**新**对象,此时对应的构造函数就称为`拷贝构造（函数）`\n\n`拷贝构造`的声明方式为`构造函数`+参数类型为`类本身的引用传参`,不加`&`的话就会死递归报错,有无`const`皆可，但由于是实现`拷贝功能`，一般是加`const`的\n\n>以`Date`为例\n```C++\nDate(const Date& d):_year(d._year),_month(d._month),_day(d._day){}\n\n//使用示例\nDate d(2024,4,1);\nDate copy1(d);//调用方式一\nDate copy2 = d;//调用方式二,此时不会调用operator=()\n\ncopy1 = copy2;//这种并不会调用拷贝构造,而是调用operator=()\n\n```\n\n#### 使用模板的类的函数缺省值 #\n有时我们在使用类模板来设计类时，需要给`模版类`类型的形参提供一个缺省值，有些人可能会写个`0`,但是其实是**错的**，正确的做法是传一个`临时变量`\n\n但此时要求`模板参数中的类`有可用的`默认构造函数`和`拷贝构造`用于调用\n\n>以链表节点`Node`为例\n```C++\ntemplate<class value_type>\nstruct Node\n{\n    value_type _val;\n    Node<value_type>* _next;\n\n    Node(const value_type& val = value_type()):_val(val),_next(nullptr){}\n}\n\n//以用本文的Date实例化为例\nNode<Date> node;\n//通过输出会发现node中的val已经调用了默认构造函数\nnode.val.TestPrint();\n```\n\n## 析构函数 #\n对于声明在`栈区`或`静态区`的成员函数，程序完全可以自动销毁，\n但如果`成员变量`有指向在`堆区`声明的某段`内存块`,在该如果只是仍由程序自动\n销毁这个指针，那么那段`内存块`就会一直处于**未释放**的状态，也就是造成内存泄漏，\n也就是说此时编译器自动生成的`析构函数`已经不能满足需求,编译器并不知道如何处理声明在`堆区`上的数据,\n这部分操作应由类的设计者来规划\n\n所以我们应当**显式**地声明一个合理的`析构函数`\n\n`析构函数`的函数名也是由语法规定的，为`~`+`类名`,并且**不能**声明形参\n\n>以一个`指针类`为例\n```C++\nclass Ptr\n{\npublic:\n    Ptr()//构造函数\n    { \n        _ptr = new int(1); \n    }\n\n    ~Ptr()//析构函数\n    {\n        delete _ptr;//手动delte堆区上的数据\n        _ptr = nullptr;\n    }\n\nprivate:\n    int* _ptr;\n}\n```\n\n## 类的重载操作符 #\nC++语法提供了重载操作符的函数，而由于`this`指针的存在，在类的`内部声明`重载操作符函数会稍有不同\n\n-对于一元操作符，`[]`,`->`之类的重载，不再需要`显式传参`\n-对于二元操作符，`+`,`>`之类只需要传`右操作数`\n\n>以`Date`类为例\n```C++\n//在类的内部,重构一个 ==\npublic:\n    bool operator==(const Date& date) const\n    {\n        return _year == date._year\n            && _month == date._month\n            && _day == date._day;\n    }\n```\n\n# 小结\n至此，C++类和对象已基本入门，再进阶的`迭代器`,`继承`,`虚继承`等将单独出博客。\n\n\n","source":"_posts/cpp-class.md","raw":"---\ntitle: 从构建一个Date类入门C++类与对象\ndate: 2023-12-07 07:42:59\ntags: C++ 类和对象\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Date.jpg\n---\n# 类的定义 #\n```C++\nclass Date\n{\npublic:\n    void Init(int year = 1,int month = 1,int day = 1)\n    {\n        _year = year;\n        _month = month;\n        _day = day;\n    }\n\n    void Print()\n    {\n        cout << _year << \":\" << _month << \":\" << _day << endl;\n    }\nprivate:\n    int _year;\n    int _month;\n    int _day;\n};\n```\n## 抽象数据类型(类) #\n通过如上代码，我们就在源代码中通过`class`声明了一个抽象数据类型`Date`,简称`类`，那么封装一个类有什么好处呢？\n好处是类把相关的操作分为**两类**:\n\n- 类的**设计者**:负责考虑类的具体实现，提供类的接口，成员变量等\n- 类的**使用者**:只关心类**提供**了哪些功能，而不关心具体实现，从而简化思路\n  \n以上面的`Date`类为例\n>对设计者\n- 要考虑实现`Date`,就需要声明**成员变量**`_year` `_month` `_day`,以及声明及实现**成员函数**`Init`和`Print`\n  \n>对使用者\n- 只需知道可以调用`Date`的**成员函数**`Init`和`Print`,以及知道它们的用处即可\n\n## 实例化 -- 将类真正投入使用 ##\n类也可以用于声明变量，例如`Date d`就声明了一个变量`d`,但由于是由`类`声明的,我们将这一过程称为`实例化`,其中`Date`这样的抽象数据类型称为`类`，像`d`这样的变量称为`对象`\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-04-16_11-19-21.png)\n\n实例化后的对象拥有**私有**的`成员变量`和整个类**公有**的`成员函数`,接下来对`对象`的操作都是对`成员变量`和`成员函数`的操作\n\n## 访问成员函数/变量\n\n### 在`类的内部`\n对于类的成员函数，除了显式声明的`函数参数`外,还有**隐式**传入的`this`指针，这是个**默认`非const`修饰**的,指向调用该成员函数的**对象的指针**,编译器可以通过这个指针访问该对象的`成员变量`和`成员函数`。\n\n\n而我们作为类的**设计者**，既然语法都**隐式**地传入`this`指针了，自然也可以**隐式**地调用`成员`,即**直接写**变量名/函数名调用\n\n*当然，手动显式调用this指针也是可以的*\n\n>以`Date`为例\n```C++\n//该函数声明在Date类中，成员变量见文章开头\nvoid TestPrint()\n{\n    _year = 2024;//隐式调用this访问成员变量\n    this->_month = 4;//显式调用this\n    _day = 1;\n    Print();//隐式调用this来调用成员函数Print()\n    this->Print();//显式调用this，效果与上一句相同\n}\n```\n但由于`const`修饰的`对象`传出的是`const`修饰的`this`指针，普通的`this`形参无法接收。\n那么如何让`成员函数`传入`const`修饰的`this`指针,来使`const`修饰的`对象`有成员函数可调用呢？\n\n语法规定，在函数的参数列表(*圆括号后面*)紧跟一个`const`可使函数传入`const`修饰的`this`指针\n\n*这种函数称为常量成员函数*\n\n>*举个例子*\n```C++\n//示例代码\n//该函数声明在类中\nvoid constPrint() const\n{\n    //....\n}\n```\n\n### 在`类的外部`\n和C语言的结构体一样，访问对象内的成员有两种方式\n\n- *对象名* + `.` + 成员名 ： 用`.`操作符访问对应成员\n- *对象的指针* + `->` + 成员名 : 用`->`操作符访问指针**指向对象**的对应成员\n\n>以`Date`实例化一个`d`为例\n\n```C++\n// class Date\n// {\n//     ....\n// };\n\nvoid test1()\n{\n    Date d;\n    Date* pd = &d;\n    d.Init(2024,4,1);// . 操作符调用Init成员函数来初始化对象\n    pd->Print();//->操作符调用Print成员函数来打印内容\n}\n\nvoid test2()\n{\n    Date d;\n    d._year = 2024;//试图访问成员变量_year,但是访问权限冲突\n}\n```\n```C++\n//test1输出\n2024:4:1\n//test2输出\n报错，无输出，因为访问权限冲突\n```\n\n代码如上，`test1`运行的很好，但`test2`报错了，原因在于`test2`作为**非成员函数**访问了访问限定符`private`控制的成员`_year`,权限冲突，就会报错。\n\n由此，C++类和对象还有一个重要概念需要强调--**访问控制**\n\n## 访问权限控制与封装 ##\n使用类和对象编程的一大优点就是类可以`封装`代码，让使用者只能使用公有的接口和成员变量，而对内部的具体实现不可见，来提高类的`易用性`和`安全性`\n\n所以C++语法提供了三种`访问说明符`(*access specifiers*)\n\n- public: 该说明符之后的成员在整个程序内可被访问\n- private: 之后的成员仅可被该类的的类域里（*如成员函数*）访问\n- protected: 一般同`private`,主要特点体现在类的继承，这里**不作讨论**\n\n### 作用范围 #\n\n某一`访问说明符`的作用范围开始于它的`冒号`,终止于下一个`访问说明符`或`类的结尾`,而`类的开始`到第一个`访问说明符`前的访问权限取决于**声明**类的`关键字`,分类如下\n\n- `class`默认为`private`权限\n- `struct`默认为`public`权限\n\n> 图例如下\n> \n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-04-18_14-15-40.png)\n\n\n实际上`class`和`struct`除了默认权限不一样，基本**没有差别**。\n\n所以为了防止误读，**提高可读性**,**不建议**在`默认区`写代码,而是保证每段语句前都有合适的`访问限定符`\n\n### 封装 #\n作为类的设计者，一个类按`访问权限`可以分为两个区\n\n- `public`: 将提供给`使用者`的`接口（函数）`和`成员变量`声明在此，用于外部调用接口和修改非私有的成员函数\n- `private`: 用于存放**受保护**的`成员变量`和`成员函数`,防止外部使用者*意外*或*恶意*调用或修改,造成类的内部结构被破坏等**安全问题**,所以特别重要的成员变量，和不希望被外部调用的函数声明在这里\n\n>例如在声明`Date`类时，我们将`Init`和`Print`接口提供给使用者，用`public`控制；`_year`等成员变量不希望被外部随意修改，就用`private`控制\n\n\n# 进阶 #\n学完以上内容，不过是会写个高级点的`结构体`而已，要写一个完整的类，还需要学习更多的语法知识\n\n## 构造函数 #\n像本篇的`Date`类那样显式地调用`Init`函数来初始化是非常挫的，既然语言本身的`内置类型`可以在声明的时候初始化，那么类的设计者设计出来的类也应当提供`初始化的接口`,而支持这一功能的接口便是`构造函数`\n\n按语法规定，`构造函数`的函数名必须是`类名`,**没有返回值**，`const`修饰的成员变量必须位于`初始化列表`,其它则可省略。*关于初始化列表，稍后详细解释*\n\n>以`Date`类为例\n```C++\nclass Date\n{\npublic:\n    //一个普通的构造函数\n    Date(int year,int month,int day)\n    {\n        //进入括号时成员变量已经声明，且未初始化\n        _year = year;//这是一个赋值操作，而不是初始化\n        _month = month;\n        _day = day;\n    }\n\nprivate:\n    int _year;\n    int _month;\n    int _day;\n}\n\nint main()\n{\n    Date d(2024,4,1);//使用构造函数声明了一个d对象\n    return 0;\n}\n\n```\n\n以上的构造函数基本能用了,但还有两个问题\n\n- 构造函数没有初始化成员变量，而是采用赋值操作,无法初始化`const`修饰的成员变量\n- 使用`Date d`是会报错的，因为没有提供`默认构造函数`\n\n对于**第一个问题**，就要引入`初始化列表`这一概念，让初始化函数直接拥有`初始化成员变量`的功能\n\n初始化列表位于构造函数的参数列表之后，花括号之前，以`:`开头，用`,`分隔成员变量\n\n>以`Date`为例\n```C++\nDate(int year,int month,int day):_year(year) , _month(month) , _day(day) {}\n//或者换个书写格式（二者完全等价）\nDate(int year,int month,int day):_year(year) \n, _month(month) \n, _day(day) \n{}\n```\n通过这样`初始化列表`,便能在声明对象时，**直接**初始化成员变量\n\n对于**问题二**，我们开启另一个个小专题\n\n### 构造函数的重载和缺省参数 #\n没错，构造函数和函数一样，也是能`重载`和给参数传`缺省值`的\n\n*也就是说我们能写好几个构造函数*\n\n下面特别说明几个**特殊**的构造函数\n\n#### 默认构造函数 #\n原则上对于每一个类，都应该提供**有且仅有一个**默认构造函数（*多个`默认构造函数`会报错!*）\n\n而要**声明**默认构造函数，只需声明`无参数`构造函数，或者`全缺省参数`构造函数即可\n\n>以`Date`为例\n```C++\nDate():_year(2024),_month(4),_day(1){}\n//====分割线=======\n//或者全缺省，两个函数不能同时声明\nDate(int year = 2024,int month = 4,int day = 1): _year(year),_month(month),_day(day){}\n\n```\n\n以上就是两种默认构造函数的声明形式\n\n#### 拷贝构造函数 #\n有时候我们会希望用**现有的**的对象去初始化一个**新**对象,此时对应的构造函数就称为`拷贝构造（函数）`\n\n`拷贝构造`的声明方式为`构造函数`+参数类型为`类本身的引用传参`,不加`&`的话就会死递归报错,有无`const`皆可，但由于是实现`拷贝功能`，一般是加`const`的\n\n>以`Date`为例\n```C++\nDate(const Date& d):_year(d._year),_month(d._month),_day(d._day){}\n\n//使用示例\nDate d(2024,4,1);\nDate copy1(d);//调用方式一\nDate copy2 = d;//调用方式二,此时不会调用operator=()\n\ncopy1 = copy2;//这种并不会调用拷贝构造,而是调用operator=()\n\n```\n\n#### 使用模板的类的函数缺省值 #\n有时我们在使用类模板来设计类时，需要给`模版类`类型的形参提供一个缺省值，有些人可能会写个`0`,但是其实是**错的**，正确的做法是传一个`临时变量`\n\n但此时要求`模板参数中的类`有可用的`默认构造函数`和`拷贝构造`用于调用\n\n>以链表节点`Node`为例\n```C++\ntemplate<class value_type>\nstruct Node\n{\n    value_type _val;\n    Node<value_type>* _next;\n\n    Node(const value_type& val = value_type()):_val(val),_next(nullptr){}\n}\n\n//以用本文的Date实例化为例\nNode<Date> node;\n//通过输出会发现node中的val已经调用了默认构造函数\nnode.val.TestPrint();\n```\n\n## 析构函数 #\n对于声明在`栈区`或`静态区`的成员函数，程序完全可以自动销毁，\n但如果`成员变量`有指向在`堆区`声明的某段`内存块`,在该如果只是仍由程序自动\n销毁这个指针，那么那段`内存块`就会一直处于**未释放**的状态，也就是造成内存泄漏，\n也就是说此时编译器自动生成的`析构函数`已经不能满足需求,编译器并不知道如何处理声明在`堆区`上的数据,\n这部分操作应由类的设计者来规划\n\n所以我们应当**显式**地声明一个合理的`析构函数`\n\n`析构函数`的函数名也是由语法规定的，为`~`+`类名`,并且**不能**声明形参\n\n>以一个`指针类`为例\n```C++\nclass Ptr\n{\npublic:\n    Ptr()//构造函数\n    { \n        _ptr = new int(1); \n    }\n\n    ~Ptr()//析构函数\n    {\n        delete _ptr;//手动delte堆区上的数据\n        _ptr = nullptr;\n    }\n\nprivate:\n    int* _ptr;\n}\n```\n\n## 类的重载操作符 #\nC++语法提供了重载操作符的函数，而由于`this`指针的存在，在类的`内部声明`重载操作符函数会稍有不同\n\n-对于一元操作符，`[]`,`->`之类的重载，不再需要`显式传参`\n-对于二元操作符，`+`,`>`之类只需要传`右操作数`\n\n>以`Date`类为例\n```C++\n//在类的内部,重构一个 ==\npublic:\n    bool operator==(const Date& date) const\n    {\n        return _year == date._year\n            && _month == date._month\n            && _day == date._day;\n    }\n```\n\n# 小结\n至此，C++类和对象已基本入门，再进阶的`迭代器`,`继承`,`虚继承`等将单独出博客。\n\n\n","slug":"cpp-class","published":1,"updated":"2024-05-14T02:20:47.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv5000ev8p58qbobun9","content":"<h1 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Date</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Init</span><span class=\"params\">(<span class=\"type\">int</span> year = <span class=\"number\">1</span>,<span class=\"type\">int</span> month = <span class=\"number\">1</span>,<span class=\"type\">int</span> day = <span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _year = year;</span><br><span class=\"line\">        _month = month;</span><br><span class=\"line\">        _day = day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; _year &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; _month &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; _day &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> _year;</span><br><span class=\"line\">    <span class=\"type\">int</span> _month;</span><br><span class=\"line\">    <span class=\"type\">int</span> _day;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"抽象数据类型-类\"><a href=\"#抽象数据类型-类\" class=\"headerlink\" title=\"抽象数据类型(类)\"></a>抽象数据类型(类)</h2><p>通过如上代码，我们就在源代码中通过<code>class</code>声明了一个抽象数据类型<code>Date</code>,简称<code>类</code>，那么封装一个类有什么好处呢？<br>好处是类把相关的操作分为<strong>两类</strong>:</p>\n<ul>\n<li>类的<strong>设计者</strong>:负责考虑类的具体实现，提供类的接口，成员变量等</li>\n<li>类的<strong>使用者</strong>:只关心类<strong>提供</strong>了哪些功能，而不关心具体实现，从而简化思路</li>\n</ul>\n<p>以上面的<code>Date</code>类为例</p>\n<blockquote>\n<p>对设计者</p>\n</blockquote>\n<ul>\n<li>要考虑实现<code>Date</code>,就需要声明<strong>成员变量</strong><code>_year</code> <code>_month</code> <code>_day</code>,以及声明及实现<strong>成员函数</strong><code>Init</code>和<code>Print</code></li>\n</ul>\n<blockquote>\n<p>对使用者</p>\n</blockquote>\n<ul>\n<li>只需知道可以调用<code>Date</code>的<strong>成员函数</strong><code>Init</code>和<code>Print</code>,以及知道它们的用处即可</li>\n</ul>\n<h2 id=\"实例化-–-将类真正投入使用\"><a href=\"#实例化-–-将类真正投入使用\" class=\"headerlink\" title=\"实例化 – 将类真正投入使用\"></a>实例化 – 将类真正投入使用</h2><p>类也可以用于声明变量，例如<code>Date d</code>就声明了一个变量<code>d</code>,但由于是由<code>类</code>声明的,我们将这一过程称为<code>实例化</code>,其中<code>Date</code>这样的抽象数据类型称为<code>类</code>，像<code>d</code>这样的变量称为<code>对象</code></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-04-16_11-19-21.png\"></p>\n<p>实例化后的对象拥有<strong>私有</strong>的<code>成员变量</code>和整个类<strong>公有</strong>的<code>成员函数</code>,接下来对<code>对象</code>的操作都是对<code>成员变量</code>和<code>成员函数</code>的操作</p>\n<h2 id=\"访问成员函数-变量\"><a href=\"#访问成员函数-变量\" class=\"headerlink\" title=\"访问成员函数&#x2F;变量\"></a>访问成员函数&#x2F;变量</h2><h3 id=\"在类的内部\"><a href=\"#在类的内部\" class=\"headerlink\" title=\"在类的内部\"></a>在<code>类的内部</code></h3><p>对于类的成员函数，除了显式声明的<code>函数参数</code>外,还有<strong>隐式</strong>传入的<code>this</code>指针，这是个<strong>默认<code>非const</code>修饰</strong>的,指向调用该成员函数的<strong>对象的指针</strong>,编译器可以通过这个指针访问该对象的<code>成员变量</code>和<code>成员函数</code>。</p>\n<p>而我们作为类的<strong>设计者</strong>，既然语法都<strong>隐式</strong>地传入<code>this</code>指针了，自然也可以<strong>隐式</strong>地调用<code>成员</code>,即<strong>直接写</strong>变量名&#x2F;函数名调用</p>\n<p><em>当然，手动显式调用this指针也是可以的</em></p>\n<blockquote>\n<p>以<code>Date</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该函数声明在Date类中，成员变量见文章开头</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TestPrint</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _year = <span class=\"number\">2024</span>;<span class=\"comment\">//隐式调用this访问成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;_month = <span class=\"number\">4</span>;<span class=\"comment\">//显式调用this</span></span><br><span class=\"line\">    _day = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Print</span>();<span class=\"comment\">//隐式调用this来调用成员函数Print()</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">Print</span>();<span class=\"comment\">//显式调用this，效果与上一句相同</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但由于<code>const</code>修饰的<code>对象</code>传出的是<code>const</code>修饰的<code>this</code>指针，普通的<code>this</code>形参无法接收。<br>那么如何让<code>成员函数</code>传入<code>const</code>修饰的<code>this</code>指针,来使<code>const</code>修饰的<code>对象</code>有成员函数可调用呢？</p>\n<p>语法规定，在函数的参数列表(<em>圆括号后面</em>)紧跟一个<code>const</code>可使函数传入<code>const</code>修饰的<code>this</code>指针</p>\n<p><em>这种函数称为常量成员函数</em></p>\n<blockquote>\n<p><em>举个例子</em></p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例代码</span></span><br><span class=\"line\"><span class=\"comment\">//该函数声明在类中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">constPrint</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在类的外部\"><a href=\"#在类的外部\" class=\"headerlink\" title=\"在类的外部\"></a>在<code>类的外部</code></h3><p>和C语言的结构体一样，访问对象内的成员有两种方式</p>\n<ul>\n<li><em>对象名</em> + <code>.</code> + 成员名 ： 用<code>.</code>操作符访问对应成员</li>\n<li><em>对象的指针</em> + <code>-&gt;</code> + 成员名 : 用<code>-&gt;</code>操作符访问指针<strong>指向对象</strong>的对应成员</li>\n</ul>\n<blockquote>\n<p>以<code>Date</code>实例化一个<code>d</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class Date</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     ....</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Date d;</span><br><span class=\"line\">    Date* pd = &amp;d;</span><br><span class=\"line\">    d.<span class=\"built_in\">Init</span>(<span class=\"number\">2024</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>);<span class=\"comment\">// . 操作符调用Init成员函数来初始化对象</span></span><br><span class=\"line\">    pd-&gt;<span class=\"built_in\">Print</span>();<span class=\"comment\">//-&gt;操作符调用Print成员函数来打印内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Date d;</span><br><span class=\"line\">    d._year = <span class=\"number\">2024</span>;<span class=\"comment\">//试图访问成员变量_year,但是访问权限冲突</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test1输出</span></span><br><span class=\"line\"><span class=\"number\">2024</span>:<span class=\"number\">4</span>:<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">//test2输出</span></span><br><span class=\"line\">报错，无输出，因为访问权限冲突</span><br></pre></td></tr></table></figure>\n\n<p>代码如上，<code>test1</code>运行的很好，但<code>test2</code>报错了，原因在于<code>test2</code>作为<strong>非成员函数</strong>访问了访问限定符<code>private</code>控制的成员<code>_year</code>,权限冲突，就会报错。</p>\n<p>由此，C++类和对象还有一个重要概念需要强调–<strong>访问控制</strong></p>\n<h2 id=\"访问权限控制与封装\"><a href=\"#访问权限控制与封装\" class=\"headerlink\" title=\"访问权限控制与封装\"></a>访问权限控制与封装</h2><p>使用类和对象编程的一大优点就是类可以<code>封装</code>代码，让使用者只能使用公有的接口和成员变量，而对内部的具体实现不可见，来提高类的<code>易用性</code>和<code>安全性</code></p>\n<p>所以C++语法提供了三种<code>访问说明符</code>(<em>access specifiers</em>)</p>\n<ul>\n<li>public: 该说明符之后的成员在整个程序内可被访问</li>\n<li>private: 之后的成员仅可被该类的的类域里（<em>如成员函数</em>）访问</li>\n<li>protected: 一般同<code>private</code>,主要特点体现在类的继承，这里<strong>不作讨论</strong></li>\n</ul>\n<h3 id=\"作用范围\"><a href=\"#作用范围\" class=\"headerlink\" title=\"作用范围\"></a>作用范围</h3><p>某一<code>访问说明符</code>的作用范围开始于它的<code>冒号</code>,终止于下一个<code>访问说明符</code>或<code>类的结尾</code>,而<code>类的开始</code>到第一个<code>访问说明符</code>前的访问权限取决于<strong>声明</strong>类的<code>关键字</code>,分类如下</p>\n<ul>\n<li><code>class</code>默认为<code>private</code>权限</li>\n<li><code>struct</code>默认为<code>public</code>权限</li>\n</ul>\n<blockquote>\n<p>图例如下</p>\n</blockquote>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-04-18_14-15-40.png\"></p>\n<p>实际上<code>class</code>和<code>struct</code>除了默认权限不一样，基本<strong>没有差别</strong>。</p>\n<p>所以为了防止误读，<strong>提高可读性</strong>,<strong>不建议</strong>在<code>默认区</code>写代码,而是保证每段语句前都有合适的<code>访问限定符</code></p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>作为类的设计者，一个类按<code>访问权限</code>可以分为两个区</p>\n<ul>\n<li><code>public</code>: 将提供给<code>使用者</code>的<code>接口（函数）</code>和<code>成员变量</code>声明在此，用于外部调用接口和修改非私有的成员函数</li>\n<li><code>private</code>: 用于存放<strong>受保护</strong>的<code>成员变量</code>和<code>成员函数</code>,防止外部使用者<em>意外</em>或<em>恶意</em>调用或修改,造成类的内部结构被破坏等<strong>安全问题</strong>,所以特别重要的成员变量，和不希望被外部调用的函数声明在这里</li>\n</ul>\n<blockquote>\n<p>例如在声明<code>Date</code>类时，我们将<code>Init</code>和<code>Print</code>接口提供给使用者，用<code>public</code>控制；<code>_year</code>等成员变量不希望被外部随意修改，就用<code>private</code>控制</p>\n</blockquote>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><p>学完以上内容，不过是会写个高级点的<code>结构体</code>而已，要写一个完整的类，还需要学习更多的语法知识</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>像本篇的<code>Date</code>类那样显式地调用<code>Init</code>函数来初始化是非常挫的，既然语言本身的<code>内置类型</code>可以在声明的时候初始化，那么类的设计者设计出来的类也应当提供<code>初始化的接口</code>,而支持这一功能的接口便是<code>构造函数</code></p>\n<p>按语法规定，<code>构造函数</code>的函数名必须是<code>类名</code>,<strong>没有返回值</strong>，<code>const</code>修饰的成员变量必须位于<code>初始化列表</code>,其它则可省略。<em>关于初始化列表，稍后详细解释</em></p>\n<blockquote>\n<p>以<code>Date</code>类为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Date</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//一个普通的构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">Date</span>(<span class=\"type\">int</span> year,<span class=\"type\">int</span> month,<span class=\"type\">int</span> day)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//进入括号时成员变量已经声明，且未初始化</span></span><br><span class=\"line\">        _year = year;<span class=\"comment\">//这是一个赋值操作，而不是初始化</span></span><br><span class=\"line\">        _month = month;</span><br><span class=\"line\">        _day = day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> _year;</span><br><span class=\"line\">    <span class=\"type\">int</span> _month;</span><br><span class=\"line\">    <span class=\"type\">int</span> _day;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Date <span class=\"title\">d</span><span class=\"params\">(<span class=\"number\">2024</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span></span>;<span class=\"comment\">//使用构造函数声明了一个d对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以上的构造函数基本能用了,但还有两个问题</p>\n<ul>\n<li>构造函数没有初始化成员变量，而是采用赋值操作,无法初始化<code>const</code>修饰的成员变量</li>\n<li>使用<code>Date d</code>是会报错的，因为没有提供<code>默认构造函数</code></li>\n</ul>\n<p>对于<strong>第一个问题</strong>，就要引入<code>初始化列表</code>这一概念，让初始化函数直接拥有<code>初始化成员变量</code>的功能</p>\n<p>初始化列表位于构造函数的参数列表之后，花括号之前，以<code>:</code>开头，用<code>,</code>分隔成员变量</p>\n<blockquote>\n<p>以<code>Date</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>(<span class=\"type\">int</span> year,<span class=\"type\">int</span> month,<span class=\"type\">int</span> day):_year(year) , _month(month) , _day(day) &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//或者换个书写格式（二者完全等价）</span></span><br><span class=\"line\"><span class=\"built_in\">Date</span>(<span class=\"type\">int</span> year,<span class=\"type\">int</span> month,<span class=\"type\">int</span> day):_year(year) </span><br><span class=\"line\">, _month(month) </span><br><span class=\"line\">, _day(day) </span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>通过这样<code>初始化列表</code>,便能在声明对象时，<strong>直接</strong>初始化成员变量</p>\n<p>对于<strong>问题二</strong>，我们开启另一个个小专题</p>\n<h3 id=\"构造函数的重载和缺省参数\"><a href=\"#构造函数的重载和缺省参数\" class=\"headerlink\" title=\"构造函数的重载和缺省参数\"></a>构造函数的重载和缺省参数</h3><p>没错，构造函数和函数一样，也是能<code>重载</code>和给参数传<code>缺省值</code>的</p>\n<p><em>也就是说我们能写好几个构造函数</em></p>\n<p>下面特别说明几个<strong>特殊</strong>的构造函数</p>\n<h4 id=\"默认构造函数\"><a href=\"#默认构造函数\" class=\"headerlink\" title=\"默认构造函数\"></a>默认构造函数</h4><p>原则上对于每一个类，都应该提供<strong>有且仅有一个</strong>默认构造函数（*多个<code>默认构造函数</code>会报错!*）</p>\n<p>而要<strong>声明</strong>默认构造函数，只需声明<code>无参数</code>构造函数，或者<code>全缺省参数</code>构造函数即可</p>\n<blockquote>\n<p>以<code>Date</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>():_year(<span class=\"number\">2024</span>),_month(<span class=\"number\">4</span>),_day(<span class=\"number\">1</span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//====分割线=======</span></span><br><span class=\"line\"><span class=\"comment\">//或者全缺省，两个函数不能同时声明</span></span><br><span class=\"line\"><span class=\"built_in\">Date</span>(<span class=\"type\">int</span> year = <span class=\"number\">2024</span>,<span class=\"type\">int</span> month = <span class=\"number\">4</span>,<span class=\"type\">int</span> day = <span class=\"number\">1</span>): _year(year),_month(month),_day(day)&#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以上就是两种默认构造函数的声明形式</p>\n<h4 id=\"拷贝构造函数\"><a href=\"#拷贝构造函数\" class=\"headerlink\" title=\"拷贝构造函数\"></a>拷贝构造函数</h4><p>有时候我们会希望用<strong>现有的</strong>的对象去初始化一个<strong>新</strong>对象,此时对应的构造函数就称为<code>拷贝构造（函数）</code></p>\n<p><code>拷贝构造</code>的声明方式为<code>构造函数</code>+参数类型为<code>类本身的引用传参</code>,不加<code>&amp;</code>的话就会死递归报错,有无<code>const</code>皆可，但由于是实现<code>拷贝功能</code>，一般是加<code>const</code>的</p>\n<blockquote>\n<p>以<code>Date</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>(<span class=\"type\">const</span> Date&amp; d):_year(d._year),_month(d._month),_day(d._day)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用示例</span></span><br><span class=\"line\"><span class=\"function\">Date <span class=\"title\">d</span><span class=\"params\">(<span class=\"number\">2024</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Date <span class=\"title\">copy1</span><span class=\"params\">(d)</span></span>;<span class=\"comment\">//调用方式一</span></span><br><span class=\"line\">Date copy2 = d;<span class=\"comment\">//调用方式二,此时不会调用operator=()</span></span><br><span class=\"line\"></span><br><span class=\"line\">copy1 = copy2;<span class=\"comment\">//这种并不会调用拷贝构造,而是调用operator=()</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用模板的类的函数缺省值\"><a href=\"#使用模板的类的函数缺省值\" class=\"headerlink\" title=\"使用模板的类的函数缺省值\"></a>使用模板的类的函数缺省值</h4><p>有时我们在使用类模板来设计类时，需要给<code>模版类</code>类型的形参提供一个缺省值，有些人可能会写个<code>0</code>,但是其实是<strong>错的</strong>，正确的做法是传一个<code>临时变量</code></p>\n<p>但此时要求<code>模板参数中的类</code>有可用的<code>默认构造函数</code>和<code>拷贝构造</code>用于调用</p>\n<blockquote>\n<p>以链表节点<code>Node</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">value_type</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    value_type _val;</span><br><span class=\"line\">    Node&lt;value_type&gt;* _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">const</span> value_type&amp; val = <span class=\"built_in\">value_type</span>()):_val(val),_next(<span class=\"literal\">nullptr</span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以用本文的Date实例化为例</span></span><br><span class=\"line\">Node&lt;Date&gt; node;</span><br><span class=\"line\"><span class=\"comment\">//通过输出会发现node中的val已经调用了默认构造函数</span></span><br><span class=\"line\">node.val.<span class=\"built_in\">TestPrint</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h2><p>对于声明在<code>栈区</code>或<code>静态区</code>的成员函数，程序完全可以自动销毁，<br>但如果<code>成员变量</code>有指向在<code>堆区</code>声明的某段<code>内存块</code>,在该如果只是仍由程序自动<br>销毁这个指针，那么那段<code>内存块</code>就会一直处于<strong>未释放</strong>的状态，也就是造成内存泄漏，<br>也就是说此时编译器自动生成的<code>析构函数</code>已经不能满足需求,编译器并不知道如何处理声明在<code>堆区</code>上的数据,<br>这部分操作应由类的设计者来规划</p>\n<p>所以我们应当<strong>显式</strong>地声明一个合理的<code>析构函数</code></p>\n<p><code>析构函数</code>的函数名也是由语法规定的，为<code>~</code>+<code>类名</code>,并且<strong>不能</strong>声明形参</p>\n<blockquote>\n<p>以一个<code>指针类</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ptr</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Ptr</span>()<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        _ptr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">1</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Ptr</span>()<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> _ptr;<span class=\"comment\">//手动delte堆区上的数据</span></span><br><span class=\"line\">        _ptr = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span>* _ptr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的重载操作符\"><a href=\"#类的重载操作符\" class=\"headerlink\" title=\"类的重载操作符\"></a>类的重载操作符</h2><p>C++语法提供了重载操作符的函数，而由于<code>this</code>指针的存在，在类的<code>内部声明</code>重载操作符函数会稍有不同</p>\n<p>-对于一元操作符，<code>[]</code>,<code>-&gt;</code>之类的重载，不再需要<code>显式传参</code><br>-对于二元操作符，<code>+</code>,<code>&gt;</code>之类只需要传<code>右操作数</code></p>\n<blockquote>\n<p>以<code>Date</code>类为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在类的内部,重构一个 ==</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> Date&amp; date) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _year == date._year</span><br><span class=\"line\">            &amp;&amp; _month == date._month</span><br><span class=\"line\">            &amp;&amp; _day == date._day;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>至此，C++类和对象已基本入门，再进阶的<code>迭代器</code>,<code>继承</code>,<code>虚继承</code>等将单独出博客。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Date</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Init</span><span class=\"params\">(<span class=\"type\">int</span> year = <span class=\"number\">1</span>,<span class=\"type\">int</span> month = <span class=\"number\">1</span>,<span class=\"type\">int</span> day = <span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _year = year;</span><br><span class=\"line\">        _month = month;</span><br><span class=\"line\">        _day = day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; _year &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; _month &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; _day &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> _year;</span><br><span class=\"line\">    <span class=\"type\">int</span> _month;</span><br><span class=\"line\">    <span class=\"type\">int</span> _day;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"抽象数据类型-类\"><a href=\"#抽象数据类型-类\" class=\"headerlink\" title=\"抽象数据类型(类)\"></a>抽象数据类型(类)</h2><p>通过如上代码，我们就在源代码中通过<code>class</code>声明了一个抽象数据类型<code>Date</code>,简称<code>类</code>，那么封装一个类有什么好处呢？<br>好处是类把相关的操作分为<strong>两类</strong>:</p>\n<ul>\n<li>类的<strong>设计者</strong>:负责考虑类的具体实现，提供类的接口，成员变量等</li>\n<li>类的<strong>使用者</strong>:只关心类<strong>提供</strong>了哪些功能，而不关心具体实现，从而简化思路</li>\n</ul>\n<p>以上面的<code>Date</code>类为例</p>\n<blockquote>\n<p>对设计者</p>\n</blockquote>\n<ul>\n<li>要考虑实现<code>Date</code>,就需要声明<strong>成员变量</strong><code>_year</code> <code>_month</code> <code>_day</code>,以及声明及实现<strong>成员函数</strong><code>Init</code>和<code>Print</code></li>\n</ul>\n<blockquote>\n<p>对使用者</p>\n</blockquote>\n<ul>\n<li>只需知道可以调用<code>Date</code>的<strong>成员函数</strong><code>Init</code>和<code>Print</code>,以及知道它们的用处即可</li>\n</ul>\n<h2 id=\"实例化-–-将类真正投入使用\"><a href=\"#实例化-–-将类真正投入使用\" class=\"headerlink\" title=\"实例化 – 将类真正投入使用\"></a>实例化 – 将类真正投入使用</h2><p>类也可以用于声明变量，例如<code>Date d</code>就声明了一个变量<code>d</code>,但由于是由<code>类</code>声明的,我们将这一过程称为<code>实例化</code>,其中<code>Date</code>这样的抽象数据类型称为<code>类</code>，像<code>d</code>这样的变量称为<code>对象</code></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-04-16_11-19-21.png\"></p>\n<p>实例化后的对象拥有<strong>私有</strong>的<code>成员变量</code>和整个类<strong>公有</strong>的<code>成员函数</code>,接下来对<code>对象</code>的操作都是对<code>成员变量</code>和<code>成员函数</code>的操作</p>\n<h2 id=\"访问成员函数-变量\"><a href=\"#访问成员函数-变量\" class=\"headerlink\" title=\"访问成员函数&#x2F;变量\"></a>访问成员函数&#x2F;变量</h2><h3 id=\"在类的内部\"><a href=\"#在类的内部\" class=\"headerlink\" title=\"在类的内部\"></a>在<code>类的内部</code></h3><p>对于类的成员函数，除了显式声明的<code>函数参数</code>外,还有<strong>隐式</strong>传入的<code>this</code>指针，这是个<strong>默认<code>非const</code>修饰</strong>的,指向调用该成员函数的<strong>对象的指针</strong>,编译器可以通过这个指针访问该对象的<code>成员变量</code>和<code>成员函数</code>。</p>\n<p>而我们作为类的<strong>设计者</strong>，既然语法都<strong>隐式</strong>地传入<code>this</code>指针了，自然也可以<strong>隐式</strong>地调用<code>成员</code>,即<strong>直接写</strong>变量名&#x2F;函数名调用</p>\n<p><em>当然，手动显式调用this指针也是可以的</em></p>\n<blockquote>\n<p>以<code>Date</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该函数声明在Date类中，成员变量见文章开头</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TestPrint</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _year = <span class=\"number\">2024</span>;<span class=\"comment\">//隐式调用this访问成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;_month = <span class=\"number\">4</span>;<span class=\"comment\">//显式调用this</span></span><br><span class=\"line\">    _day = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Print</span>();<span class=\"comment\">//隐式调用this来调用成员函数Print()</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">Print</span>();<span class=\"comment\">//显式调用this，效果与上一句相同</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但由于<code>const</code>修饰的<code>对象</code>传出的是<code>const</code>修饰的<code>this</code>指针，普通的<code>this</code>形参无法接收。<br>那么如何让<code>成员函数</code>传入<code>const</code>修饰的<code>this</code>指针,来使<code>const</code>修饰的<code>对象</code>有成员函数可调用呢？</p>\n<p>语法规定，在函数的参数列表(<em>圆括号后面</em>)紧跟一个<code>const</code>可使函数传入<code>const</code>修饰的<code>this</code>指针</p>\n<p><em>这种函数称为常量成员函数</em></p>\n<blockquote>\n<p><em>举个例子</em></p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例代码</span></span><br><span class=\"line\"><span class=\"comment\">//该函数声明在类中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">constPrint</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在类的外部\"><a href=\"#在类的外部\" class=\"headerlink\" title=\"在类的外部\"></a>在<code>类的外部</code></h3><p>和C语言的结构体一样，访问对象内的成员有两种方式</p>\n<ul>\n<li><em>对象名</em> + <code>.</code> + 成员名 ： 用<code>.</code>操作符访问对应成员</li>\n<li><em>对象的指针</em> + <code>-&gt;</code> + 成员名 : 用<code>-&gt;</code>操作符访问指针<strong>指向对象</strong>的对应成员</li>\n</ul>\n<blockquote>\n<p>以<code>Date</code>实例化一个<code>d</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class Date</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     ....</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Date d;</span><br><span class=\"line\">    Date* pd = &amp;d;</span><br><span class=\"line\">    d.<span class=\"built_in\">Init</span>(<span class=\"number\">2024</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>);<span class=\"comment\">// . 操作符调用Init成员函数来初始化对象</span></span><br><span class=\"line\">    pd-&gt;<span class=\"built_in\">Print</span>();<span class=\"comment\">//-&gt;操作符调用Print成员函数来打印内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Date d;</span><br><span class=\"line\">    d._year = <span class=\"number\">2024</span>;<span class=\"comment\">//试图访问成员变量_year,但是访问权限冲突</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test1输出</span></span><br><span class=\"line\"><span class=\"number\">2024</span>:<span class=\"number\">4</span>:<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">//test2输出</span></span><br><span class=\"line\">报错，无输出，因为访问权限冲突</span><br></pre></td></tr></table></figure>\n\n<p>代码如上，<code>test1</code>运行的很好，但<code>test2</code>报错了，原因在于<code>test2</code>作为<strong>非成员函数</strong>访问了访问限定符<code>private</code>控制的成员<code>_year</code>,权限冲突，就会报错。</p>\n<p>由此，C++类和对象还有一个重要概念需要强调–<strong>访问控制</strong></p>\n<h2 id=\"访问权限控制与封装\"><a href=\"#访问权限控制与封装\" class=\"headerlink\" title=\"访问权限控制与封装\"></a>访问权限控制与封装</h2><p>使用类和对象编程的一大优点就是类可以<code>封装</code>代码，让使用者只能使用公有的接口和成员变量，而对内部的具体实现不可见，来提高类的<code>易用性</code>和<code>安全性</code></p>\n<p>所以C++语法提供了三种<code>访问说明符</code>(<em>access specifiers</em>)</p>\n<ul>\n<li>public: 该说明符之后的成员在整个程序内可被访问</li>\n<li>private: 之后的成员仅可被该类的的类域里（<em>如成员函数</em>）访问</li>\n<li>protected: 一般同<code>private</code>,主要特点体现在类的继承，这里<strong>不作讨论</strong></li>\n</ul>\n<h3 id=\"作用范围\"><a href=\"#作用范围\" class=\"headerlink\" title=\"作用范围\"></a>作用范围</h3><p>某一<code>访问说明符</code>的作用范围开始于它的<code>冒号</code>,终止于下一个<code>访问说明符</code>或<code>类的结尾</code>,而<code>类的开始</code>到第一个<code>访问说明符</code>前的访问权限取决于<strong>声明</strong>类的<code>关键字</code>,分类如下</p>\n<ul>\n<li><code>class</code>默认为<code>private</code>权限</li>\n<li><code>struct</code>默认为<code>public</code>权限</li>\n</ul>\n<blockquote>\n<p>图例如下</p>\n</blockquote>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-04-18_14-15-40.png\"></p>\n<p>实际上<code>class</code>和<code>struct</code>除了默认权限不一样，基本<strong>没有差别</strong>。</p>\n<p>所以为了防止误读，<strong>提高可读性</strong>,<strong>不建议</strong>在<code>默认区</code>写代码,而是保证每段语句前都有合适的<code>访问限定符</code></p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>作为类的设计者，一个类按<code>访问权限</code>可以分为两个区</p>\n<ul>\n<li><code>public</code>: 将提供给<code>使用者</code>的<code>接口（函数）</code>和<code>成员变量</code>声明在此，用于外部调用接口和修改非私有的成员函数</li>\n<li><code>private</code>: 用于存放<strong>受保护</strong>的<code>成员变量</code>和<code>成员函数</code>,防止外部使用者<em>意外</em>或<em>恶意</em>调用或修改,造成类的内部结构被破坏等<strong>安全问题</strong>,所以特别重要的成员变量，和不希望被外部调用的函数声明在这里</li>\n</ul>\n<blockquote>\n<p>例如在声明<code>Date</code>类时，我们将<code>Init</code>和<code>Print</code>接口提供给使用者，用<code>public</code>控制；<code>_year</code>等成员变量不希望被外部随意修改，就用<code>private</code>控制</p>\n</blockquote>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><p>学完以上内容，不过是会写个高级点的<code>结构体</code>而已，要写一个完整的类，还需要学习更多的语法知识</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>像本篇的<code>Date</code>类那样显式地调用<code>Init</code>函数来初始化是非常挫的，既然语言本身的<code>内置类型</code>可以在声明的时候初始化，那么类的设计者设计出来的类也应当提供<code>初始化的接口</code>,而支持这一功能的接口便是<code>构造函数</code></p>\n<p>按语法规定，<code>构造函数</code>的函数名必须是<code>类名</code>,<strong>没有返回值</strong>，<code>const</code>修饰的成员变量必须位于<code>初始化列表</code>,其它则可省略。<em>关于初始化列表，稍后详细解释</em></p>\n<blockquote>\n<p>以<code>Date</code>类为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Date</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//一个普通的构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">Date</span>(<span class=\"type\">int</span> year,<span class=\"type\">int</span> month,<span class=\"type\">int</span> day)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//进入括号时成员变量已经声明，且未初始化</span></span><br><span class=\"line\">        _year = year;<span class=\"comment\">//这是一个赋值操作，而不是初始化</span></span><br><span class=\"line\">        _month = month;</span><br><span class=\"line\">        _day = day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> _year;</span><br><span class=\"line\">    <span class=\"type\">int</span> _month;</span><br><span class=\"line\">    <span class=\"type\">int</span> _day;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Date <span class=\"title\">d</span><span class=\"params\">(<span class=\"number\">2024</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span></span>;<span class=\"comment\">//使用构造函数声明了一个d对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以上的构造函数基本能用了,但还有两个问题</p>\n<ul>\n<li>构造函数没有初始化成员变量，而是采用赋值操作,无法初始化<code>const</code>修饰的成员变量</li>\n<li>使用<code>Date d</code>是会报错的，因为没有提供<code>默认构造函数</code></li>\n</ul>\n<p>对于<strong>第一个问题</strong>，就要引入<code>初始化列表</code>这一概念，让初始化函数直接拥有<code>初始化成员变量</code>的功能</p>\n<p>初始化列表位于构造函数的参数列表之后，花括号之前，以<code>:</code>开头，用<code>,</code>分隔成员变量</p>\n<blockquote>\n<p>以<code>Date</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>(<span class=\"type\">int</span> year,<span class=\"type\">int</span> month,<span class=\"type\">int</span> day):_year(year) , _month(month) , _day(day) &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//或者换个书写格式（二者完全等价）</span></span><br><span class=\"line\"><span class=\"built_in\">Date</span>(<span class=\"type\">int</span> year,<span class=\"type\">int</span> month,<span class=\"type\">int</span> day):_year(year) </span><br><span class=\"line\">, _month(month) </span><br><span class=\"line\">, _day(day) </span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>通过这样<code>初始化列表</code>,便能在声明对象时，<strong>直接</strong>初始化成员变量</p>\n<p>对于<strong>问题二</strong>，我们开启另一个个小专题</p>\n<h3 id=\"构造函数的重载和缺省参数\"><a href=\"#构造函数的重载和缺省参数\" class=\"headerlink\" title=\"构造函数的重载和缺省参数\"></a>构造函数的重载和缺省参数</h3><p>没错，构造函数和函数一样，也是能<code>重载</code>和给参数传<code>缺省值</code>的</p>\n<p><em>也就是说我们能写好几个构造函数</em></p>\n<p>下面特别说明几个<strong>特殊</strong>的构造函数</p>\n<h4 id=\"默认构造函数\"><a href=\"#默认构造函数\" class=\"headerlink\" title=\"默认构造函数\"></a>默认构造函数</h4><p>原则上对于每一个类，都应该提供<strong>有且仅有一个</strong>默认构造函数（*多个<code>默认构造函数</code>会报错!*）</p>\n<p>而要<strong>声明</strong>默认构造函数，只需声明<code>无参数</code>构造函数，或者<code>全缺省参数</code>构造函数即可</p>\n<blockquote>\n<p>以<code>Date</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>():_year(<span class=\"number\">2024</span>),_month(<span class=\"number\">4</span>),_day(<span class=\"number\">1</span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//====分割线=======</span></span><br><span class=\"line\"><span class=\"comment\">//或者全缺省，两个函数不能同时声明</span></span><br><span class=\"line\"><span class=\"built_in\">Date</span>(<span class=\"type\">int</span> year = <span class=\"number\">2024</span>,<span class=\"type\">int</span> month = <span class=\"number\">4</span>,<span class=\"type\">int</span> day = <span class=\"number\">1</span>): _year(year),_month(month),_day(day)&#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以上就是两种默认构造函数的声明形式</p>\n<h4 id=\"拷贝构造函数\"><a href=\"#拷贝构造函数\" class=\"headerlink\" title=\"拷贝构造函数\"></a>拷贝构造函数</h4><p>有时候我们会希望用<strong>现有的</strong>的对象去初始化一个<strong>新</strong>对象,此时对应的构造函数就称为<code>拷贝构造（函数）</code></p>\n<p><code>拷贝构造</code>的声明方式为<code>构造函数</code>+参数类型为<code>类本身的引用传参</code>,不加<code>&amp;</code>的话就会死递归报错,有无<code>const</code>皆可，但由于是实现<code>拷贝功能</code>，一般是加<code>const</code>的</p>\n<blockquote>\n<p>以<code>Date</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>(<span class=\"type\">const</span> Date&amp; d):_year(d._year),_month(d._month),_day(d._day)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用示例</span></span><br><span class=\"line\"><span class=\"function\">Date <span class=\"title\">d</span><span class=\"params\">(<span class=\"number\">2024</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Date <span class=\"title\">copy1</span><span class=\"params\">(d)</span></span>;<span class=\"comment\">//调用方式一</span></span><br><span class=\"line\">Date copy2 = d;<span class=\"comment\">//调用方式二,此时不会调用operator=()</span></span><br><span class=\"line\"></span><br><span class=\"line\">copy1 = copy2;<span class=\"comment\">//这种并不会调用拷贝构造,而是调用operator=()</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用模板的类的函数缺省值\"><a href=\"#使用模板的类的函数缺省值\" class=\"headerlink\" title=\"使用模板的类的函数缺省值\"></a>使用模板的类的函数缺省值</h4><p>有时我们在使用类模板来设计类时，需要给<code>模版类</code>类型的形参提供一个缺省值，有些人可能会写个<code>0</code>,但是其实是<strong>错的</strong>，正确的做法是传一个<code>临时变量</code></p>\n<p>但此时要求<code>模板参数中的类</code>有可用的<code>默认构造函数</code>和<code>拷贝构造</code>用于调用</p>\n<blockquote>\n<p>以链表节点<code>Node</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">value_type</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    value_type _val;</span><br><span class=\"line\">    Node&lt;value_type&gt;* _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">const</span> value_type&amp; val = <span class=\"built_in\">value_type</span>()):_val(val),_next(<span class=\"literal\">nullptr</span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以用本文的Date实例化为例</span></span><br><span class=\"line\">Node&lt;Date&gt; node;</span><br><span class=\"line\"><span class=\"comment\">//通过输出会发现node中的val已经调用了默认构造函数</span></span><br><span class=\"line\">node.val.<span class=\"built_in\">TestPrint</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h2><p>对于声明在<code>栈区</code>或<code>静态区</code>的成员函数，程序完全可以自动销毁，<br>但如果<code>成员变量</code>有指向在<code>堆区</code>声明的某段<code>内存块</code>,在该如果只是仍由程序自动<br>销毁这个指针，那么那段<code>内存块</code>就会一直处于<strong>未释放</strong>的状态，也就是造成内存泄漏，<br>也就是说此时编译器自动生成的<code>析构函数</code>已经不能满足需求,编译器并不知道如何处理声明在<code>堆区</code>上的数据,<br>这部分操作应由类的设计者来规划</p>\n<p>所以我们应当<strong>显式</strong>地声明一个合理的<code>析构函数</code></p>\n<p><code>析构函数</code>的函数名也是由语法规定的，为<code>~</code>+<code>类名</code>,并且<strong>不能</strong>声明形参</p>\n<blockquote>\n<p>以一个<code>指针类</code>为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ptr</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Ptr</span>()<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        _ptr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">1</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">Ptr</span>()<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> _ptr;<span class=\"comment\">//手动delte堆区上的数据</span></span><br><span class=\"line\">        _ptr = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span>* _ptr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的重载操作符\"><a href=\"#类的重载操作符\" class=\"headerlink\" title=\"类的重载操作符\"></a>类的重载操作符</h2><p>C++语法提供了重载操作符的函数，而由于<code>this</code>指针的存在，在类的<code>内部声明</code>重载操作符函数会稍有不同</p>\n<p>-对于一元操作符，<code>[]</code>,<code>-&gt;</code>之类的重载，不再需要<code>显式传参</code><br>-对于二元操作符，<code>+</code>,<code>&gt;</code>之类只需要传<code>右操作数</code></p>\n<blockquote>\n<p>以<code>Date</code>类为例</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在类的内部,重构一个 ==</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> Date&amp; date) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _year == date._year</span><br><span class=\"line\">            &amp;&amp; _month == date._month</span><br><span class=\"line\">            &amp;&amp; _day == date._day;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>至此，C++类和对象已基本入门，再进阶的<code>迭代器</code>,<code>继承</code>,<code>虚继承</code>等将单独出博客。</p>\n"},{"title":"=C++= sizeof关键字详解","date":"2024-07-10T07:30:19.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-11_16-05-28.png","_content":"## 简介\n`sizeof`作为C/C++关键字,基本用法是求`字节大小`，但仅仅这一项用法在细节上就有很多说法了\n\n## 求内置类型变量的大小\n有两种写法，以`int a = 0`的变量`a`为例\n\n+ `sizeof a`\n+ `sizeof(a)`\n\n都可以求变量`a`的大小，但**注意**，该变量的大小仅与`变量类型`有关，而与值无关\n\n## 求内置类型的大小\n求类型大小时必须**加上括号**\n\n例如`sizeof(int)`\n\n## 求数组的大小\n+ 当数组声明在`全局`或`sizeof`处于数组声明语句的`局部作用范围`时,能够用`sizeof(<数组名>)`求数组大小\n+ 当数组名经过**函数传参**或`加减常量运算`后，退化为`指针变量`,类型大小在`32位机器`中为`4`,`64位机器`中为`8`\n\n```C\n#include <iostream>\n\nusing namespace std;\n\nint g_arr[10] = { 0 };\n\nvoid func(int st_arr[])\n{\n\tcout << sizeof(st_arr) << endl;//此处退化为指针变量，输出4或8\n}\n\nint main()\n{\n\tint arr[10] = { 0 };\n\tcout << sizeof(g_arr) << endl;//输出40\n\tcout << sizeof(arr) << endl; //输出40\n\tfunc(arr);//输出4/8\n\treturn 0;\n}\n```\n\n## 求类/对象的大小\n\n### 一般情况的内存对齐\n为了访问效率问题，类的大小遵循`内存对齐`规则，计算理论大小时需考虑`成员变量的大小`和`内存对齐`,而不考虑普通成员函数,这里不详细讨论\n\n## 含有虚函数\nC++的编译器一旦发现一个类型中**有虚函数**，就会为该类型生成`虚函数表`，每一个实例化出的`对象`都含有一个`指向虚函数表的指针`。所以`sizeof`求出来的值还要考虑`该指针`以及`内存对齐`等因素\n\n### 没有成员变量的特殊情况\n\n#### 没有成员函数\n这样的类型可以称为`空类型`,因为这样的类型实例化后不含任何信息,本来求`sizeof`应该是`O`，但考虑实际使用时，我们需将类**实例化**为对象，它必须在内存中占有一定的空间，否则无法使用或管理这些实例。至于分配内存，由编译器决定。但出于节省不必要的内存占用原则，理应分配最小内存单元，即`1字节`。正好在`VisualStudio`中，每个空类型的实例占用`1字节`的空间。\n\n```C++\nclass A\n{\n    //空类型\n};\nsizeof(A);//visual studio 中值为1\n```\n\n#### 只有普通的成员函数\n和上一条一样也是`1字节`。因为考虑实例化时，调用这些普通成员函数只需知道`函数地址`即可，而这些函数地址只与用户自定义的`类`有关，而与实例化出来的`对象`无关，所以不会在`对象`中存储相关信息，不会改变其大小。\n\n#### 含有虚函数\n实例化出的`对象`含有了指向虚函数的`指针`,所以`sizeof`求出来的大小为一个`指针`的大小，`32位机器`求得`4`字节,`64位机器`求得`8`字节","source":"_posts/cppsizeof.md","raw":"---\ntitle: =C++= sizeof关键字详解\ndate: 2024-07-10 15:30:19\ntags:\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-11_16-05-28.png\n---\n## 简介\n`sizeof`作为C/C++关键字,基本用法是求`字节大小`，但仅仅这一项用法在细节上就有很多说法了\n\n## 求内置类型变量的大小\n有两种写法，以`int a = 0`的变量`a`为例\n\n+ `sizeof a`\n+ `sizeof(a)`\n\n都可以求变量`a`的大小，但**注意**，该变量的大小仅与`变量类型`有关，而与值无关\n\n## 求内置类型的大小\n求类型大小时必须**加上括号**\n\n例如`sizeof(int)`\n\n## 求数组的大小\n+ 当数组声明在`全局`或`sizeof`处于数组声明语句的`局部作用范围`时,能够用`sizeof(<数组名>)`求数组大小\n+ 当数组名经过**函数传参**或`加减常量运算`后，退化为`指针变量`,类型大小在`32位机器`中为`4`,`64位机器`中为`8`\n\n```C\n#include <iostream>\n\nusing namespace std;\n\nint g_arr[10] = { 0 };\n\nvoid func(int st_arr[])\n{\n\tcout << sizeof(st_arr) << endl;//此处退化为指针变量，输出4或8\n}\n\nint main()\n{\n\tint arr[10] = { 0 };\n\tcout << sizeof(g_arr) << endl;//输出40\n\tcout << sizeof(arr) << endl; //输出40\n\tfunc(arr);//输出4/8\n\treturn 0;\n}\n```\n\n## 求类/对象的大小\n\n### 一般情况的内存对齐\n为了访问效率问题，类的大小遵循`内存对齐`规则，计算理论大小时需考虑`成员变量的大小`和`内存对齐`,而不考虑普通成员函数,这里不详细讨论\n\n## 含有虚函数\nC++的编译器一旦发现一个类型中**有虚函数**，就会为该类型生成`虚函数表`，每一个实例化出的`对象`都含有一个`指向虚函数表的指针`。所以`sizeof`求出来的值还要考虑`该指针`以及`内存对齐`等因素\n\n### 没有成员变量的特殊情况\n\n#### 没有成员函数\n这样的类型可以称为`空类型`,因为这样的类型实例化后不含任何信息,本来求`sizeof`应该是`O`，但考虑实际使用时，我们需将类**实例化**为对象，它必须在内存中占有一定的空间，否则无法使用或管理这些实例。至于分配内存，由编译器决定。但出于节省不必要的内存占用原则，理应分配最小内存单元，即`1字节`。正好在`VisualStudio`中，每个空类型的实例占用`1字节`的空间。\n\n```C++\nclass A\n{\n    //空类型\n};\nsizeof(A);//visual studio 中值为1\n```\n\n#### 只有普通的成员函数\n和上一条一样也是`1字节`。因为考虑实例化时，调用这些普通成员函数只需知道`函数地址`即可，而这些函数地址只与用户自定义的`类`有关，而与实例化出来的`对象`无关，所以不会在`对象`中存储相关信息，不会改变其大小。\n\n#### 含有虚函数\n实例化出的`对象`含有了指向虚函数的`指针`,所以`sizeof`求出来的大小为一个`指针`的大小，`32位机器`求得`4`字节,`64位机器`求得`8`字节","slug":"cppsizeof","published":1,"updated":"2024-07-11T08:06:02.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv6000gv8p5h63ndswf","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>sizeof</code>作为C&#x2F;C++关键字,基本用法是求<code>字节大小</code>，但仅仅这一项用法在细节上就有很多说法了</p>\n<h2 id=\"求内置类型变量的大小\"><a href=\"#求内置类型变量的大小\" class=\"headerlink\" title=\"求内置类型变量的大小\"></a>求内置类型变量的大小</h2><p>有两种写法，以<code>int a = 0</code>的变量<code>a</code>为例</p>\n<ul>\n<li><code>sizeof a</code></li>\n<li><code>sizeof(a)</code></li>\n</ul>\n<p>都可以求变量<code>a</code>的大小，但<strong>注意</strong>，该变量的大小仅与<code>变量类型</code>有关，而与值无关</p>\n<h2 id=\"求内置类型的大小\"><a href=\"#求内置类型的大小\" class=\"headerlink\" title=\"求内置类型的大小\"></a>求内置类型的大小</h2><p>求类型大小时必须<strong>加上括号</strong></p>\n<p>例如<code>sizeof(int)</code></p>\n<h2 id=\"求数组的大小\"><a href=\"#求数组的大小\" class=\"headerlink\" title=\"求数组的大小\"></a>求数组的大小</h2><ul>\n<li>当数组声明在<code>全局</code>或<code>sizeof</code>处于数组声明语句的<code>局部作用范围</code>时,能够用<code>sizeof(&lt;数组名&gt;)</code>求数组大小</li>\n<li>当数组名经过<strong>函数传参</strong>或<code>加减常量运算</code>后，退化为<code>指针变量</code>,类型大小在<code>32位机器</code>中为<code>4</code>,<code>64位机器</code>中为<code>8</code></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g_arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> st_arr[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(st_arr) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">//此处退化为指针变量，输出4或8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(g_arr) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">//输出40</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(arr) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">//输出40</span></span><br><span class=\"line\">\tfunc(arr);<span class=\"comment\">//输出4/8</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求类-对象的大小\"><a href=\"#求类-对象的大小\" class=\"headerlink\" title=\"求类&#x2F;对象的大小\"></a>求类&#x2F;对象的大小</h2><h3 id=\"一般情况的内存对齐\"><a href=\"#一般情况的内存对齐\" class=\"headerlink\" title=\"一般情况的内存对齐\"></a>一般情况的内存对齐</h3><p>为了访问效率问题，类的大小遵循<code>内存对齐</code>规则，计算理论大小时需考虑<code>成员变量的大小</code>和<code>内存对齐</code>,而不考虑普通成员函数,这里不详细讨论</p>\n<h2 id=\"含有虚函数\"><a href=\"#含有虚函数\" class=\"headerlink\" title=\"含有虚函数\"></a>含有虚函数</h2><p>C++的编译器一旦发现一个类型中<strong>有虚函数</strong>，就会为该类型生成<code>虚函数表</code>，每一个实例化出的<code>对象</code>都含有一个<code>指向虚函数表的指针</code>。所以<code>sizeof</code>求出来的值还要考虑<code>该指针</code>以及<code>内存对齐</code>等因素</p>\n<h3 id=\"没有成员变量的特殊情况\"><a href=\"#没有成员变量的特殊情况\" class=\"headerlink\" title=\"没有成员变量的特殊情况\"></a>没有成员变量的特殊情况</h3><h4 id=\"没有成员函数\"><a href=\"#没有成员函数\" class=\"headerlink\" title=\"没有成员函数\"></a>没有成员函数</h4><p>这样的类型可以称为<code>空类型</code>,因为这样的类型实例化后不含任何信息,本来求<code>sizeof</code>应该是<code>O</code>，但考虑实际使用时，我们需将类<strong>实例化</strong>为对象，它必须在内存中占有一定的空间，否则无法使用或管理这些实例。至于分配内存，由编译器决定。但出于节省不必要的内存占用原则，理应分配最小内存单元，即<code>1字节</code>。正好在<code>VisualStudio</code>中，每个空类型的实例占用<code>1字节</code>的空间。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//空类型</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">sizeof</span>(A);<span class=\"comment\">//visual studio 中值为1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"只有普通的成员函数\"><a href=\"#只有普通的成员函数\" class=\"headerlink\" title=\"只有普通的成员函数\"></a>只有普通的成员函数</h4><p>和上一条一样也是<code>1字节</code>。因为考虑实例化时，调用这些普通成员函数只需知道<code>函数地址</code>即可，而这些函数地址只与用户自定义的<code>类</code>有关，而与实例化出来的<code>对象</code>无关，所以不会在<code>对象</code>中存储相关信息，不会改变其大小。</p>\n<h4 id=\"含有虚函数-1\"><a href=\"#含有虚函数-1\" class=\"headerlink\" title=\"含有虚函数\"></a>含有虚函数</h4><p>实例化出的<code>对象</code>含有了指向虚函数的<code>指针</code>,所以<code>sizeof</code>求出来的大小为一个<code>指针</code>的大小，<code>32位机器</code>求得<code>4</code>字节,<code>64位机器</code>求得<code>8</code>字节</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>sizeof</code>作为C&#x2F;C++关键字,基本用法是求<code>字节大小</code>，但仅仅这一项用法在细节上就有很多说法了</p>\n<h2 id=\"求内置类型变量的大小\"><a href=\"#求内置类型变量的大小\" class=\"headerlink\" title=\"求内置类型变量的大小\"></a>求内置类型变量的大小</h2><p>有两种写法，以<code>int a = 0</code>的变量<code>a</code>为例</p>\n<ul>\n<li><code>sizeof a</code></li>\n<li><code>sizeof(a)</code></li>\n</ul>\n<p>都可以求变量<code>a</code>的大小，但<strong>注意</strong>，该变量的大小仅与<code>变量类型</code>有关，而与值无关</p>\n<h2 id=\"求内置类型的大小\"><a href=\"#求内置类型的大小\" class=\"headerlink\" title=\"求内置类型的大小\"></a>求内置类型的大小</h2><p>求类型大小时必须<strong>加上括号</strong></p>\n<p>例如<code>sizeof(int)</code></p>\n<h2 id=\"求数组的大小\"><a href=\"#求数组的大小\" class=\"headerlink\" title=\"求数组的大小\"></a>求数组的大小</h2><ul>\n<li>当数组声明在<code>全局</code>或<code>sizeof</code>处于数组声明语句的<code>局部作用范围</code>时,能够用<code>sizeof(&lt;数组名&gt;)</code>求数组大小</li>\n<li>当数组名经过<strong>函数传参</strong>或<code>加减常量运算</code>后，退化为<code>指针变量</code>,类型大小在<code>32位机器</code>中为<code>4</code>,<code>64位机器</code>中为<code>8</code></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g_arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> st_arr[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(st_arr) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">//此处退化为指针变量，输出4或8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(g_arr) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">//输出40</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(arr) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">//输出40</span></span><br><span class=\"line\">\tfunc(arr);<span class=\"comment\">//输出4/8</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求类-对象的大小\"><a href=\"#求类-对象的大小\" class=\"headerlink\" title=\"求类&#x2F;对象的大小\"></a>求类&#x2F;对象的大小</h2><h3 id=\"一般情况的内存对齐\"><a href=\"#一般情况的内存对齐\" class=\"headerlink\" title=\"一般情况的内存对齐\"></a>一般情况的内存对齐</h3><p>为了访问效率问题，类的大小遵循<code>内存对齐</code>规则，计算理论大小时需考虑<code>成员变量的大小</code>和<code>内存对齐</code>,而不考虑普通成员函数,这里不详细讨论</p>\n<h2 id=\"含有虚函数\"><a href=\"#含有虚函数\" class=\"headerlink\" title=\"含有虚函数\"></a>含有虚函数</h2><p>C++的编译器一旦发现一个类型中<strong>有虚函数</strong>，就会为该类型生成<code>虚函数表</code>，每一个实例化出的<code>对象</code>都含有一个<code>指向虚函数表的指针</code>。所以<code>sizeof</code>求出来的值还要考虑<code>该指针</code>以及<code>内存对齐</code>等因素</p>\n<h3 id=\"没有成员变量的特殊情况\"><a href=\"#没有成员变量的特殊情况\" class=\"headerlink\" title=\"没有成员变量的特殊情况\"></a>没有成员变量的特殊情况</h3><h4 id=\"没有成员函数\"><a href=\"#没有成员函数\" class=\"headerlink\" title=\"没有成员函数\"></a>没有成员函数</h4><p>这样的类型可以称为<code>空类型</code>,因为这样的类型实例化后不含任何信息,本来求<code>sizeof</code>应该是<code>O</code>，但考虑实际使用时，我们需将类<strong>实例化</strong>为对象，它必须在内存中占有一定的空间，否则无法使用或管理这些实例。至于分配内存，由编译器决定。但出于节省不必要的内存占用原则，理应分配最小内存单元，即<code>1字节</code>。正好在<code>VisualStudio</code>中，每个空类型的实例占用<code>1字节</code>的空间。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//空类型</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">sizeof</span>(A);<span class=\"comment\">//visual studio 中值为1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"只有普通的成员函数\"><a href=\"#只有普通的成员函数\" class=\"headerlink\" title=\"只有普通的成员函数\"></a>只有普通的成员函数</h4><p>和上一条一样也是<code>1字节</code>。因为考虑实例化时，调用这些普通成员函数只需知道<code>函数地址</code>即可，而这些函数地址只与用户自定义的<code>类</code>有关，而与实例化出来的<code>对象</code>无关，所以不会在<code>对象</code>中存储相关信息，不会改变其大小。</p>\n<h4 id=\"含有虚函数-1\"><a href=\"#含有虚函数-1\" class=\"headerlink\" title=\"含有虚函数\"></a>含有虚函数</h4><p>实例化出的<code>对象</code>含有了指向虚函数的<code>指针</code>,所以<code>sizeof</code>求出来的大小为一个<code>指针</code>的大小，<code>32位机器</code>求得<code>4</code>字节,<code>64位机器</code>求得<code>8</code>字节</p>\n"},{"title":"通过设计list类深入理解iterator迭代器","date":"2024-04-26T08:10:11.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Date.jpg","_content":"\n前置博客:**[从构建一个Date类入门C++类与对象](https://www.supdriver.top/2023/12/07/cpp-class/ '点击跳转')**\n\n>下面先迅速地搓一个`list`类\n```C++\ntemplate <class T>//先用模板创建一个节点类\nstruct ListNode\n{\n\tT _val;\n\tListNode<T>* _next;\n\tListNode<T>* _prev;\n\n\t//提供全缺省的默认构造函数\n\tListNode(const T& val = T()) :_val(val), _next(nullptr), _prev(nullptr) {}\n};\n\n//用ListNode构造list类\n\ntemplate <class T>\nclass list\n{\n\ttypedef ListNode<T> Node;//用typedef简化代码\npublic:\n\tlist()//默认构造函数\n\t{\n\t\t_head = new Node;\n\t\t//维护两个指针\n\t\t_head->_next = _head;\n\t\t_head->_prev = _head;\n\t}\n\n\tvoid push_front(const T& val)//头插\n\t{\n\t\tNode* newnode = new Node(val);\n\t\tNode* next = _head->_next;//额外的指针，简化代码\n\n\t\t_head->_next = newnode;\n\t\tnewnode->_prev = _head;\n\t\tnewnode->_next = next;\n\t\tnext->_prev = newnode;\n\t}\n\n\tvoid pop_front()//尾插\n\t{\n\t\tif (empty()) return;\n\n\t\tNode* cur = _head->_next;\n\t\t\n\t\t_head->_next = cur->_next;\n\t\tcur->_next->_prev = _head;\n\t\tdelete cur;\n\t}\n\n\tbool empty() //判空\n\t{\n\t\treturn _head->_next == _head;\n\t}\n\n\t//剩余代码自行补全\n    //......\nprivate:\n\tNode* _head;\n};\n\n```\n\n# list的迭代器 #\n\n不同于`vector`底层的数据在内存中**连续**存储,可以用`原生指针`充当迭代器,例如`typedef T* iterator`\n\n`list`的底层是链表,在内存中**分散***存储，是**不能**用`原生指针`来**连续**访问的,所以为了解决这一复杂问题，\n需要自己写一个`iterator`类\n\n## 普通迭代器 #\n\n```C++\ntemplate<class T>//迭代器也得用模板\nstruct __list_iterator\n{\n\ttypedef __list_iterator<T> Self;//简化代码\n\ttypedef ListNode<T> Node;\n\tNode* _node;\n\n\t__list_iterator(Node* node) :_node(node) {}\n\n\tSelf& operator++()//重载operator++\n\t{\n\t\t_node = _node->_next;\n\t\treturn *this;\n\t}\n\n\tbool operator!=(const Self& it) const //重载!==,比较操作符记得加const\n\t{\n\t\treturn _node != it._node;\n\t}\n\n\tT& operator*()//重载 *\n\t{\n\t\treturn _node->_val;\n\t}\n};\n\n```\n*`list`类中添加如下代码*\n```C++\npublic:\n\ttypedef __list_iterator<T> iterator;\n\n    iterator begin()\n\t{\n\t\treturn iterator(_head->_next);\n\t}\n\n\titerator end()\n\t{\n\t\treturn iterator(_head);\n\t}\n```\n\n通过如上修改,`list`已经支持`普通迭代器`,并且非`const`修饰的`list`已经支持`范围for`了\n\n>测试代码如下\n```C++\nint main()\n{\n\tlist<int> lst;\n\tlst.push_front(5);\n\tlst.push_front(4);\n\tlst.push_front(3);\n\tlst.push_front(2);\n\tlst.push_front(1);\n\n\tfor (auto e : lst)\n\t{\n\t\tcout << e << \" \";\n\t}\n\treturn 0;\n}\n```\n\n## const迭代器\n`const list`要能提供`const_iterator`，因此我们还要写一个`const_iterator`类...吗？\n\n其实**并不用**，要利用好C++中的`模板语法`来大大提高代码的复用性,尤其像`iterator`和`const_iterator`这种差别不大的类,没必要每个都单独写一段代码\n\n为此我们的`__list_iterator`只需要能用`模板`解决好二者的差异即可。而目前最大的问题是什么？是`operator*()`的返回值问题,一个是返回`T&`,另一个是`const T&`,其他的成员函数则基本没差别,所以不妨扩充一下`模板参数`,添加一个`Ref`类。\n\n>有变化的代码如下\n```C++\ntemplate<class T,class Ref>//增加一个Ref参数\nstruct __list_iterator\n{\n\ttypedef __list_iterator<T,Ref> Self;//Self这里的原类也要加\n\ttypedef ListNode<T> Node;\n\tNode* _node;\n\n\t__list_iterator(Node* node) :_node(node) {}\n\n\tRef operator*()//直接返回Ref类\n\t{\n\t\treturn _node->_val;\n\t}\n};\n```\n*`list`类也有相应变化*\n```C++\npublic:\n\ttypedef __list_iterator<T,T&> iterator;//普通迭代器\n\ttypedef __list_iterator<T,const T&> const_iterator;//const迭代器\n\n    const_iterator begin() const //针对const指针的\n\t{\n\t\treturn const_iterator(_head->_next);\n\t}\n\n\tconst_iterator end() const\n\t{\n\t\treturn const_iterator(_head);\n\t}\n```\n\n这样通过增加一个`Ref`模板参数,完成了对`iterator`和`const_iterator`的代码级统一(*当然模板实例化出来是不一样的*)\n\n但别忘了迭代器还要提供`->`操作符的重载,而`operator->()`函数要返回不同的指针，所以我们如法炮制，再增加一个`Ptr`模板参数\n\n>有变化的代码如下\n```C++\ntemplate<class T,class Ref,class Ptr>//增加一个Ptr参数\nstruct __list_iterator\n{\n\ttypedef __list_iterator<T,Ref,Ptr> Self;//Self相应更改\n\n\tPtr operator->()//重载->\n\t{\n\t\treturn &(_node->_val);\n\t}\n};\n\n```\n*`list`类也有相应变化*\n```C++\npublic:\n\ttypedef __list_iterator<T,T&,T*> iterator;//普通迭代器\n\ttypedef __list_iterator<T,const T&,const T*> const_iterator;//const迭代器\n```\n\n至此，`list`和`__list_iterator`的基本功能已基本完成，本篇的重点`__list_iterator`主要解决了两点问题\n\n-为了应对`list`的迭代器的复杂性，单独为其构建一个`__list_iterator`类，并提供一系列的操作符重载\n-为了提高代码的**复用性**,仅用一个`__list_iterator`类来`typedef`普通迭代器和`const`迭代器,我们增加了模板参数,最终模板变为`template<class T, class Ref, class Ptr>`\n\n## 用普通迭代器构造const迭代器\n有时候我们需要用普通迭代器构造`const`迭代器,于是可以给`__list_iterator`提供一个比较有意思的`构造函数`,\n可以实现时而充当拷贝构造，时而充当满足上述的构造\n\n>代码如下\n```C++\ntypedef __list_iterator<T,Ref,Ptr> Self;//再展示一遍Self的代码，便于下文对比\ntypedef __list_iterator<T,T&,T*> iterator;//指定普通迭代器，并用typedef简化代码\n\n__list_iterator(iterator it) :_node(it._node) {}\n\n```\n-当模板参数为`<T,T&,T*>`时，`Self`和`iterator`相同，上段代码中的构造函数相当于`拷贝构造`\n\n-当模板参数为`<T,const T&,const T*>`时，`Self`和`iterator`不同,`Slef`是`const`迭代器,`iterator`**始终**是普通迭代器，这个构造函数便能用普通迭代器构造`const`迭代器\n\n# 小结\n通过构造一个`list`类，我们使用到了更复杂的迭代器，使用了带`3个模板参数`的`__list_iterator`类定义普通迭代器和`const`迭代器，学习了如何利用模板参数提高代码的复用性，如何提供额外的`构造函数`使`__list_iterator`支持用普通迭代器构造`const`迭代器","source":"_posts/create-mylist.md","raw":"---\ntitle: 通过设计list类深入理解iterator迭代器\ndate: 2024-04-26 16:10:11\ntags: C++ 类和对象\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Date.jpg\n---\n\n前置博客:**[从构建一个Date类入门C++类与对象](https://www.supdriver.top/2023/12/07/cpp-class/ '点击跳转')**\n\n>下面先迅速地搓一个`list`类\n```C++\ntemplate <class T>//先用模板创建一个节点类\nstruct ListNode\n{\n\tT _val;\n\tListNode<T>* _next;\n\tListNode<T>* _prev;\n\n\t//提供全缺省的默认构造函数\n\tListNode(const T& val = T()) :_val(val), _next(nullptr), _prev(nullptr) {}\n};\n\n//用ListNode构造list类\n\ntemplate <class T>\nclass list\n{\n\ttypedef ListNode<T> Node;//用typedef简化代码\npublic:\n\tlist()//默认构造函数\n\t{\n\t\t_head = new Node;\n\t\t//维护两个指针\n\t\t_head->_next = _head;\n\t\t_head->_prev = _head;\n\t}\n\n\tvoid push_front(const T& val)//头插\n\t{\n\t\tNode* newnode = new Node(val);\n\t\tNode* next = _head->_next;//额外的指针，简化代码\n\n\t\t_head->_next = newnode;\n\t\tnewnode->_prev = _head;\n\t\tnewnode->_next = next;\n\t\tnext->_prev = newnode;\n\t}\n\n\tvoid pop_front()//尾插\n\t{\n\t\tif (empty()) return;\n\n\t\tNode* cur = _head->_next;\n\t\t\n\t\t_head->_next = cur->_next;\n\t\tcur->_next->_prev = _head;\n\t\tdelete cur;\n\t}\n\n\tbool empty() //判空\n\t{\n\t\treturn _head->_next == _head;\n\t}\n\n\t//剩余代码自行补全\n    //......\nprivate:\n\tNode* _head;\n};\n\n```\n\n# list的迭代器 #\n\n不同于`vector`底层的数据在内存中**连续**存储,可以用`原生指针`充当迭代器,例如`typedef T* iterator`\n\n`list`的底层是链表,在内存中**分散***存储，是**不能**用`原生指针`来**连续**访问的,所以为了解决这一复杂问题，\n需要自己写一个`iterator`类\n\n## 普通迭代器 #\n\n```C++\ntemplate<class T>//迭代器也得用模板\nstruct __list_iterator\n{\n\ttypedef __list_iterator<T> Self;//简化代码\n\ttypedef ListNode<T> Node;\n\tNode* _node;\n\n\t__list_iterator(Node* node) :_node(node) {}\n\n\tSelf& operator++()//重载operator++\n\t{\n\t\t_node = _node->_next;\n\t\treturn *this;\n\t}\n\n\tbool operator!=(const Self& it) const //重载!==,比较操作符记得加const\n\t{\n\t\treturn _node != it._node;\n\t}\n\n\tT& operator*()//重载 *\n\t{\n\t\treturn _node->_val;\n\t}\n};\n\n```\n*`list`类中添加如下代码*\n```C++\npublic:\n\ttypedef __list_iterator<T> iterator;\n\n    iterator begin()\n\t{\n\t\treturn iterator(_head->_next);\n\t}\n\n\titerator end()\n\t{\n\t\treturn iterator(_head);\n\t}\n```\n\n通过如上修改,`list`已经支持`普通迭代器`,并且非`const`修饰的`list`已经支持`范围for`了\n\n>测试代码如下\n```C++\nint main()\n{\n\tlist<int> lst;\n\tlst.push_front(5);\n\tlst.push_front(4);\n\tlst.push_front(3);\n\tlst.push_front(2);\n\tlst.push_front(1);\n\n\tfor (auto e : lst)\n\t{\n\t\tcout << e << \" \";\n\t}\n\treturn 0;\n}\n```\n\n## const迭代器\n`const list`要能提供`const_iterator`，因此我们还要写一个`const_iterator`类...吗？\n\n其实**并不用**，要利用好C++中的`模板语法`来大大提高代码的复用性,尤其像`iterator`和`const_iterator`这种差别不大的类,没必要每个都单独写一段代码\n\n为此我们的`__list_iterator`只需要能用`模板`解决好二者的差异即可。而目前最大的问题是什么？是`operator*()`的返回值问题,一个是返回`T&`,另一个是`const T&`,其他的成员函数则基本没差别,所以不妨扩充一下`模板参数`,添加一个`Ref`类。\n\n>有变化的代码如下\n```C++\ntemplate<class T,class Ref>//增加一个Ref参数\nstruct __list_iterator\n{\n\ttypedef __list_iterator<T,Ref> Self;//Self这里的原类也要加\n\ttypedef ListNode<T> Node;\n\tNode* _node;\n\n\t__list_iterator(Node* node) :_node(node) {}\n\n\tRef operator*()//直接返回Ref类\n\t{\n\t\treturn _node->_val;\n\t}\n};\n```\n*`list`类也有相应变化*\n```C++\npublic:\n\ttypedef __list_iterator<T,T&> iterator;//普通迭代器\n\ttypedef __list_iterator<T,const T&> const_iterator;//const迭代器\n\n    const_iterator begin() const //针对const指针的\n\t{\n\t\treturn const_iterator(_head->_next);\n\t}\n\n\tconst_iterator end() const\n\t{\n\t\treturn const_iterator(_head);\n\t}\n```\n\n这样通过增加一个`Ref`模板参数,完成了对`iterator`和`const_iterator`的代码级统一(*当然模板实例化出来是不一样的*)\n\n但别忘了迭代器还要提供`->`操作符的重载,而`operator->()`函数要返回不同的指针，所以我们如法炮制，再增加一个`Ptr`模板参数\n\n>有变化的代码如下\n```C++\ntemplate<class T,class Ref,class Ptr>//增加一个Ptr参数\nstruct __list_iterator\n{\n\ttypedef __list_iterator<T,Ref,Ptr> Self;//Self相应更改\n\n\tPtr operator->()//重载->\n\t{\n\t\treturn &(_node->_val);\n\t}\n};\n\n```\n*`list`类也有相应变化*\n```C++\npublic:\n\ttypedef __list_iterator<T,T&,T*> iterator;//普通迭代器\n\ttypedef __list_iterator<T,const T&,const T*> const_iterator;//const迭代器\n```\n\n至此，`list`和`__list_iterator`的基本功能已基本完成，本篇的重点`__list_iterator`主要解决了两点问题\n\n-为了应对`list`的迭代器的复杂性，单独为其构建一个`__list_iterator`类，并提供一系列的操作符重载\n-为了提高代码的**复用性**,仅用一个`__list_iterator`类来`typedef`普通迭代器和`const`迭代器,我们增加了模板参数,最终模板变为`template<class T, class Ref, class Ptr>`\n\n## 用普通迭代器构造const迭代器\n有时候我们需要用普通迭代器构造`const`迭代器,于是可以给`__list_iterator`提供一个比较有意思的`构造函数`,\n可以实现时而充当拷贝构造，时而充当满足上述的构造\n\n>代码如下\n```C++\ntypedef __list_iterator<T,Ref,Ptr> Self;//再展示一遍Self的代码，便于下文对比\ntypedef __list_iterator<T,T&,T*> iterator;//指定普通迭代器，并用typedef简化代码\n\n__list_iterator(iterator it) :_node(it._node) {}\n\n```\n-当模板参数为`<T,T&,T*>`时，`Self`和`iterator`相同，上段代码中的构造函数相当于`拷贝构造`\n\n-当模板参数为`<T,const T&,const T*>`时，`Self`和`iterator`不同,`Slef`是`const`迭代器,`iterator`**始终**是普通迭代器，这个构造函数便能用普通迭代器构造`const`迭代器\n\n# 小结\n通过构造一个`list`类，我们使用到了更复杂的迭代器，使用了带`3个模板参数`的`__list_iterator`类定义普通迭代器和`const`迭代器，学习了如何利用模板参数提高代码的复用性，如何提供额外的`构造函数`使`__list_iterator`支持用普通迭代器构造`const`迭代器","slug":"create-mylist","published":1,"updated":"2024-05-14T02:20:26.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv7000iv8p54ach2pw5","content":"<p>前置博客:<strong><a href=\"https://www.supdriver.top/2023/12/07/cpp-class/\" title=\"点击跳转\">从构建一个Date类入门C++类与对象</a></strong></p>\n<blockquote>\n<p>下面先迅速地搓一个<code>list</code>类</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;<span class=\"comment\">//先用模板创建一个节点类</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ListNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tT _val;</span><br><span class=\"line\">\tListNode&lt;T&gt;* _next;</span><br><span class=\"line\">\tListNode&lt;T&gt;* _prev;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//提供全缺省的默认构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">ListNode</span>(<span class=\"type\">const</span> T&amp; val = <span class=\"built_in\">T</span>()) :_val(val), _next(<span class=\"literal\">nullptr</span>), _prev(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用ListNode构造list类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">list</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> ListNode&lt;T&gt; Node;<span class=\"comment\">//用typedef简化代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>()<span class=\"comment\">//默认构造函数</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_head = <span class=\"keyword\">new</span> Node;</span><br><span class=\"line\">\t\t<span class=\"comment\">//维护两个指针</span></span><br><span class=\"line\">\t\t_head-&gt;_next = _head;</span><br><span class=\"line\">\t\t_head-&gt;_prev = _head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_front</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; val)</span><span class=\"comment\">//头插</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tNode* newnode = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(val);</span><br><span class=\"line\">\t\tNode* next = _head-&gt;_next;<span class=\"comment\">//额外的指针，简化代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_head-&gt;_next = newnode;</span><br><span class=\"line\">\t\tnewnode-&gt;_prev = _head;</span><br><span class=\"line\">\t\tnewnode-&gt;_next = next;</span><br><span class=\"line\">\t\tnext-&gt;_prev = newnode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_front</span><span class=\"params\">()</span><span class=\"comment\">//尾插</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tNode* cur = _head-&gt;_next;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t_head-&gt;_next = cur-&gt;_next;</span><br><span class=\"line\">\t\tcur-&gt;_next-&gt;_prev = _head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"comment\">//判空</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _head-&gt;_next == _head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//剩余代码自行补全</span></span><br><span class=\"line\">    <span class=\"comment\">//......</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tNode* _head;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"list的迭代器\"><a href=\"#list的迭代器\" class=\"headerlink\" title=\"list的迭代器\"></a>list的迭代器</h1><p>不同于<code>vector</code>底层的数据在内存中<strong>连续</strong>存储,可以用<code>原生指针</code>充当迭代器,例如<code>typedef T* iterator</code></p>\n<p><code>list</code>的底层是链表,在内存中<strong>分散</strong>*存储，是<strong>不能</strong>用<code>原生指针</code>来<strong>连续</strong>访问的,所以为了解决这一复杂问题，<br>需要自己写一个<code>iterator</code>类</p>\n<h2 id=\"普通迭代器\"><a href=\"#普通迭代器\" class=\"headerlink\" title=\"普通迭代器\"></a>普通迭代器</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;<span class=\"comment\">//迭代器也得用模板</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">__list_iterator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T&gt; Self;<span class=\"comment\">//简化代码</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> ListNode&lt;T&gt; Node;</span><br><span class=\"line\">\tNode* _node;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__list_iterator(Node* node) :_node(node) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSelf&amp; <span class=\"keyword\">operator</span>++()<span class=\"comment\">//重载operator++</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_node = _node-&gt;_next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"type\">const</span> Self&amp; it) <span class=\"type\">const</span> <span class=\"comment\">//重载!==,比较操作符记得加const</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _node != it._node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tT&amp; <span class=\"keyword\">operator</span>*()<span class=\"comment\">//重载 *</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _node-&gt;_val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em><code>list</code>类中添加如下代码</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T&gt; iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">iterator</span>(_head-&gt;_next);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">iterator <span class=\"title\">end</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">iterator</span>(_head);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过如上修改,<code>list</code>已经支持<code>普通迭代器</code>,并且非<code>const</code>修饰的<code>list</code>已经支持<code>范围for</code>了</p>\n<blockquote>\n<p>测试代码如下</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt; lst;</span><br><span class=\"line\">\tlst.<span class=\"built_in\">push_front</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tlst.<span class=\"built_in\">push_front</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tlst.<span class=\"built_in\">push_front</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">\tlst.<span class=\"built_in\">push_front</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tlst.<span class=\"built_in\">push_front</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> e : lst)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; e &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"const迭代器\"><a href=\"#const迭代器\" class=\"headerlink\" title=\"const迭代器\"></a>const迭代器</h2><p><code>const list</code>要能提供<code>const_iterator</code>，因此我们还要写一个<code>const_iterator</code>类…吗？</p>\n<p>其实<strong>并不用</strong>，要利用好C++中的<code>模板语法</code>来大大提高代码的复用性,尤其像<code>iterator</code>和<code>const_iterator</code>这种差别不大的类,没必要每个都单独写一段代码</p>\n<p>为此我们的<code>__list_iterator</code>只需要能用<code>模板</code>解决好二者的差异即可。而目前最大的问题是什么？是<code>operator*()</code>的返回值问题,一个是返回<code>T&amp;</code>,另一个是<code>const T&amp;</code>,其他的成员函数则基本没差别,所以不妨扩充一下<code>模板参数</code>,添加一个<code>Ref</code>类。</p>\n<blockquote>\n<p>有变化的代码如下</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">Ref</span>&gt;<span class=\"comment\">//增加一个Ref参数</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">__list_iterator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,Ref&gt; Self;<span class=\"comment\">//Self这里的原类也要加</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> ListNode&lt;T&gt; Node;</span><br><span class=\"line\">\tNode* _node;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__list_iterator(Node* node) :_node(node) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tRef <span class=\"keyword\">operator</span>*()<span class=\"comment\">//直接返回Ref类</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _node-&gt;_val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><em><code>list</code>类也有相应变化</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,T&amp;&gt; iterator;<span class=\"comment\">//普通迭代器</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,<span class=\"type\">const</span> T&amp;&gt; const_iterator;<span class=\"comment\">//const迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">const_iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"comment\">//针对const指针的</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">const_iterator</span>(_head-&gt;_next);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">const_iterator <span class=\"title\">end</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">const_iterator</span>(_head);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样通过增加一个<code>Ref</code>模板参数,完成了对<code>iterator</code>和<code>const_iterator</code>的代码级统一(<em>当然模板实例化出来是不一样的</em>)</p>\n<p>但别忘了迭代器还要提供<code>-&gt;</code>操作符的重载,而<code>operator-&gt;()</code>函数要返回不同的指针，所以我们如法炮制，再增加一个<code>Ptr</code>模板参数</p>\n<blockquote>\n<p>有变化的代码如下</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">Ref</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">Ptr</span>&gt;<span class=\"comment\">//增加一个Ptr参数</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">__list_iterator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,Ref,Ptr&gt; Self;<span class=\"comment\">//Self相应更改</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPtr <span class=\"keyword\">operator</span>-&gt;()<span class=\"comment\">//重载-&gt;</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;(_node-&gt;_val);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em><code>list</code>类也有相应变化</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,T&amp;,T*&gt; iterator;<span class=\"comment\">//普通迭代器</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,<span class=\"type\">const</span> T&amp;,<span class=\"type\">const</span> T*&gt; const_iterator;<span class=\"comment\">//const迭代器</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，<code>list</code>和<code>__list_iterator</code>的基本功能已基本完成，本篇的重点<code>__list_iterator</code>主要解决了两点问题</p>\n<p>-为了应对<code>list</code>的迭代器的复杂性，单独为其构建一个<code>__list_iterator</code>类，并提供一系列的操作符重载<br>-为了提高代码的<strong>复用性</strong>,仅用一个<code>__list_iterator</code>类来<code>typedef</code>普通迭代器和<code>const</code>迭代器,我们增加了模板参数,最终模板变为<code>template&lt;class T, class Ref, class Ptr&gt;</code></p>\n<h2 id=\"用普通迭代器构造const迭代器\"><a href=\"#用普通迭代器构造const迭代器\" class=\"headerlink\" title=\"用普通迭代器构造const迭代器\"></a>用普通迭代器构造const迭代器</h2><p>有时候我们需要用普通迭代器构造<code>const</code>迭代器,于是可以给<code>__list_iterator</code>提供一个比较有意思的<code>构造函数</code>,<br>可以实现时而充当拷贝构造，时而充当满足上述的构造</p>\n<blockquote>\n<p>代码如下</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> __list_iterator&lt;T,Ref,Ptr&gt; Self;<span class=\"comment\">//再展示一遍Self的代码，便于下文对比</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> __list_iterator&lt;T,T&amp;,T*&gt; iterator;<span class=\"comment\">//指定普通迭代器，并用typedef简化代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">__list_iterator(iterator it) :_node(it._node) &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>-当模板参数为<code>&lt;T,T&amp;,T*&gt;</code>时，<code>Self</code>和<code>iterator</code>相同，上段代码中的构造函数相当于<code>拷贝构造</code></p>\n<p>-当模板参数为<code>&lt;T,const T&amp;,const T*&gt;</code>时，<code>Self</code>和<code>iterator</code>不同,<code>Slef</code>是<code>const</code>迭代器,<code>iterator</code><strong>始终</strong>是普通迭代器，这个构造函数便能用普通迭代器构造<code>const</code>迭代器</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>通过构造一个<code>list</code>类，我们使用到了更复杂的迭代器，使用了带<code>3个模板参数</code>的<code>__list_iterator</code>类定义普通迭代器和<code>const</code>迭代器，学习了如何利用模板参数提高代码的复用性，如何提供额外的<code>构造函数</code>使<code>__list_iterator</code>支持用普通迭代器构造<code>const</code>迭代器</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<p>前置博客:<strong><a href=\"https://www.supdriver.top/2023/12/07/cpp-class/\" title=\"点击跳转\">从构建一个Date类入门C++类与对象</a></strong></p>\n<blockquote>\n<p>下面先迅速地搓一个<code>list</code>类</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;<span class=\"comment\">//先用模板创建一个节点类</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ListNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tT _val;</span><br><span class=\"line\">\tListNode&lt;T&gt;* _next;</span><br><span class=\"line\">\tListNode&lt;T&gt;* _prev;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//提供全缺省的默认构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">ListNode</span>(<span class=\"type\">const</span> T&amp; val = <span class=\"built_in\">T</span>()) :_val(val), _next(<span class=\"literal\">nullptr</span>), _prev(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用ListNode构造list类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">list</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> ListNode&lt;T&gt; Node;<span class=\"comment\">//用typedef简化代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>()<span class=\"comment\">//默认构造函数</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_head = <span class=\"keyword\">new</span> Node;</span><br><span class=\"line\">\t\t<span class=\"comment\">//维护两个指针</span></span><br><span class=\"line\">\t\t_head-&gt;_next = _head;</span><br><span class=\"line\">\t\t_head-&gt;_prev = _head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_front</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; val)</span><span class=\"comment\">//头插</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tNode* newnode = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(val);</span><br><span class=\"line\">\t\tNode* next = _head-&gt;_next;<span class=\"comment\">//额外的指针，简化代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_head-&gt;_next = newnode;</span><br><span class=\"line\">\t\tnewnode-&gt;_prev = _head;</span><br><span class=\"line\">\t\tnewnode-&gt;_next = next;</span><br><span class=\"line\">\t\tnext-&gt;_prev = newnode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_front</span><span class=\"params\">()</span><span class=\"comment\">//尾插</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tNode* cur = _head-&gt;_next;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t_head-&gt;_next = cur-&gt;_next;</span><br><span class=\"line\">\t\tcur-&gt;_next-&gt;_prev = _head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"comment\">//判空</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _head-&gt;_next == _head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//剩余代码自行补全</span></span><br><span class=\"line\">    <span class=\"comment\">//......</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tNode* _head;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"list的迭代器\"><a href=\"#list的迭代器\" class=\"headerlink\" title=\"list的迭代器\"></a>list的迭代器</h1><p>不同于<code>vector</code>底层的数据在内存中<strong>连续</strong>存储,可以用<code>原生指针</code>充当迭代器,例如<code>typedef T* iterator</code></p>\n<p><code>list</code>的底层是链表,在内存中<strong>分散</strong>*存储，是<strong>不能</strong>用<code>原生指针</code>来<strong>连续</strong>访问的,所以为了解决这一复杂问题，<br>需要自己写一个<code>iterator</code>类</p>\n<h2 id=\"普通迭代器\"><a href=\"#普通迭代器\" class=\"headerlink\" title=\"普通迭代器\"></a>普通迭代器</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;<span class=\"comment\">//迭代器也得用模板</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">__list_iterator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T&gt; Self;<span class=\"comment\">//简化代码</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> ListNode&lt;T&gt; Node;</span><br><span class=\"line\">\tNode* _node;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__list_iterator(Node* node) :_node(node) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSelf&amp; <span class=\"keyword\">operator</span>++()<span class=\"comment\">//重载operator++</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_node = _node-&gt;_next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"type\">const</span> Self&amp; it) <span class=\"type\">const</span> <span class=\"comment\">//重载!==,比较操作符记得加const</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _node != it._node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tT&amp; <span class=\"keyword\">operator</span>*()<span class=\"comment\">//重载 *</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _node-&gt;_val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em><code>list</code>类中添加如下代码</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T&gt; iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">iterator</span>(_head-&gt;_next);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">iterator <span class=\"title\">end</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">iterator</span>(_head);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过如上修改,<code>list</code>已经支持<code>普通迭代器</code>,并且非<code>const</code>修饰的<code>list</code>已经支持<code>范围for</code>了</p>\n<blockquote>\n<p>测试代码如下</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt; lst;</span><br><span class=\"line\">\tlst.<span class=\"built_in\">push_front</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tlst.<span class=\"built_in\">push_front</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tlst.<span class=\"built_in\">push_front</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">\tlst.<span class=\"built_in\">push_front</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tlst.<span class=\"built_in\">push_front</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> e : lst)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; e &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"const迭代器\"><a href=\"#const迭代器\" class=\"headerlink\" title=\"const迭代器\"></a>const迭代器</h2><p><code>const list</code>要能提供<code>const_iterator</code>，因此我们还要写一个<code>const_iterator</code>类…吗？</p>\n<p>其实<strong>并不用</strong>，要利用好C++中的<code>模板语法</code>来大大提高代码的复用性,尤其像<code>iterator</code>和<code>const_iterator</code>这种差别不大的类,没必要每个都单独写一段代码</p>\n<p>为此我们的<code>__list_iterator</code>只需要能用<code>模板</code>解决好二者的差异即可。而目前最大的问题是什么？是<code>operator*()</code>的返回值问题,一个是返回<code>T&amp;</code>,另一个是<code>const T&amp;</code>,其他的成员函数则基本没差别,所以不妨扩充一下<code>模板参数</code>,添加一个<code>Ref</code>类。</p>\n<blockquote>\n<p>有变化的代码如下</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">Ref</span>&gt;<span class=\"comment\">//增加一个Ref参数</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">__list_iterator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,Ref&gt; Self;<span class=\"comment\">//Self这里的原类也要加</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> ListNode&lt;T&gt; Node;</span><br><span class=\"line\">\tNode* _node;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__list_iterator(Node* node) :_node(node) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tRef <span class=\"keyword\">operator</span>*()<span class=\"comment\">//直接返回Ref类</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _node-&gt;_val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><em><code>list</code>类也有相应变化</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,T&amp;&gt; iterator;<span class=\"comment\">//普通迭代器</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,<span class=\"type\">const</span> T&amp;&gt; const_iterator;<span class=\"comment\">//const迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">const_iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"comment\">//针对const指针的</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">const_iterator</span>(_head-&gt;_next);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">const_iterator <span class=\"title\">end</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">const_iterator</span>(_head);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样通过增加一个<code>Ref</code>模板参数,完成了对<code>iterator</code>和<code>const_iterator</code>的代码级统一(<em>当然模板实例化出来是不一样的</em>)</p>\n<p>但别忘了迭代器还要提供<code>-&gt;</code>操作符的重载,而<code>operator-&gt;()</code>函数要返回不同的指针，所以我们如法炮制，再增加一个<code>Ptr</code>模板参数</p>\n<blockquote>\n<p>有变化的代码如下</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">Ref</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">Ptr</span>&gt;<span class=\"comment\">//增加一个Ptr参数</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">__list_iterator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,Ref,Ptr&gt; Self;<span class=\"comment\">//Self相应更改</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPtr <span class=\"keyword\">operator</span>-&gt;()<span class=\"comment\">//重载-&gt;</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;(_node-&gt;_val);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em><code>list</code>类也有相应变化</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,T&amp;,T*&gt; iterator;<span class=\"comment\">//普通迭代器</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __list_iterator&lt;T,<span class=\"type\">const</span> T&amp;,<span class=\"type\">const</span> T*&gt; const_iterator;<span class=\"comment\">//const迭代器</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，<code>list</code>和<code>__list_iterator</code>的基本功能已基本完成，本篇的重点<code>__list_iterator</code>主要解决了两点问题</p>\n<p>-为了应对<code>list</code>的迭代器的复杂性，单独为其构建一个<code>__list_iterator</code>类，并提供一系列的操作符重载<br>-为了提高代码的<strong>复用性</strong>,仅用一个<code>__list_iterator</code>类来<code>typedef</code>普通迭代器和<code>const</code>迭代器,我们增加了模板参数,最终模板变为<code>template&lt;class T, class Ref, class Ptr&gt;</code></p>\n<h2 id=\"用普通迭代器构造const迭代器\"><a href=\"#用普通迭代器构造const迭代器\" class=\"headerlink\" title=\"用普通迭代器构造const迭代器\"></a>用普通迭代器构造const迭代器</h2><p>有时候我们需要用普通迭代器构造<code>const</code>迭代器,于是可以给<code>__list_iterator</code>提供一个比较有意思的<code>构造函数</code>,<br>可以实现时而充当拷贝构造，时而充当满足上述的构造</p>\n<blockquote>\n<p>代码如下</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> __list_iterator&lt;T,Ref,Ptr&gt; Self;<span class=\"comment\">//再展示一遍Self的代码，便于下文对比</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> __list_iterator&lt;T,T&amp;,T*&gt; iterator;<span class=\"comment\">//指定普通迭代器，并用typedef简化代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">__list_iterator(iterator it) :_node(it._node) &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>-当模板参数为<code>&lt;T,T&amp;,T*&gt;</code>时，<code>Self</code>和<code>iterator</code>相同，上段代码中的构造函数相当于<code>拷贝构造</code></p>\n<p>-当模板参数为<code>&lt;T,const T&amp;,const T*&gt;</code>时，<code>Self</code>和<code>iterator</code>不同,<code>Slef</code>是<code>const</code>迭代器,<code>iterator</code><strong>始终</strong>是普通迭代器，这个构造函数便能用普通迭代器构造<code>const</code>迭代器</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>通过构造一个<code>list</code>类，我们使用到了更复杂的迭代器，使用了带<code>3个模板参数</code>的<code>__list_iterator</code>类定义普通迭代器和<code>const</code>迭代器，学习了如何利用模板参数提高代码的复用性，如何提供额外的<code>构造函数</code>使<code>__list_iterator</code>支持用普通迭代器构造<code>const</code>迭代器</p>\n"},{"title":"环境变量","date":"2024-07-06T13:36:21.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-25_22-38-03.png","_content":"\n# 基本概念\n+ 环境变量(environment variables)一般是指在操作系统中用来指定操作系统运行环境的一些**参数**\n+ 环境变量通常具有某些特殊用途，还有在系统当中通常具有**全局特性**\n\n**构成**：环境变量是一系列`字符串`的统称,所以一个环境变量由`变量名`和`值`构成\n\n这么说还是太抽象了，我们接下来会举几个具体样例，体会`环境变量`在获取系统全局的变量，系统指令路径等方面的作用\n\n## 常见环境变量\n\n| 变量名 | 功能 |\n| ------- | --------|\n| `PATH` | 指定命令的搜索路径 |\n| `HOME` | 指定用户的主工作目录(即用户登陆到Linux系统中时,默认的目录) |\n| `USER` | 当前用户名 |\n| `SHELL` | 当前Shell,它的值通常是`/bin/bash` |\n| `PWD` | 当前工作目录\n\n# 操作系统变量\n\n## 查看环境变量\n`echo $NAME` *NAME为变量名*\n\n以`PATH`为例,查看`PATH`的值的指令为\n\n```SHELL\necho $PATH\n```\n\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_12-46-35.png\n\n可以看到`PATH`的内容为多个文件路径，互相以`:`分隔\n\n而若要查看当前的全部环境变量,可以使用`env`指令,将当前所有环境变量打印在终端上\n\n也可以通过`管道`和`grep`将`env`的输出内容过滤\n\n*查看PATH*\n```SHELL\nenv | grep PATH\n```\n\n同时还有个`set` 指令可以显示本地定义的shell变量和环境变量环境变量的组织方式 \n\n\n## 获取进程的环境变量\n+ 在程序中，可以使用`getenv()`接口获取对应`环境变量名`的对应环境变量值\n\n*`getenv`在`<stdlib.h>`中*\n```C\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    printf(\"PATH: %s\\n\",getenv(\"PATH\"));//打印PATH的值\n    return 0;\n}\n```\n\n## 环境变量的组织方式\n每个`进程`都有自己的`环境表`,所谓`环境表`就是一个**字符**`指针数组`,每个不为`NULL`的指针指向`环境字符串`\n\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_20-52-19.png\n\n+ 因此也可以使用`main`函数传参来打印所有环境变量的内容\n```C\nint main(int argc,char* argv[],con char* env[])\n{\n    char* str;\n    int i = 0;\n    while(str =env[i++]) printf(\"%s\\n\",str);\n    return 0;\n}\n```\n\n## 导入环境变量\n头文件`unistd.h>`提供了一个全局变量`environ`,因此可以用`extern`导入环境变量\n\n```C\n#include <stdio.h>\n#include <unistd.h>\n\nextern char **environ;//导入换进变量\n\nint main()\n{\n    const char* str;\n    int i = 0;\n    while(str =environ[i++]) printf(\"%s\\n\",str);\n    return 0;\n}\n```\n\n## 添加新的环境变量\n使用`export`命令可以添加新的环境变量\n\n使用方法:`export``=``(变量值)`\n\n例如添加一个值为`supdriver666`,名为`MY_VALUE`的环境变量,最后查看该变量\n\n```SHELL\nexport MY_VALUE=supdriver666\n\nenv | grep MY_VALUE\n```\n\n## 程序内设置换进变量\n使用`<stdlib.h>`提供的`putenv()`接口可以设置环境变量，用法与`export`指令相同\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    putenv(\"MY_VALUE=666\");\n    printf(\"MY_VALUE = %s\",getenv(\"MY_VALUE\"));\n    return 0;\n}\n```\n\n\n## 删除环境变量\n使用`unset`可以删除环境变量\n\n*删除上文的`MY_VALUE`*\n```SHELL\nunset MY_VALUE\n\nenv | grep MY_VALUE\n```\n可以看到没有输出了 \n\n## 添加本地shell变量 和 查看本地变量与环境变量\n添加本地变量: 直接输入`(变量名)``=``(值)`  //*不加空格*/\n\n查看变量: 使用`set`命令查看本地变量与环境变量，但是内容非常多，建议搭配`grep`等使用\n\n*例*\n```SHELL\nmy_value=2024\n\nset\n\nset | grep my_value\n```\n\n## 本地变量与环境变量\n二者最大的差别是`环境变量`可以被子进程**继承**,而`本地变量`只在本BASH内部有效，**不会**被继承\n\n\n","source":"_posts/evn.md","raw":"---\ntitle: 环境变量\ndate: 2024-07-06 21:36:21\ntags: 环境变量\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-25_22-38-03.png\n---\n\n# 基本概念\n+ 环境变量(environment variables)一般是指在操作系统中用来指定操作系统运行环境的一些**参数**\n+ 环境变量通常具有某些特殊用途，还有在系统当中通常具有**全局特性**\n\n**构成**：环境变量是一系列`字符串`的统称,所以一个环境变量由`变量名`和`值`构成\n\n这么说还是太抽象了，我们接下来会举几个具体样例，体会`环境变量`在获取系统全局的变量，系统指令路径等方面的作用\n\n## 常见环境变量\n\n| 变量名 | 功能 |\n| ------- | --------|\n| `PATH` | 指定命令的搜索路径 |\n| `HOME` | 指定用户的主工作目录(即用户登陆到Linux系统中时,默认的目录) |\n| `USER` | 当前用户名 |\n| `SHELL` | 当前Shell,它的值通常是`/bin/bash` |\n| `PWD` | 当前工作目录\n\n# 操作系统变量\n\n## 查看环境变量\n`echo $NAME` *NAME为变量名*\n\n以`PATH`为例,查看`PATH`的值的指令为\n\n```SHELL\necho $PATH\n```\n\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_12-46-35.png\n\n可以看到`PATH`的内容为多个文件路径，互相以`:`分隔\n\n而若要查看当前的全部环境变量,可以使用`env`指令,将当前所有环境变量打印在终端上\n\n也可以通过`管道`和`grep`将`env`的输出内容过滤\n\n*查看PATH*\n```SHELL\nenv | grep PATH\n```\n\n同时还有个`set` 指令可以显示本地定义的shell变量和环境变量环境变量的组织方式 \n\n\n## 获取进程的环境变量\n+ 在程序中，可以使用`getenv()`接口获取对应`环境变量名`的对应环境变量值\n\n*`getenv`在`<stdlib.h>`中*\n```C\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    printf(\"PATH: %s\\n\",getenv(\"PATH\"));//打印PATH的值\n    return 0;\n}\n```\n\n## 环境变量的组织方式\n每个`进程`都有自己的`环境表`,所谓`环境表`就是一个**字符**`指针数组`,每个不为`NULL`的指针指向`环境字符串`\n\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_20-52-19.png\n\n+ 因此也可以使用`main`函数传参来打印所有环境变量的内容\n```C\nint main(int argc,char* argv[],con char* env[])\n{\n    char* str;\n    int i = 0;\n    while(str =env[i++]) printf(\"%s\\n\",str);\n    return 0;\n}\n```\n\n## 导入环境变量\n头文件`unistd.h>`提供了一个全局变量`environ`,因此可以用`extern`导入环境变量\n\n```C\n#include <stdio.h>\n#include <unistd.h>\n\nextern char **environ;//导入换进变量\n\nint main()\n{\n    const char* str;\n    int i = 0;\n    while(str =environ[i++]) printf(\"%s\\n\",str);\n    return 0;\n}\n```\n\n## 添加新的环境变量\n使用`export`命令可以添加新的环境变量\n\n使用方法:`export``=``(变量值)`\n\n例如添加一个值为`supdriver666`,名为`MY_VALUE`的环境变量,最后查看该变量\n\n```SHELL\nexport MY_VALUE=supdriver666\n\nenv | grep MY_VALUE\n```\n\n## 程序内设置换进变量\n使用`<stdlib.h>`提供的`putenv()`接口可以设置环境变量，用法与`export`指令相同\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    putenv(\"MY_VALUE=666\");\n    printf(\"MY_VALUE = %s\",getenv(\"MY_VALUE\"));\n    return 0;\n}\n```\n\n\n## 删除环境变量\n使用`unset`可以删除环境变量\n\n*删除上文的`MY_VALUE`*\n```SHELL\nunset MY_VALUE\n\nenv | grep MY_VALUE\n```\n可以看到没有输出了 \n\n## 添加本地shell变量 和 查看本地变量与环境变量\n添加本地变量: 直接输入`(变量名)``=``(值)`  //*不加空格*/\n\n查看变量: 使用`set`命令查看本地变量与环境变量，但是内容非常多，建议搭配`grep`等使用\n\n*例*\n```SHELL\nmy_value=2024\n\nset\n\nset | grep my_value\n```\n\n## 本地变量与环境变量\n二者最大的差别是`环境变量`可以被子进程**继承**,而`本地变量`只在本BASH内部有效，**不会**被继承\n\n\n","slug":"evn","published":1,"updated":"2024-07-25T14:38:44.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv7000kv8p5anw08n1h","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>环境变量(environment variables)一般是指在操作系统中用来指定操作系统运行环境的一些<strong>参数</strong></li>\n<li>环境变量通常具有某些特殊用途，还有在系统当中通常具有<strong>全局特性</strong></li>\n</ul>\n<p><strong>构成</strong>：环境变量是一系列<code>字符串</code>的统称,所以一个环境变量由<code>变量名</code>和<code>值</code>构成</p>\n<p>这么说还是太抽象了，我们接下来会举几个具体样例，体会<code>环境变量</code>在获取系统全局的变量，系统指令路径等方面的作用</p>\n<h2 id=\"常见环境变量\"><a href=\"#常见环境变量\" class=\"headerlink\" title=\"常见环境变量\"></a>常见环境变量</h2><table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>PATH</code></td>\n<td>指定命令的搜索路径</td>\n</tr>\n<tr>\n<td><code>HOME</code></td>\n<td>指定用户的主工作目录(即用户登陆到Linux系统中时,默认的目录)</td>\n</tr>\n<tr>\n<td><code>USER</code></td>\n<td>当前用户名</td>\n</tr>\n<tr>\n<td><code>SHELL</code></td>\n<td>当前Shell,它的值通常是<code>/bin/bash</code></td>\n</tr>\n<tr>\n<td><code>PWD</code></td>\n<td>当前工作目录</td>\n</tr>\n</tbody></table>\n<h1 id=\"操作系统变量\"><a href=\"#操作系统变量\" class=\"headerlink\" title=\"操作系统变量\"></a>操作系统变量</h1><h2 id=\"查看环境变量\"><a href=\"#查看环境变量\" class=\"headerlink\" title=\"查看环境变量\"></a>查看环境变量</h2><p><code>echo $NAME</code> <em>NAME为变量名</em></p>\n<p>以<code>PATH</code>为例,查看<code>PATH</code>的值的指令为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_12-46-35.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_12-46-35.png</a></p>\n<p>可以看到<code>PATH</code>的内容为多个文件路径，互相以<code>:</code>分隔</p>\n<p>而若要查看当前的全部环境变量,可以使用<code>env</code>指令,将当前所有环境变量打印在终端上</p>\n<p>也可以通过<code>管道</code>和<code>grep</code>将<code>env</code>的输出内容过滤</p>\n<p><em>查看PATH</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env | grep PATH</span><br></pre></td></tr></table></figure>\n\n<p>同时还有个<code>set</code> 指令可以显示本地定义的shell变量和环境变量环境变量的组织方式 </p>\n<h2 id=\"获取进程的环境变量\"><a href=\"#获取进程的环境变量\" class=\"headerlink\" title=\"获取进程的环境变量\"></a>获取进程的环境变量</h2><ul>\n<li>在程序中，可以使用<code>getenv()</code>接口获取对应<code>环境变量名</code>的对应环境变量值</li>\n</ul>\n<p><em><code>getenv</code>在<code>&lt;stdlib.h&gt;</code>中</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;PATH: %s\\n&quot;</span>,getenv(<span class=\"string\">&quot;PATH&quot;</span>));<span class=\"comment\">//打印PATH的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"环境变量的组织方式\"><a href=\"#环境变量的组织方式\" class=\"headerlink\" title=\"环境变量的组织方式\"></a>环境变量的组织方式</h2><p>每个<code>进程</code>都有自己的<code>环境表</code>,所谓<code>环境表</code>就是一个<strong>字符</strong><code>指针数组</code>,每个不为<code>NULL</code>的指针指向<code>环境字符串</code></p>\n<p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_20-52-19.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_20-52-19.png</a></p>\n<ul>\n<li>因此也可以使用<code>main</code>函数传参来打印所有环境变量的内容<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[],con <span class=\"type\">char</span>* env[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* str;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(str =env[i++]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"导入环境变量\"><a href=\"#导入环境变量\" class=\"headerlink\" title=\"导入环境变量\"></a>导入环境变量</h2><p>头文件<code>unistd.h&gt;</code>提供了一个全局变量<code>environ</code>,因此可以用<code>extern</code>导入环境变量</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">char</span> **environ;<span class=\"comment\">//导入换进变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* str;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(str =environ[i++]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加新的环境变量\"><a href=\"#添加新的环境变量\" class=\"headerlink\" title=\"添加新的环境变量\"></a>添加新的环境变量</h2><p>使用<code>export</code>命令可以添加新的环境变量</p>\n<p>使用方法:<code>export``=``(变量值)</code></p>\n<p>例如添加一个值为<code>supdriver666</code>,名为<code>MY_VALUE</code>的环境变量,最后查看该变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MY_VALUE=supdriver666</span><br><span class=\"line\"></span><br><span class=\"line\">env | grep MY_VALUE</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"程序内设置换进变量\"><a href=\"#程序内设置换进变量\" class=\"headerlink\" title=\"程序内设置换进变量\"></a>程序内设置换进变量</h2><p>使用<code>&lt;stdlib.h&gt;</code>提供的<code>putenv()</code>接口可以设置环境变量，用法与<code>export</code>指令相同</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    putenv(<span class=\"string\">&quot;MY_VALUE=666&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;MY_VALUE = %s&quot;</span>,getenv(<span class=\"string\">&quot;MY_VALUE&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除环境变量\"><a href=\"#删除环境变量\" class=\"headerlink\" title=\"删除环境变量\"></a>删除环境变量</h2><p>使用<code>unset</code>可以删除环境变量</p>\n<p><em>删除上文的<code>MY_VALUE</code></em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset MY_VALUE</span><br><span class=\"line\"></span><br><span class=\"line\">env | grep MY_VALUE</span><br></pre></td></tr></table></figure>\n<p>可以看到没有输出了 </p>\n<h2 id=\"添加本地shell变量-和-查看本地变量与环境变量\"><a href=\"#添加本地shell变量-和-查看本地变量与环境变量\" class=\"headerlink\" title=\"添加本地shell变量 和 查看本地变量与环境变量\"></a>添加本地shell变量 和 查看本地变量与环境变量</h2><p>添加本地变量: 直接输入<code>(变量名)``=``(值)</code>  &#x2F;&#x2F;<em>不加空格</em>&#x2F;</p>\n<p>查看变量: 使用<code>set</code>命令查看本地变量与环境变量，但是内容非常多，建议搭配<code>grep</code>等使用</p>\n<p><em>例</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_value=2024</span><br><span class=\"line\"></span><br><span class=\"line\">set</span><br><span class=\"line\"></span><br><span class=\"line\">set | grep my_value</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地变量与环境变量\"><a href=\"#本地变量与环境变量\" class=\"headerlink\" title=\"本地变量与环境变量\"></a>本地变量与环境变量</h2><p>二者最大的差别是<code>环境变量</code>可以被子进程<strong>继承</strong>,而<code>本地变量</code>只在本BASH内部有效，<strong>不会</strong>被继承</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>环境变量(environment variables)一般是指在操作系统中用来指定操作系统运行环境的一些<strong>参数</strong></li>\n<li>环境变量通常具有某些特殊用途，还有在系统当中通常具有<strong>全局特性</strong></li>\n</ul>\n<p><strong>构成</strong>：环境变量是一系列<code>字符串</code>的统称,所以一个环境变量由<code>变量名</code>和<code>值</code>构成</p>\n<p>这么说还是太抽象了，我们接下来会举几个具体样例，体会<code>环境变量</code>在获取系统全局的变量，系统指令路径等方面的作用</p>\n<h2 id=\"常见环境变量\"><a href=\"#常见环境变量\" class=\"headerlink\" title=\"常见环境变量\"></a>常见环境变量</h2><table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>PATH</code></td>\n<td>指定命令的搜索路径</td>\n</tr>\n<tr>\n<td><code>HOME</code></td>\n<td>指定用户的主工作目录(即用户登陆到Linux系统中时,默认的目录)</td>\n</tr>\n<tr>\n<td><code>USER</code></td>\n<td>当前用户名</td>\n</tr>\n<tr>\n<td><code>SHELL</code></td>\n<td>当前Shell,它的值通常是<code>/bin/bash</code></td>\n</tr>\n<tr>\n<td><code>PWD</code></td>\n<td>当前工作目录</td>\n</tr>\n</tbody></table>\n<h1 id=\"操作系统变量\"><a href=\"#操作系统变量\" class=\"headerlink\" title=\"操作系统变量\"></a>操作系统变量</h1><h2 id=\"查看环境变量\"><a href=\"#查看环境变量\" class=\"headerlink\" title=\"查看环境变量\"></a>查看环境变量</h2><p><code>echo $NAME</code> <em>NAME为变量名</em></p>\n<p>以<code>PATH</code>为例,查看<code>PATH</code>的值的指令为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_12-46-35.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_12-46-35.png</a></p>\n<p>可以看到<code>PATH</code>的内容为多个文件路径，互相以<code>:</code>分隔</p>\n<p>而若要查看当前的全部环境变量,可以使用<code>env</code>指令,将当前所有环境变量打印在终端上</p>\n<p>也可以通过<code>管道</code>和<code>grep</code>将<code>env</code>的输出内容过滤</p>\n<p><em>查看PATH</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env | grep PATH</span><br></pre></td></tr></table></figure>\n\n<p>同时还有个<code>set</code> 指令可以显示本地定义的shell变量和环境变量环境变量的组织方式 </p>\n<h2 id=\"获取进程的环境变量\"><a href=\"#获取进程的环境变量\" class=\"headerlink\" title=\"获取进程的环境变量\"></a>获取进程的环境变量</h2><ul>\n<li>在程序中，可以使用<code>getenv()</code>接口获取对应<code>环境变量名</code>的对应环境变量值</li>\n</ul>\n<p><em><code>getenv</code>在<code>&lt;stdlib.h&gt;</code>中</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;PATH: %s\\n&quot;</span>,getenv(<span class=\"string\">&quot;PATH&quot;</span>));<span class=\"comment\">//打印PATH的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"环境变量的组织方式\"><a href=\"#环境变量的组织方式\" class=\"headerlink\" title=\"环境变量的组织方式\"></a>环境变量的组织方式</h2><p>每个<code>进程</code>都有自己的<code>环境表</code>,所谓<code>环境表</code>就是一个<strong>字符</strong><code>指针数组</code>,每个不为<code>NULL</code>的指针指向<code>环境字符串</code></p>\n<p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_20-52-19.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-08_20-52-19.png</a></p>\n<ul>\n<li>因此也可以使用<code>main</code>函数传参来打印所有环境变量的内容<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[],con <span class=\"type\">char</span>* env[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* str;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(str =env[i++]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"导入环境变量\"><a href=\"#导入环境变量\" class=\"headerlink\" title=\"导入环境变量\"></a>导入环境变量</h2><p>头文件<code>unistd.h&gt;</code>提供了一个全局变量<code>environ</code>,因此可以用<code>extern</code>导入环境变量</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">char</span> **environ;<span class=\"comment\">//导入换进变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* str;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(str =environ[i++]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加新的环境变量\"><a href=\"#添加新的环境变量\" class=\"headerlink\" title=\"添加新的环境变量\"></a>添加新的环境变量</h2><p>使用<code>export</code>命令可以添加新的环境变量</p>\n<p>使用方法:<code>export``=``(变量值)</code></p>\n<p>例如添加一个值为<code>supdriver666</code>,名为<code>MY_VALUE</code>的环境变量,最后查看该变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MY_VALUE=supdriver666</span><br><span class=\"line\"></span><br><span class=\"line\">env | grep MY_VALUE</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"程序内设置换进变量\"><a href=\"#程序内设置换进变量\" class=\"headerlink\" title=\"程序内设置换进变量\"></a>程序内设置换进变量</h2><p>使用<code>&lt;stdlib.h&gt;</code>提供的<code>putenv()</code>接口可以设置环境变量，用法与<code>export</code>指令相同</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    putenv(<span class=\"string\">&quot;MY_VALUE=666&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;MY_VALUE = %s&quot;</span>,getenv(<span class=\"string\">&quot;MY_VALUE&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除环境变量\"><a href=\"#删除环境变量\" class=\"headerlink\" title=\"删除环境变量\"></a>删除环境变量</h2><p>使用<code>unset</code>可以删除环境变量</p>\n<p><em>删除上文的<code>MY_VALUE</code></em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset MY_VALUE</span><br><span class=\"line\"></span><br><span class=\"line\">env | grep MY_VALUE</span><br></pre></td></tr></table></figure>\n<p>可以看到没有输出了 </p>\n<h2 id=\"添加本地shell变量-和-查看本地变量与环境变量\"><a href=\"#添加本地shell变量-和-查看本地变量与环境变量\" class=\"headerlink\" title=\"添加本地shell变量 和 查看本地变量与环境变量\"></a>添加本地shell变量 和 查看本地变量与环境变量</h2><p>添加本地变量: 直接输入<code>(变量名)``=``(值)</code>  &#x2F;&#x2F;<em>不加空格</em>&#x2F;</p>\n<p>查看变量: 使用<code>set</code>命令查看本地变量与环境变量，但是内容非常多，建议搭配<code>grep</code>等使用</p>\n<p><em>例</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_value=2024</span><br><span class=\"line\"></span><br><span class=\"line\">set</span><br><span class=\"line\"></span><br><span class=\"line\">set | grep my_value</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地变量与环境变量\"><a href=\"#本地变量与环境变量\" class=\"headerlink\" title=\"本地变量与环境变量\"></a>本地变量与环境变量</h2><p>二者最大的差别是<code>环境变量</code>可以被子进程<strong>继承</strong>,而<code>本地变量</code>只在本BASH内部有效，<strong>不会</strong>被继承</p>\n"},{"title":"Linux文件系统","date":"2024-07-26T01:49:27.000Z","_content":"","source":"_posts/filesys.md","raw":"---\ntitle: Linux文件系统\ndate: 2024-07-26 09:49:27\ntags: Linux\n---\n","slug":"filesys","published":1,"updated":"2024-07-26T02:29:23.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv8000mv8p57s7baoky","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":""},{"title":"fork子进程,进程退出与等待","date":"2024-07-07T04:57:17.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-25_22-26-59.png","_content":"# 认识`fork()`\n头文件`<unistd.h>`提供的`fork()`函数用于从已有的`原进程`创建一个新的`子进程`，而原进程在关系式称为`父进程`\n\n## fork()的返回值\n```C\n#include <unistd.h>\npid_t id = fork();\n```\n\n父子进程中`fork()`函数的返回值(此处用变量`id`储存)是不同的:\n\n**父进程**里`id`的值为子进程的`PID`,其值`>0`;**子进程**里`id`值固定为`0`\n\n+ `id > 0` 父进程\n+ `id == 0` 子进程\n+ `id < 0` fork()失败\n\n## 分流\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_13-00-38.png\n\n利用父子进程中`fork()`返回值的不同，可以用`if...else...`进行分流，让父子进程执行不同的代码\n\n## fork()的过程\n进程调用`fork`，当控制转移到**内核**中的fork代码后，**内核**做\n\n+ 分配**新的**内存块和内核数据结构给子进程\n+ 将父进程部分数据结构内容**拷贝**至子进程\n+ 添加子进程到**系统进程列表**当中\n+ `fork`返回，开始调度器调度\n\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_18-54-41.png\n\n当一个进程调用fork之后，就有一对二进制**代码相同**的父子进程。而且它们都运行到相同的地方。但每个进程都可以**独立**地继续运行代码,并按代码分流至不同的代码段\n\n但这两个进程谁先执行**完全**由调度器决定，而谁先结束，则由实际执行情况和调度器决定\n\n## 拷贝的过程 与 写时拷贝\n`fork`时，子进程会将父进程虚拟内存的内容都复制一份在自己的虚拟内存中,但通过页表，二者映射到了同一块物理内存的区域，这样在二者都**没有写入行为**时，减少了物理内存中**冗余**的拷贝行为，有效提高了运行效率\n\n但当父子进程中有一方发生写入行为时，就会触发`写时拷贝`，此时物理内存中发生拷贝行为，但只拷贝进程映射的`数据段`，而由于**不发生进程替换时**父子进程的代码段一定相同，物理内存中,`代码段`映射部分并不发生拷贝\n\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_19-38-58.png\n\n\n# 进程退出\n\n## 进程退出的场景\n+ 代码运行完毕，结果正确\n+ 代码运行完毕，结果不正确\n+ 代码异常终止\n\n## 进程常见退出方法\n+ `main`函数返回\n+ `exit`退出\n+ `_exit`退出\n\n**异常退出**: `ctrl` + `c`\n\n## 查看退出码\n在终端使用命令`echo $?`可以查看退出码\n\n`注`尽管子进程返回的是`int`,父进程只取退出码的最低`8位`,所以以下三种情况\n\n+ `main`函数返回`-1`\n+ `exit(-1)`\n+ `_exit(-1)`\n\n在终端输`echo $?`可得退出码`255`\n\n## `exit` 和 `_eixt` 辨析\n`main`函数返回就不惜说了，来辨析一下头文件`<stdlib.h>`提供的`exit`和`_exit`函数\n\n### `_exit()`\n`_exit`会**直接终止**进程并返回状态码,而**不会**执行用户定义的清理函数，**也不会**清理缓冲区\n\n### `exit()`\n`exit`实际上最后也会调用`_exit`,但它会先执行一系列善后工作,顺序如下:\n\n1. 执行用户通过 atexit或on_exit定义的**清理函数**。\n2. 关闭所有打开的流，所有的**缓存数据**均被写入\n3. 调用`_exit`\n\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_22-10-26.png\n\n`return`退出： 执行`return n`等同于执行`exit(n)`\n\n# 进程等待\n\n## 进程等待的必要性\n+ 子进程退出后需要父进程来**回收**僵尸进程,防止产生其引发内存泄漏等问题\n+ 僵尸进程难以处理,`kill -9`也清理不掉\n+ 父进程通过进程等待的方式，**回收**子进程资源，获取子进程**退出信息**\n\n## 进程等待的方法\n\n### `wait`方法\n> #include<sys/types.h>\n> #include<sys/wait.h>\n>\n> pid_t wait(int*status);\n>\n> `参数`：显然`status`是输出型参数,获取子进程的`退出状态`,若不关心，可传参`NULL`\n>\n> `返回值`: 若**成功**，则返回被等待进程的`pid`,若**失败**，则返回`-1`\n\n### `waitpid`方法\n> 返回值：\n>    当正常返回的时候waitpid返回收集到的子进程的进程ID；\n>    如果设置了选项WNOHANG,而调用中waitpid发现没有已退出的子进程可收集,则返回0；\n>    如果调用中出错,则返回-1,这时errno会被设置成相应的值以指示错误所在；\n> \n> 参数：\n>    `pid`：\n>        `pid == -1`,等待任一个子进程。与wait等效。\n>        `pid > 0`.等待其进程ID与pid相等的子进程。\n>    `status`:\n>        输出型参数传参`&status`: 将子进程的`状态码`存入`status`\n>        以下两个宏函数用于处理`状态码`:\n>        `WIFEXITED(status)`: 若为**正常终止**子进程返回的状态，则为真。（查看进程是否是**正常退出**）\n>        `WEXITSTATUS(status)`: 若WIFEXITED非零，提取子进程`退出码`。（查看进程的`退出码`）\n>    `options`:\n>        `WNOHANG`: 若pid指定的子进程没有结束，则waitpid()函数返回0，不予以等待。若正常结束，则返回该子进程的ID。\n>        `0`: 阻塞等待指定`pid`的进程\n>\n\n#### 阻塞等待\n`option` == `0`时`waitpid`采用阻塞等待，父进程会阻塞等待到子进程退出\n\n*示例代码*\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n\nint main()\n{\n    int status;\n    pid_t id = fork();\n    if(id == 0)\n    {\n        for(int i = 1;i<=5;i++)\n        {\n            printf(\"child running [%d]s\\n\",i);\n            sleep(1);\n        }\n        printf(\"child exited\\n\");\n        exit(0);\n    }\n    else\n    {\n        waitpid(id,&status,0);\n        if(WIFEXITED(status))\n            printf(\"father wait success, exit code: %d\\n\",WEXITSTATUS(status));\n        else\n            printf(\"child failed to exit\\n\");\n    }\n    return 1;\n}\n```\n\n#### 非阻塞轮询\n`option` == `WNOHANG`时,`waitpid`采用非阻塞等待,若等不到子进程退出，就会继续执行后面的代码，所以一般加上`while`等循环用于轮询，二者共同构成`非阻塞轮询`\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n\n//非阻塞轮询\nint main()\n{\n    int status;\n    pid_t id = fork();\n    if(id == 0)\n    {\n        sleep(5);\n        printf(\"child exited\\n\");\n        exit(0);\n    }\n    else\n    {\n        while(1)//轮询\n        {\n            pid_t rid = waitpid(id,&status,WNOHANG);\n            if(rid > 0)\n            {\n                if(WIFEXITED(status))\n                    printf(\"father wait success, exit code: %d\\n\",WEXITSTATUS(status));\n                else\n                    printf(\"child failed to exit\\n\");\n\n                break;\n            }\n            else if(rid == 0)\n            {\n                printf(\"等待子进程中...\\n\");\n                sleep(1);\n            }\n            else//rid<0\n            {\n                printf(\"wait failed\\n\");\n                break;\n            }\n        }\n    }\n    return 1;\n}\n```","source":"_posts/fork.md","raw":"---\ntitle: fork子进程,进程退出与等待\ndate: 2024-07-07 12:57:17\ntags: fork Linux\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-25_22-26-59.png\n---\n# 认识`fork()`\n头文件`<unistd.h>`提供的`fork()`函数用于从已有的`原进程`创建一个新的`子进程`，而原进程在关系式称为`父进程`\n\n## fork()的返回值\n```C\n#include <unistd.h>\npid_t id = fork();\n```\n\n父子进程中`fork()`函数的返回值(此处用变量`id`储存)是不同的:\n\n**父进程**里`id`的值为子进程的`PID`,其值`>0`;**子进程**里`id`值固定为`0`\n\n+ `id > 0` 父进程\n+ `id == 0` 子进程\n+ `id < 0` fork()失败\n\n## 分流\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_13-00-38.png\n\n利用父子进程中`fork()`返回值的不同，可以用`if...else...`进行分流，让父子进程执行不同的代码\n\n## fork()的过程\n进程调用`fork`，当控制转移到**内核**中的fork代码后，**内核**做\n\n+ 分配**新的**内存块和内核数据结构给子进程\n+ 将父进程部分数据结构内容**拷贝**至子进程\n+ 添加子进程到**系统进程列表**当中\n+ `fork`返回，开始调度器调度\n\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_18-54-41.png\n\n当一个进程调用fork之后，就有一对二进制**代码相同**的父子进程。而且它们都运行到相同的地方。但每个进程都可以**独立**地继续运行代码,并按代码分流至不同的代码段\n\n但这两个进程谁先执行**完全**由调度器决定，而谁先结束，则由实际执行情况和调度器决定\n\n## 拷贝的过程 与 写时拷贝\n`fork`时，子进程会将父进程虚拟内存的内容都复制一份在自己的虚拟内存中,但通过页表，二者映射到了同一块物理内存的区域，这样在二者都**没有写入行为**时，减少了物理内存中**冗余**的拷贝行为，有效提高了运行效率\n\n但当父子进程中有一方发生写入行为时，就会触发`写时拷贝`，此时物理内存中发生拷贝行为，但只拷贝进程映射的`数据段`，而由于**不发生进程替换时**父子进程的代码段一定相同，物理内存中,`代码段`映射部分并不发生拷贝\n\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_19-38-58.png\n\n\n# 进程退出\n\n## 进程退出的场景\n+ 代码运行完毕，结果正确\n+ 代码运行完毕，结果不正确\n+ 代码异常终止\n\n## 进程常见退出方法\n+ `main`函数返回\n+ `exit`退出\n+ `_exit`退出\n\n**异常退出**: `ctrl` + `c`\n\n## 查看退出码\n在终端使用命令`echo $?`可以查看退出码\n\n`注`尽管子进程返回的是`int`,父进程只取退出码的最低`8位`,所以以下三种情况\n\n+ `main`函数返回`-1`\n+ `exit(-1)`\n+ `_exit(-1)`\n\n在终端输`echo $?`可得退出码`255`\n\n## `exit` 和 `_eixt` 辨析\n`main`函数返回就不惜说了，来辨析一下头文件`<stdlib.h>`提供的`exit`和`_exit`函数\n\n### `_exit()`\n`_exit`会**直接终止**进程并返回状态码,而**不会**执行用户定义的清理函数，**也不会**清理缓冲区\n\n### `exit()`\n`exit`实际上最后也会调用`_exit`,但它会先执行一系列善后工作,顺序如下:\n\n1. 执行用户通过 atexit或on_exit定义的**清理函数**。\n2. 关闭所有打开的流，所有的**缓存数据**均被写入\n3. 调用`_exit`\n\nhttps://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_22-10-26.png\n\n`return`退出： 执行`return n`等同于执行`exit(n)`\n\n# 进程等待\n\n## 进程等待的必要性\n+ 子进程退出后需要父进程来**回收**僵尸进程,防止产生其引发内存泄漏等问题\n+ 僵尸进程难以处理,`kill -9`也清理不掉\n+ 父进程通过进程等待的方式，**回收**子进程资源，获取子进程**退出信息**\n\n## 进程等待的方法\n\n### `wait`方法\n> #include<sys/types.h>\n> #include<sys/wait.h>\n>\n> pid_t wait(int*status);\n>\n> `参数`：显然`status`是输出型参数,获取子进程的`退出状态`,若不关心，可传参`NULL`\n>\n> `返回值`: 若**成功**，则返回被等待进程的`pid`,若**失败**，则返回`-1`\n\n### `waitpid`方法\n> 返回值：\n>    当正常返回的时候waitpid返回收集到的子进程的进程ID；\n>    如果设置了选项WNOHANG,而调用中waitpid发现没有已退出的子进程可收集,则返回0；\n>    如果调用中出错,则返回-1,这时errno会被设置成相应的值以指示错误所在；\n> \n> 参数：\n>    `pid`：\n>        `pid == -1`,等待任一个子进程。与wait等效。\n>        `pid > 0`.等待其进程ID与pid相等的子进程。\n>    `status`:\n>        输出型参数传参`&status`: 将子进程的`状态码`存入`status`\n>        以下两个宏函数用于处理`状态码`:\n>        `WIFEXITED(status)`: 若为**正常终止**子进程返回的状态，则为真。（查看进程是否是**正常退出**）\n>        `WEXITSTATUS(status)`: 若WIFEXITED非零，提取子进程`退出码`。（查看进程的`退出码`）\n>    `options`:\n>        `WNOHANG`: 若pid指定的子进程没有结束，则waitpid()函数返回0，不予以等待。若正常结束，则返回该子进程的ID。\n>        `0`: 阻塞等待指定`pid`的进程\n>\n\n#### 阻塞等待\n`option` == `0`时`waitpid`采用阻塞等待，父进程会阻塞等待到子进程退出\n\n*示例代码*\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n\nint main()\n{\n    int status;\n    pid_t id = fork();\n    if(id == 0)\n    {\n        for(int i = 1;i<=5;i++)\n        {\n            printf(\"child running [%d]s\\n\",i);\n            sleep(1);\n        }\n        printf(\"child exited\\n\");\n        exit(0);\n    }\n    else\n    {\n        waitpid(id,&status,0);\n        if(WIFEXITED(status))\n            printf(\"father wait success, exit code: %d\\n\",WEXITSTATUS(status));\n        else\n            printf(\"child failed to exit\\n\");\n    }\n    return 1;\n}\n```\n\n#### 非阻塞轮询\n`option` == `WNOHANG`时,`waitpid`采用非阻塞等待,若等不到子进程退出，就会继续执行后面的代码，所以一般加上`while`等循环用于轮询，二者共同构成`非阻塞轮询`\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n\n//非阻塞轮询\nint main()\n{\n    int status;\n    pid_t id = fork();\n    if(id == 0)\n    {\n        sleep(5);\n        printf(\"child exited\\n\");\n        exit(0);\n    }\n    else\n    {\n        while(1)//轮询\n        {\n            pid_t rid = waitpid(id,&status,WNOHANG);\n            if(rid > 0)\n            {\n                if(WIFEXITED(status))\n                    printf(\"father wait success, exit code: %d\\n\",WEXITSTATUS(status));\n                else\n                    printf(\"child failed to exit\\n\");\n\n                break;\n            }\n            else if(rid == 0)\n            {\n                printf(\"等待子进程中...\\n\");\n                sleep(1);\n            }\n            else//rid<0\n            {\n                printf(\"wait failed\\n\");\n                break;\n            }\n        }\n    }\n    return 1;\n}\n```","slug":"fork","published":1,"updated":"2024-07-25T14:27:31.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv8000ov8p5dhjw0ikv","content":"<h1 id=\"认识fork\"><a href=\"#认识fork\" class=\"headerlink\" title=\"认识fork()\"></a>认识<code>fork()</code></h1><p>头文件<code>&lt;unistd.h&gt;</code>提供的<code>fork()</code>函数用于从已有的<code>原进程</code>创建一个新的<code>子进程</code>，而原进程在关系式称为<code>父进程</code></p>\n<h2 id=\"fork-的返回值\"><a href=\"#fork-的返回值\" class=\"headerlink\" title=\"fork()的返回值\"></a>fork()的返回值</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">pid_t</span> id = fork();</span><br></pre></td></tr></table></figure>\n\n<p>父子进程中<code>fork()</code>函数的返回值(此处用变量<code>id</code>储存)是不同的:</p>\n<p><strong>父进程</strong>里<code>id</code>的值为子进程的<code>PID</code>,其值<code>&gt;0</code>;<strong>子进程</strong>里<code>id</code>值固定为<code>0</code></p>\n<ul>\n<li><code>id &gt; 0</code> 父进程</li>\n<li><code>id == 0</code> 子进程</li>\n<li><code>id &lt; 0</code> fork()失败</li>\n</ul>\n<h2 id=\"分流\"><a href=\"#分流\" class=\"headerlink\" title=\"分流\"></a>分流</h2><p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_13-00-38.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_13-00-38.png</a></p>\n<p>利用父子进程中<code>fork()</code>返回值的不同，可以用<code>if...else...</code>进行分流，让父子进程执行不同的代码</p>\n<h2 id=\"fork-的过程\"><a href=\"#fork-的过程\" class=\"headerlink\" title=\"fork()的过程\"></a>fork()的过程</h2><p>进程调用<code>fork</code>，当控制转移到<strong>内核</strong>中的fork代码后，<strong>内核</strong>做</p>\n<ul>\n<li>分配<strong>新的</strong>内存块和内核数据结构给子进程</li>\n<li>将父进程部分数据结构内容<strong>拷贝</strong>至子进程</li>\n<li>添加子进程到<strong>系统进程列表</strong>当中</li>\n<li><code>fork</code>返回，开始调度器调度</li>\n</ul>\n<p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_18-54-41.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_18-54-41.png</a></p>\n<p>当一个进程调用fork之后，就有一对二进制<strong>代码相同</strong>的父子进程。而且它们都运行到相同的地方。但每个进程都可以<strong>独立</strong>地继续运行代码,并按代码分流至不同的代码段</p>\n<p>但这两个进程谁先执行<strong>完全</strong>由调度器决定，而谁先结束，则由实际执行情况和调度器决定</p>\n<h2 id=\"拷贝的过程-与-写时拷贝\"><a href=\"#拷贝的过程-与-写时拷贝\" class=\"headerlink\" title=\"拷贝的过程 与 写时拷贝\"></a>拷贝的过程 与 写时拷贝</h2><p><code>fork</code>时，子进程会将父进程虚拟内存的内容都复制一份在自己的虚拟内存中,但通过页表，二者映射到了同一块物理内存的区域，这样在二者都<strong>没有写入行为</strong>时，减少了物理内存中<strong>冗余</strong>的拷贝行为，有效提高了运行效率</p>\n<p>但当父子进程中有一方发生写入行为时，就会触发<code>写时拷贝</code>，此时物理内存中发生拷贝行为，但只拷贝进程映射的<code>数据段</code>，而由于<strong>不发生进程替换时</strong>父子进程的代码段一定相同，物理内存中,<code>代码段</code>映射部分并不发生拷贝</p>\n<p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_19-38-58.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_19-38-58.png</a></p>\n<h1 id=\"进程退出\"><a href=\"#进程退出\" class=\"headerlink\" title=\"进程退出\"></a>进程退出</h1><h2 id=\"进程退出的场景\"><a href=\"#进程退出的场景\" class=\"headerlink\" title=\"进程退出的场景\"></a>进程退出的场景</h2><ul>\n<li>代码运行完毕，结果正确</li>\n<li>代码运行完毕，结果不正确</li>\n<li>代码异常终止</li>\n</ul>\n<h2 id=\"进程常见退出方法\"><a href=\"#进程常见退出方法\" class=\"headerlink\" title=\"进程常见退出方法\"></a>进程常见退出方法</h2><ul>\n<li><code>main</code>函数返回</li>\n<li><code>exit</code>退出</li>\n<li><code>_exit</code>退出</li>\n</ul>\n<p><strong>异常退出</strong>: <code>ctrl</code> + <code>c</code></p>\n<h2 id=\"查看退出码\"><a href=\"#查看退出码\" class=\"headerlink\" title=\"查看退出码\"></a>查看退出码</h2><p>在终端使用命令<code>echo $?</code>可以查看退出码</p>\n<p><code>注</code>尽管子进程返回的是<code>int</code>,父进程只取退出码的最低<code>8位</code>,所以以下三种情况</p>\n<ul>\n<li><code>main</code>函数返回<code>-1</code></li>\n<li><code>exit(-1)</code></li>\n<li><code>_exit(-1)</code></li>\n</ul>\n<p>在终端输<code>echo $?</code>可得退出码<code>255</code></p>\n<h2 id=\"exit-和-eixt-辨析\"><a href=\"#exit-和-eixt-辨析\" class=\"headerlink\" title=\"exit 和 _eixt 辨析\"></a><code>exit</code> 和 <code>_eixt</code> 辨析</h2><p><code>main</code>函数返回就不惜说了，来辨析一下头文件<code>&lt;stdlib.h&gt;</code>提供的<code>exit</code>和<code>_exit</code>函数</p>\n<h3 id=\"exit\"><a href=\"#exit\" class=\"headerlink\" title=\"_exit()\"></a><code>_exit()</code></h3><p><code>_exit</code>会<strong>直接终止</strong>进程并返回状态码,而<strong>不会</strong>执行用户定义的清理函数，<strong>也不会</strong>清理缓冲区</p>\n<h3 id=\"exit-1\"><a href=\"#exit-1\" class=\"headerlink\" title=\"exit()\"></a><code>exit()</code></h3><p><code>exit</code>实际上最后也会调用<code>_exit</code>,但它会先执行一系列善后工作,顺序如下:</p>\n<ol>\n<li>执行用户通过 atexit或on_exit定义的<strong>清理函数</strong>。</li>\n<li>关闭所有打开的流，所有的<strong>缓存数据</strong>均被写入</li>\n<li>调用<code>_exit</code></li>\n</ol>\n<p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_22-10-26.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_22-10-26.png</a></p>\n<p><code>return</code>退出： 执行<code>return n</code>等同于执行<code>exit(n)</code></p>\n<h1 id=\"进程等待\"><a href=\"#进程等待\" class=\"headerlink\" title=\"进程等待\"></a>进程等待</h1><h2 id=\"进程等待的必要性\"><a href=\"#进程等待的必要性\" class=\"headerlink\" title=\"进程等待的必要性\"></a>进程等待的必要性</h2><ul>\n<li>子进程退出后需要父进程来<strong>回收</strong>僵尸进程,防止产生其引发内存泄漏等问题</li>\n<li>僵尸进程难以处理,<code>kill -9</code>也清理不掉</li>\n<li>父进程通过进程等待的方式，<strong>回收</strong>子进程资源，获取子进程<strong>退出信息</strong></li>\n</ul>\n<h2 id=\"进程等待的方法\"><a href=\"#进程等待的方法\" class=\"headerlink\" title=\"进程等待的方法\"></a>进程等待的方法</h2><h3 id=\"wait方法\"><a href=\"#wait方法\" class=\"headerlink\" title=\"wait方法\"></a><code>wait</code>方法</h3><blockquote>\n<p>#include&lt;sys&#x2F;types.h&gt;<br>#include&lt;sys&#x2F;wait.h&gt;</p>\n<p>pid_t wait(int*status);</p>\n<p><code>参数</code>：显然<code>status</code>是输出型参数,获取子进程的<code>退出状态</code>,若不关心，可传参<code>NULL</code></p>\n<p><code>返回值</code>: 若<strong>成功</strong>，则返回被等待进程的<code>pid</code>,若<strong>失败</strong>，则返回<code>-1</code></p>\n</blockquote>\n<h3 id=\"waitpid方法\"><a href=\"#waitpid方法\" class=\"headerlink\" title=\"waitpid方法\"></a><code>waitpid</code>方法</h3><blockquote>\n<p>返回值：<br>   当正常返回的时候waitpid返回收集到的子进程的进程ID；<br>   如果设置了选项WNOHANG,而调用中waitpid发现没有已退出的子进程可收集,则返回0；<br>   如果调用中出错,则返回-1,这时errno会被设置成相应的值以指示错误所在；</p>\n<p>参数：<br>   <code>pid</code>：<br>       <code>pid == -1</code>,等待任一个子进程。与wait等效。<br>       <code>pid &gt; 0</code>.等待其进程ID与pid相等的子进程。<br>   <code>status</code>:<br>       输出型参数传参<code>&amp;status</code>: 将子进程的<code>状态码</code>存入<code>status</code><br>       以下两个宏函数用于处理<code>状态码</code>:<br>       <code>WIFEXITED(status)</code>: 若为<strong>正常终止</strong>子进程返回的状态，则为真。（查看进程是否是<strong>正常退出</strong>）<br>       <code>WEXITSTATUS(status)</code>: 若WIFEXITED非零，提取子进程<code>退出码</code>。（查看进程的<code>退出码</code>）<br>   <code>options</code>:<br>       <code>WNOHANG</code>: 若pid指定的子进程没有结束，则waitpid()函数返回0，不予以等待。若正常结束，则返回该子进程的ID。<br>       <code>0</code>: 阻塞等待指定<code>pid</code>的进程</p>\n</blockquote>\n<h4 id=\"阻塞等待\"><a href=\"#阻塞等待\" class=\"headerlink\" title=\"阻塞等待\"></a>阻塞等待</h4><p><code>option</code> &#x3D;&#x3D; <code>0</code>时<code>waitpid</code>采用阻塞等待，父进程会阻塞等待到子进程退出</p>\n<p><em>示例代码</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> status;</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child running [%d]s\\n&quot;</span>,i);</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child exited\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waitpid(id,&amp;status,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(WIFEXITED(status))</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father wait success, exit code: %d\\n&quot;</span>,WEXITSTATUS(status));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child failed to exit\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"非阻塞轮询\"><a href=\"#非阻塞轮询\" class=\"headerlink\" title=\"非阻塞轮询\"></a>非阻塞轮询</h4><p><code>option</code> &#x3D;&#x3D; <code>WNOHANG</code>时,<code>waitpid</code>采用非阻塞等待,若等不到子进程退出，就会继续执行后面的代码，所以一般加上<code>while</code>等循环用于轮询，二者共同构成<code>非阻塞轮询</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//非阻塞轮询</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> status;</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child exited\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)<span class=\"comment\">//轮询</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">pid_t</span> rid = waitpid(id,&amp;status,WNOHANG);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rid &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(WIFEXITED(status))</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father wait success, exit code: %d\\n&quot;</span>,WEXITSTATUS(status));</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child failed to exit\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rid == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;等待子进程中...\\n&quot;</span>);</span><br><span class=\"line\">                sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span><span class=\"comment\">//rid&lt;0</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;wait failed\\n&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"认识fork\"><a href=\"#认识fork\" class=\"headerlink\" title=\"认识fork()\"></a>认识<code>fork()</code></h1><p>头文件<code>&lt;unistd.h&gt;</code>提供的<code>fork()</code>函数用于从已有的<code>原进程</code>创建一个新的<code>子进程</code>，而原进程在关系式称为<code>父进程</code></p>\n<h2 id=\"fork-的返回值\"><a href=\"#fork-的返回值\" class=\"headerlink\" title=\"fork()的返回值\"></a>fork()的返回值</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">pid_t</span> id = fork();</span><br></pre></td></tr></table></figure>\n\n<p>父子进程中<code>fork()</code>函数的返回值(此处用变量<code>id</code>储存)是不同的:</p>\n<p><strong>父进程</strong>里<code>id</code>的值为子进程的<code>PID</code>,其值<code>&gt;0</code>;<strong>子进程</strong>里<code>id</code>值固定为<code>0</code></p>\n<ul>\n<li><code>id &gt; 0</code> 父进程</li>\n<li><code>id == 0</code> 子进程</li>\n<li><code>id &lt; 0</code> fork()失败</li>\n</ul>\n<h2 id=\"分流\"><a href=\"#分流\" class=\"headerlink\" title=\"分流\"></a>分流</h2><p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_13-00-38.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_13-00-38.png</a></p>\n<p>利用父子进程中<code>fork()</code>返回值的不同，可以用<code>if...else...</code>进行分流，让父子进程执行不同的代码</p>\n<h2 id=\"fork-的过程\"><a href=\"#fork-的过程\" class=\"headerlink\" title=\"fork()的过程\"></a>fork()的过程</h2><p>进程调用<code>fork</code>，当控制转移到<strong>内核</strong>中的fork代码后，<strong>内核</strong>做</p>\n<ul>\n<li>分配<strong>新的</strong>内存块和内核数据结构给子进程</li>\n<li>将父进程部分数据结构内容<strong>拷贝</strong>至子进程</li>\n<li>添加子进程到<strong>系统进程列表</strong>当中</li>\n<li><code>fork</code>返回，开始调度器调度</li>\n</ul>\n<p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_18-54-41.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_18-54-41.png</a></p>\n<p>当一个进程调用fork之后，就有一对二进制<strong>代码相同</strong>的父子进程。而且它们都运行到相同的地方。但每个进程都可以<strong>独立</strong>地继续运行代码,并按代码分流至不同的代码段</p>\n<p>但这两个进程谁先执行<strong>完全</strong>由调度器决定，而谁先结束，则由实际执行情况和调度器决定</p>\n<h2 id=\"拷贝的过程-与-写时拷贝\"><a href=\"#拷贝的过程-与-写时拷贝\" class=\"headerlink\" title=\"拷贝的过程 与 写时拷贝\"></a>拷贝的过程 与 写时拷贝</h2><p><code>fork</code>时，子进程会将父进程虚拟内存的内容都复制一份在自己的虚拟内存中,但通过页表，二者映射到了同一块物理内存的区域，这样在二者都<strong>没有写入行为</strong>时，减少了物理内存中<strong>冗余</strong>的拷贝行为，有效提高了运行效率</p>\n<p>但当父子进程中有一方发生写入行为时，就会触发<code>写时拷贝</code>，此时物理内存中发生拷贝行为，但只拷贝进程映射的<code>数据段</code>，而由于<strong>不发生进程替换时</strong>父子进程的代码段一定相同，物理内存中,<code>代码段</code>映射部分并不发生拷贝</p>\n<p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_19-38-58.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_19-38-58.png</a></p>\n<h1 id=\"进程退出\"><a href=\"#进程退出\" class=\"headerlink\" title=\"进程退出\"></a>进程退出</h1><h2 id=\"进程退出的场景\"><a href=\"#进程退出的场景\" class=\"headerlink\" title=\"进程退出的场景\"></a>进程退出的场景</h2><ul>\n<li>代码运行完毕，结果正确</li>\n<li>代码运行完毕，结果不正确</li>\n<li>代码异常终止</li>\n</ul>\n<h2 id=\"进程常见退出方法\"><a href=\"#进程常见退出方法\" class=\"headerlink\" title=\"进程常见退出方法\"></a>进程常见退出方法</h2><ul>\n<li><code>main</code>函数返回</li>\n<li><code>exit</code>退出</li>\n<li><code>_exit</code>退出</li>\n</ul>\n<p><strong>异常退出</strong>: <code>ctrl</code> + <code>c</code></p>\n<h2 id=\"查看退出码\"><a href=\"#查看退出码\" class=\"headerlink\" title=\"查看退出码\"></a>查看退出码</h2><p>在终端使用命令<code>echo $?</code>可以查看退出码</p>\n<p><code>注</code>尽管子进程返回的是<code>int</code>,父进程只取退出码的最低<code>8位</code>,所以以下三种情况</p>\n<ul>\n<li><code>main</code>函数返回<code>-1</code></li>\n<li><code>exit(-1)</code></li>\n<li><code>_exit(-1)</code></li>\n</ul>\n<p>在终端输<code>echo $?</code>可得退出码<code>255</code></p>\n<h2 id=\"exit-和-eixt-辨析\"><a href=\"#exit-和-eixt-辨析\" class=\"headerlink\" title=\"exit 和 _eixt 辨析\"></a><code>exit</code> 和 <code>_eixt</code> 辨析</h2><p><code>main</code>函数返回就不惜说了，来辨析一下头文件<code>&lt;stdlib.h&gt;</code>提供的<code>exit</code>和<code>_exit</code>函数</p>\n<h3 id=\"exit\"><a href=\"#exit\" class=\"headerlink\" title=\"_exit()\"></a><code>_exit()</code></h3><p><code>_exit</code>会<strong>直接终止</strong>进程并返回状态码,而<strong>不会</strong>执行用户定义的清理函数，<strong>也不会</strong>清理缓冲区</p>\n<h3 id=\"exit-1\"><a href=\"#exit-1\" class=\"headerlink\" title=\"exit()\"></a><code>exit()</code></h3><p><code>exit</code>实际上最后也会调用<code>_exit</code>,但它会先执行一系列善后工作,顺序如下:</p>\n<ol>\n<li>执行用户通过 atexit或on_exit定义的<strong>清理函数</strong>。</li>\n<li>关闭所有打开的流，所有的<strong>缓存数据</strong>均被写入</li>\n<li>调用<code>_exit</code></li>\n</ol>\n<p><a href=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_22-10-26.png\">https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-09_22-10-26.png</a></p>\n<p><code>return</code>退出： 执行<code>return n</code>等同于执行<code>exit(n)</code></p>\n<h1 id=\"进程等待\"><a href=\"#进程等待\" class=\"headerlink\" title=\"进程等待\"></a>进程等待</h1><h2 id=\"进程等待的必要性\"><a href=\"#进程等待的必要性\" class=\"headerlink\" title=\"进程等待的必要性\"></a>进程等待的必要性</h2><ul>\n<li>子进程退出后需要父进程来<strong>回收</strong>僵尸进程,防止产生其引发内存泄漏等问题</li>\n<li>僵尸进程难以处理,<code>kill -9</code>也清理不掉</li>\n<li>父进程通过进程等待的方式，<strong>回收</strong>子进程资源，获取子进程<strong>退出信息</strong></li>\n</ul>\n<h2 id=\"进程等待的方法\"><a href=\"#进程等待的方法\" class=\"headerlink\" title=\"进程等待的方法\"></a>进程等待的方法</h2><h3 id=\"wait方法\"><a href=\"#wait方法\" class=\"headerlink\" title=\"wait方法\"></a><code>wait</code>方法</h3><blockquote>\n<p>#include&lt;sys&#x2F;types.h&gt;<br>#include&lt;sys&#x2F;wait.h&gt;</p>\n<p>pid_t wait(int*status);</p>\n<p><code>参数</code>：显然<code>status</code>是输出型参数,获取子进程的<code>退出状态</code>,若不关心，可传参<code>NULL</code></p>\n<p><code>返回值</code>: 若<strong>成功</strong>，则返回被等待进程的<code>pid</code>,若<strong>失败</strong>，则返回<code>-1</code></p>\n</blockquote>\n<h3 id=\"waitpid方法\"><a href=\"#waitpid方法\" class=\"headerlink\" title=\"waitpid方法\"></a><code>waitpid</code>方法</h3><blockquote>\n<p>返回值：<br>   当正常返回的时候waitpid返回收集到的子进程的进程ID；<br>   如果设置了选项WNOHANG,而调用中waitpid发现没有已退出的子进程可收集,则返回0；<br>   如果调用中出错,则返回-1,这时errno会被设置成相应的值以指示错误所在；</p>\n<p>参数：<br>   <code>pid</code>：<br>       <code>pid == -1</code>,等待任一个子进程。与wait等效。<br>       <code>pid &gt; 0</code>.等待其进程ID与pid相等的子进程。<br>   <code>status</code>:<br>       输出型参数传参<code>&amp;status</code>: 将子进程的<code>状态码</code>存入<code>status</code><br>       以下两个宏函数用于处理<code>状态码</code>:<br>       <code>WIFEXITED(status)</code>: 若为<strong>正常终止</strong>子进程返回的状态，则为真。（查看进程是否是<strong>正常退出</strong>）<br>       <code>WEXITSTATUS(status)</code>: 若WIFEXITED非零，提取子进程<code>退出码</code>。（查看进程的<code>退出码</code>）<br>   <code>options</code>:<br>       <code>WNOHANG</code>: 若pid指定的子进程没有结束，则waitpid()函数返回0，不予以等待。若正常结束，则返回该子进程的ID。<br>       <code>0</code>: 阻塞等待指定<code>pid</code>的进程</p>\n</blockquote>\n<h4 id=\"阻塞等待\"><a href=\"#阻塞等待\" class=\"headerlink\" title=\"阻塞等待\"></a>阻塞等待</h4><p><code>option</code> &#x3D;&#x3D; <code>0</code>时<code>waitpid</code>采用阻塞等待，父进程会阻塞等待到子进程退出</p>\n<p><em>示例代码</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> status;</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child running [%d]s\\n&quot;</span>,i);</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child exited\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waitpid(id,&amp;status,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(WIFEXITED(status))</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father wait success, exit code: %d\\n&quot;</span>,WEXITSTATUS(status));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child failed to exit\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"非阻塞轮询\"><a href=\"#非阻塞轮询\" class=\"headerlink\" title=\"非阻塞轮询\"></a>非阻塞轮询</h4><p><code>option</code> &#x3D;&#x3D; <code>WNOHANG</code>时,<code>waitpid</code>采用非阻塞等待,若等不到子进程退出，就会继续执行后面的代码，所以一般加上<code>while</code>等循环用于轮询，二者共同构成<code>非阻塞轮询</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//非阻塞轮询</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> status;</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child exited\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)<span class=\"comment\">//轮询</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">pid_t</span> rid = waitpid(id,&amp;status,WNOHANG);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rid &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(WIFEXITED(status))</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father wait success, exit code: %d\\n&quot;</span>,WEXITSTATUS(status));</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child failed to exit\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rid == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;等待子进程中...\\n&quot;</span>);</span><br><span class=\"line\">                sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span><span class=\"comment\">//rid&lt;0</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;wait failed\\n&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"堆排序","date":"2024-05-21T04:26:10.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/heapsort.png","_content":"# 背景知识\n- 知道什么是大堆/小堆\n- 掌握如何将数组与完全二叉树的映射关系\n- 掌握`向上调整法`和`向下调整法`\n\n## 大堆/小堆\n大堆的特性:每一个节点的值都比左右孩子都大,`根`的值是整个大堆中**最大的**\n小堆的特性:每一个节点的值都比左右孩子都小,`根`的值是整个大堆中**最小的**\n\n**后面以大堆为例**\n\n## 数组映射成完全二叉树\n任何一个数组可以看成一个`完全二叉树`,下标0为二叉树的根\n\n而非常方便的是，已知一个节点的下标，可以利用数学关系求出根或孩子的下标\n\n>下标关系如下（变量均为下标）\n\n- `parent = (child-1)/2`\n- `left_child = parent*2+1`\n- `right_child = parent*2+2`\n\n## 建堆方法\n### 向上调整法\n在已有一个大堆的**前提下**,把一个新的数据插入到堆的最后一个节点(此时破坏大堆的结构),再**一路**向上调整,可以重新建堆\n\n```C++\ntemplate<class T>\nvoid adjust_up(vector<T>& arr, int child)\n{\n\tint parent = (child - 1) / 2;\n\twhile (parent != child)//parent == child == 0时\n\t{\n\t\tif (arr[parent] < arr[child])//不满足大堆\n\t\t{\n\t\t\tswap(arr[parent], arr[child]);//交换\n\t\t\tchild = parent;//继续向上调整,迭代child和parent\n\t\t\tparent = (child - 1) / 2;\n\t\t}\n\t\telse//完成建堆，退出循环\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\n### 向下调整法\n在已有一个大堆的**前提下**,把根的值改变(此时破坏大堆的结构),再**一路**向下调整，可以重新建堆\n\n上一句也可以等价于,左子树和右子树都是大堆的前提下，将根**一路**向下调整，可以重新建堆\n\n```C++\ntemplate<class T>\nvoid adjust_down(vector<T>& arr,int sz , int parent)\n{\n\tint child = parent * 2 + 1;\n\tif (child + 1 < sz && arr[child + 1] > arr[child]) child++;//取较大的孩子\n\n\twhile (child < sz)\n\t{\n\t\tif (arr[parent] < arr[child])\n\t\t{\n\t\t\tswap(arr[parent], arr[child]);\n\t\t\tparent = child;\n\t\t\tint child = parent * 2 + 1;\n\t\t\tif (child >= sz) break;\n\t\t\tif (child + 1 < sz && arr[child + 1] > arr[child]) child++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\n# 主要思路\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_12-40-09.png)\n\n## 建堆\n用`向上调整法`和`向下调整法`都能建堆,不过`向上调整法`建堆思路更简单，也更容易代码实现，只需要把第一个元素当成现成的大堆，然后逐个插入并向上调整。**也就是说只需要写一个循环**\n```C++\n//向上调整法建堆\nfor (int i = 1; i < sz; i++)\n{\n    adjust_up(arr, i);//逐个插入并向上调整建堆\n}\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-45-09.png)\n\n## 排序\n此时的排序有个特点，那就是我们要**倒着排**\n\n尽管此时数组的第一个元素为`最大值`,似乎只需要把它放在那，整一个`降序`排列，再把剩下的元素建个堆，确定第二大的数...**但是**，此时有个很大的问题，当把剩下的元素看作堆时，会发现前面建堆留下来的关系全被打乱了(原本父子关系,兄弟关系乱套了),也就是说要`完全重新建堆`,极大地浪费了第一次建堆所建立的关系\n\n所以我们要尽可能`保留`原来的堆,既然把下标`0`处的节点除外会极大地影响堆的关系，那就改成把`最后一个叶子节点`除外,这样对原来的堆几乎没有改变。\n\n但建堆选出的`最大的`的值在根处,所以把`根`和`最后一个叶子节点`交换，**交换后**,此时**待排序**的数中的`最大值`以完成排序（即倒着排）,把`最后一个叶子节点`从堆中除外,再从`根`开始一路向下调整即可重新`建堆`,如此循环\n\n```C++\n\tfor (int i = sz-1; i >= 1; i--)//利用i的减小将已排序的元素逐个除外\n\t{\n\t\tswap(arr[0], arr[i]);//选出最大的元素放在末尾\n\t\tadjust_down(arr,i,0);//向下调整建堆,待排序的（待建堆的）数的个数为i,逐个减小\n\t}\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-45-22.png)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-47-20.png)\n\n正因为实际上排序时是**倒着排**的,所以当我们要排序时：\n\n- 升序->`大堆`\n- 降序->`小堆`\n\n\n\n# 全部代码\n```C++\n#include <vector>\nusing namespace std;\n\ntemplate<class T>\nvoid adjust_up(vector<T>& arr, int child)\n{\n\tint parent = (child - 1) / 2;\n\twhile (parent != child)//parent == child == 0时\n\t{\n\t\tif (arr[parent] < arr[child])//不满足大堆\n\t\t{\n\t\t\tswap(arr[parent], arr[child]);//交换\n\t\t\tchild = parent;//继续向上调整,迭代child和parent\n\t\t\tparent = (child - 1) / 2;\n\t\t}\n\t\telse//完成建堆，退出循环\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\ntemplate<class T>\nvoid adjust_down(vector<T>& arr,int sz , int parent)\n{\n\tint child = parent * 2 + 1;\n\tif (child + 1 < sz && arr[child + 1] > arr[child]) child++;//取较大的孩子\n\n\twhile (child < sz)\n\t{\n\t\tif (arr[parent] < arr[child])\n\t\t{\n\t\t\tswap(arr[parent], arr[child]);\n\t\t\tparent = child;\n\t\t\tint child = parent * 2 + 1;\n\t\t\tif (child >= sz) break;\n\t\t\tif (child + 1 < sz && arr[child + 1] > arr[child]) child++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\ntemplate <class T>\nvoid heap_sort(vector<T>& arr)\n{\n\tint sz = arr.size();\n\n\t//建堆\n\tfor (int i = 1; i < sz; i++)\n\t{\n\t\tadjust_up(arr, i);//逐个插入并向上调整建堆\n\t}\n\n\tfor (int i = sz-1; i >= 1; i--)\n\t{\n\t\tswap(arr[0], arr[i]);//选出最大的元素放在末尾\n\t\tadjust_down(arr,i,0);//向下调整建堆\n\t}\n}\n```","source":"_posts/heap-sort.md","raw":"---\ntitle: 堆排序\ndate: 2024-05-21 12:26:10\ntags: 七大排序 堆排序 排序\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/heapsort.png\n---\n# 背景知识\n- 知道什么是大堆/小堆\n- 掌握如何将数组与完全二叉树的映射关系\n- 掌握`向上调整法`和`向下调整法`\n\n## 大堆/小堆\n大堆的特性:每一个节点的值都比左右孩子都大,`根`的值是整个大堆中**最大的**\n小堆的特性:每一个节点的值都比左右孩子都小,`根`的值是整个大堆中**最小的**\n\n**后面以大堆为例**\n\n## 数组映射成完全二叉树\n任何一个数组可以看成一个`完全二叉树`,下标0为二叉树的根\n\n而非常方便的是，已知一个节点的下标，可以利用数学关系求出根或孩子的下标\n\n>下标关系如下（变量均为下标）\n\n- `parent = (child-1)/2`\n- `left_child = parent*2+1`\n- `right_child = parent*2+2`\n\n## 建堆方法\n### 向上调整法\n在已有一个大堆的**前提下**,把一个新的数据插入到堆的最后一个节点(此时破坏大堆的结构),再**一路**向上调整,可以重新建堆\n\n```C++\ntemplate<class T>\nvoid adjust_up(vector<T>& arr, int child)\n{\n\tint parent = (child - 1) / 2;\n\twhile (parent != child)//parent == child == 0时\n\t{\n\t\tif (arr[parent] < arr[child])//不满足大堆\n\t\t{\n\t\t\tswap(arr[parent], arr[child]);//交换\n\t\t\tchild = parent;//继续向上调整,迭代child和parent\n\t\t\tparent = (child - 1) / 2;\n\t\t}\n\t\telse//完成建堆，退出循环\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\n### 向下调整法\n在已有一个大堆的**前提下**,把根的值改变(此时破坏大堆的结构),再**一路**向下调整，可以重新建堆\n\n上一句也可以等价于,左子树和右子树都是大堆的前提下，将根**一路**向下调整，可以重新建堆\n\n```C++\ntemplate<class T>\nvoid adjust_down(vector<T>& arr,int sz , int parent)\n{\n\tint child = parent * 2 + 1;\n\tif (child + 1 < sz && arr[child + 1] > arr[child]) child++;//取较大的孩子\n\n\twhile (child < sz)\n\t{\n\t\tif (arr[parent] < arr[child])\n\t\t{\n\t\t\tswap(arr[parent], arr[child]);\n\t\t\tparent = child;\n\t\t\tint child = parent * 2 + 1;\n\t\t\tif (child >= sz) break;\n\t\t\tif (child + 1 < sz && arr[child + 1] > arr[child]) child++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\n# 主要思路\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_12-40-09.png)\n\n## 建堆\n用`向上调整法`和`向下调整法`都能建堆,不过`向上调整法`建堆思路更简单，也更容易代码实现，只需要把第一个元素当成现成的大堆，然后逐个插入并向上调整。**也就是说只需要写一个循环**\n```C++\n//向上调整法建堆\nfor (int i = 1; i < sz; i++)\n{\n    adjust_up(arr, i);//逐个插入并向上调整建堆\n}\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-45-09.png)\n\n## 排序\n此时的排序有个特点，那就是我们要**倒着排**\n\n尽管此时数组的第一个元素为`最大值`,似乎只需要把它放在那，整一个`降序`排列，再把剩下的元素建个堆，确定第二大的数...**但是**，此时有个很大的问题，当把剩下的元素看作堆时，会发现前面建堆留下来的关系全被打乱了(原本父子关系,兄弟关系乱套了),也就是说要`完全重新建堆`,极大地浪费了第一次建堆所建立的关系\n\n所以我们要尽可能`保留`原来的堆,既然把下标`0`处的节点除外会极大地影响堆的关系，那就改成把`最后一个叶子节点`除外,这样对原来的堆几乎没有改变。\n\n但建堆选出的`最大的`的值在根处,所以把`根`和`最后一个叶子节点`交换，**交换后**,此时**待排序**的数中的`最大值`以完成排序（即倒着排）,把`最后一个叶子节点`从堆中除外,再从`根`开始一路向下调整即可重新`建堆`,如此循环\n\n```C++\n\tfor (int i = sz-1; i >= 1; i--)//利用i的减小将已排序的元素逐个除外\n\t{\n\t\tswap(arr[0], arr[i]);//选出最大的元素放在末尾\n\t\tadjust_down(arr,i,0);//向下调整建堆,待排序的（待建堆的）数的个数为i,逐个减小\n\t}\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-45-22.png)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-47-20.png)\n\n正因为实际上排序时是**倒着排**的,所以当我们要排序时：\n\n- 升序->`大堆`\n- 降序->`小堆`\n\n\n\n# 全部代码\n```C++\n#include <vector>\nusing namespace std;\n\ntemplate<class T>\nvoid adjust_up(vector<T>& arr, int child)\n{\n\tint parent = (child - 1) / 2;\n\twhile (parent != child)//parent == child == 0时\n\t{\n\t\tif (arr[parent] < arr[child])//不满足大堆\n\t\t{\n\t\t\tswap(arr[parent], arr[child]);//交换\n\t\t\tchild = parent;//继续向上调整,迭代child和parent\n\t\t\tparent = (child - 1) / 2;\n\t\t}\n\t\telse//完成建堆，退出循环\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\ntemplate<class T>\nvoid adjust_down(vector<T>& arr,int sz , int parent)\n{\n\tint child = parent * 2 + 1;\n\tif (child + 1 < sz && arr[child + 1] > arr[child]) child++;//取较大的孩子\n\n\twhile (child < sz)\n\t{\n\t\tif (arr[parent] < arr[child])\n\t\t{\n\t\t\tswap(arr[parent], arr[child]);\n\t\t\tparent = child;\n\t\t\tint child = parent * 2 + 1;\n\t\t\tif (child >= sz) break;\n\t\t\tif (child + 1 < sz && arr[child + 1] > arr[child]) child++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\ntemplate <class T>\nvoid heap_sort(vector<T>& arr)\n{\n\tint sz = arr.size();\n\n\t//建堆\n\tfor (int i = 1; i < sz; i++)\n\t{\n\t\tadjust_up(arr, i);//逐个插入并向上调整建堆\n\t}\n\n\tfor (int i = sz-1; i >= 1; i--)\n\t{\n\t\tswap(arr[0], arr[i]);//选出最大的元素放在末尾\n\t\tadjust_down(arr,i,0);//向下调整建堆\n\t}\n}\n```","slug":"heap-sort","published":1,"updated":"2024-05-21T15:21:32.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv9000qv8p5erei19ri","content":"<h1 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h1><ul>\n<li>知道什么是大堆&#x2F;小堆</li>\n<li>掌握如何将数组与完全二叉树的映射关系</li>\n<li>掌握<code>向上调整法</code>和<code>向下调整法</code></li>\n</ul>\n<h2 id=\"大堆-小堆\"><a href=\"#大堆-小堆\" class=\"headerlink\" title=\"大堆&#x2F;小堆\"></a>大堆&#x2F;小堆</h2><p>大堆的特性:每一个节点的值都比左右孩子都大,<code>根</code>的值是整个大堆中<strong>最大的</strong><br>小堆的特性:每一个节点的值都比左右孩子都小,<code>根</code>的值是整个大堆中<strong>最小的</strong></p>\n<p><strong>后面以大堆为例</strong></p>\n<h2 id=\"数组映射成完全二叉树\"><a href=\"#数组映射成完全二叉树\" class=\"headerlink\" title=\"数组映射成完全二叉树\"></a>数组映射成完全二叉树</h2><p>任何一个数组可以看成一个<code>完全二叉树</code>,下标0为二叉树的根</p>\n<p>而非常方便的是，已知一个节点的下标，可以利用数学关系求出根或孩子的下标</p>\n<blockquote>\n<p>下标关系如下（变量均为下标）</p>\n</blockquote>\n<ul>\n<li><code>parent = (child-1)/2</code></li>\n<li><code>left_child = parent*2+1</code></li>\n<li><code>right_child = parent*2+2</code></li>\n</ul>\n<h2 id=\"建堆方法\"><a href=\"#建堆方法\" class=\"headerlink\" title=\"建堆方法\"></a>建堆方法</h2><h3 id=\"向上调整法\"><a href=\"#向上调整法\" class=\"headerlink\" title=\"向上调整法\"></a>向上调整法</h3><p>在已有一个大堆的<strong>前提下</strong>,把一个新的数据插入到堆的最后一个节点(此时破坏大堆的结构),再<strong>一路</strong>向上调整,可以重新建堆</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">adjust_up</span><span class=\"params\">(vector&lt;T&gt;&amp; arr, <span class=\"type\">int</span> child)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> parent = (child - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (parent != child)<span class=\"comment\">//parent == child == 0时</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[parent] &lt; arr[child])<span class=\"comment\">//不满足大堆</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(arr[parent], arr[child]);<span class=\"comment\">//交换</span></span><br><span class=\"line\">\t\t\tchild = parent;<span class=\"comment\">//继续向上调整,迭代child和parent</span></span><br><span class=\"line\">\t\t\tparent = (child - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span><span class=\"comment\">//完成建堆，退出循环</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"向下调整法\"><a href=\"#向下调整法\" class=\"headerlink\" title=\"向下调整法\"></a>向下调整法</h3><p>在已有一个大堆的<strong>前提下</strong>,把根的值改变(此时破坏大堆的结构),再<strong>一路</strong>向下调整，可以重新建堆</p>\n<p>上一句也可以等价于,左子树和右子树都是大堆的前提下，将根<strong>一路</strong>向下调整，可以重新建堆</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">adjust_down</span><span class=\"params\">(vector&lt;T&gt;&amp; arr,<span class=\"type\">int</span> sz , <span class=\"type\">int</span> parent)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> child = parent * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (child + <span class=\"number\">1</span> &lt; sz &amp;&amp; arr[child + <span class=\"number\">1</span>] &gt; arr[child]) child++;<span class=\"comment\">//取较大的孩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (child &lt; sz)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[parent] &lt; arr[child])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(arr[parent], arr[child]);</span><br><span class=\"line\">\t\t\tparent = child;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> child = parent * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (child &gt;= sz) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (child + <span class=\"number\">1</span> &lt; sz &amp;&amp; arr[child + <span class=\"number\">1</span>] &gt; arr[child]) child++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"主要思路\"><a href=\"#主要思路\" class=\"headerlink\" title=\"主要思路\"></a>主要思路</h1><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_12-40-09.png\"></p>\n<h2 id=\"建堆\"><a href=\"#建堆\" class=\"headerlink\" title=\"建堆\"></a>建堆</h2><p>用<code>向上调整法</code>和<code>向下调整法</code>都能建堆,不过<code>向上调整法</code>建堆思路更简单，也更容易代码实现，只需要把第一个元素当成现成的大堆，然后逐个插入并向上调整。<strong>也就是说只需要写一个循环</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向上调整法建堆</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; sz; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">adjust_up</span>(arr, i);<span class=\"comment\">//逐个插入并向上调整建堆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-45-09.png\"></p>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><p>此时的排序有个特点，那就是我们要<strong>倒着排</strong></p>\n<p>尽管此时数组的第一个元素为<code>最大值</code>,似乎只需要把它放在那，整一个<code>降序</code>排列，再把剩下的元素建个堆，确定第二大的数…<strong>但是</strong>，此时有个很大的问题，当把剩下的元素看作堆时，会发现前面建堆留下来的关系全被打乱了(原本父子关系,兄弟关系乱套了),也就是说要<code>完全重新建堆</code>,极大地浪费了第一次建堆所建立的关系</p>\n<p>所以我们要尽可能<code>保留</code>原来的堆,既然把下标<code>0</code>处的节点除外会极大地影响堆的关系，那就改成把<code>最后一个叶子节点</code>除外,这样对原来的堆几乎没有改变。</p>\n<p>但建堆选出的<code>最大的</code>的值在根处,所以把<code>根</code>和<code>最后一个叶子节点</code>交换，<strong>交换后</strong>,此时<strong>待排序</strong>的数中的<code>最大值</code>以完成排序（即倒着排）,把<code>最后一个叶子节点</code>从堆中除外,再从<code>根</code>开始一路向下调整即可重新<code>建堆</code>,如此循环</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = sz<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">1</span>; i--)<span class=\"comment\">//利用i的减小将已排序的元素逐个除外</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(arr[<span class=\"number\">0</span>], arr[i]);<span class=\"comment\">//选出最大的元素放在末尾</span></span><br><span class=\"line\">\t<span class=\"built_in\">adjust_down</span>(arr,i,<span class=\"number\">0</span>);<span class=\"comment\">//向下调整建堆,待排序的（待建堆的）数的个数为i,逐个减小</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-45-22.png\"></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-47-20.png\"></p>\n<p>正因为实际上排序时是<strong>倒着排</strong>的,所以当我们要排序时：</p>\n<ul>\n<li>升序-&gt;<code>大堆</code></li>\n<li>降序-&gt;<code>小堆</code></li>\n</ul>\n<h1 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">adjust_up</span><span class=\"params\">(vector&lt;T&gt;&amp; arr, <span class=\"type\">int</span> child)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> parent = (child - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (parent != child)<span class=\"comment\">//parent == child == 0时</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[parent] &lt; arr[child])<span class=\"comment\">//不满足大堆</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(arr[parent], arr[child]);<span class=\"comment\">//交换</span></span><br><span class=\"line\">\t\t\tchild = parent;<span class=\"comment\">//继续向上调整,迭代child和parent</span></span><br><span class=\"line\">\t\t\tparent = (child - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span><span class=\"comment\">//完成建堆，退出循环</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">adjust_down</span><span class=\"params\">(vector&lt;T&gt;&amp; arr,<span class=\"type\">int</span> sz , <span class=\"type\">int</span> parent)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> child = parent * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (child + <span class=\"number\">1</span> &lt; sz &amp;&amp; arr[child + <span class=\"number\">1</span>] &gt; arr[child]) child++;<span class=\"comment\">//取较大的孩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (child &lt; sz)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[parent] &lt; arr[child])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(arr[parent], arr[child]);</span><br><span class=\"line\">\t\t\tparent = child;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> child = parent * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (child &gt;= sz) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (child + <span class=\"number\">1</span> &lt; sz &amp;&amp; arr[child + <span class=\"number\">1</span>] &gt; arr[child]) child++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">heap_sort</span><span class=\"params\">(vector&lt;T&gt;&amp; arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sz = arr.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//建堆</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; sz; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">adjust_up</span>(arr, i);<span class=\"comment\">//逐个插入并向上调整建堆</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = sz<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>(arr[<span class=\"number\">0</span>], arr[i]);<span class=\"comment\">//选出最大的元素放在末尾</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">adjust_down</span>(arr,i,<span class=\"number\">0</span>);<span class=\"comment\">//向下调整建堆</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h1><ul>\n<li>知道什么是大堆&#x2F;小堆</li>\n<li>掌握如何将数组与完全二叉树的映射关系</li>\n<li>掌握<code>向上调整法</code>和<code>向下调整法</code></li>\n</ul>\n<h2 id=\"大堆-小堆\"><a href=\"#大堆-小堆\" class=\"headerlink\" title=\"大堆&#x2F;小堆\"></a>大堆&#x2F;小堆</h2><p>大堆的特性:每一个节点的值都比左右孩子都大,<code>根</code>的值是整个大堆中<strong>最大的</strong><br>小堆的特性:每一个节点的值都比左右孩子都小,<code>根</code>的值是整个大堆中<strong>最小的</strong></p>\n<p><strong>后面以大堆为例</strong></p>\n<h2 id=\"数组映射成完全二叉树\"><a href=\"#数组映射成完全二叉树\" class=\"headerlink\" title=\"数组映射成完全二叉树\"></a>数组映射成完全二叉树</h2><p>任何一个数组可以看成一个<code>完全二叉树</code>,下标0为二叉树的根</p>\n<p>而非常方便的是，已知一个节点的下标，可以利用数学关系求出根或孩子的下标</p>\n<blockquote>\n<p>下标关系如下（变量均为下标）</p>\n</blockquote>\n<ul>\n<li><code>parent = (child-1)/2</code></li>\n<li><code>left_child = parent*2+1</code></li>\n<li><code>right_child = parent*2+2</code></li>\n</ul>\n<h2 id=\"建堆方法\"><a href=\"#建堆方法\" class=\"headerlink\" title=\"建堆方法\"></a>建堆方法</h2><h3 id=\"向上调整法\"><a href=\"#向上调整法\" class=\"headerlink\" title=\"向上调整法\"></a>向上调整法</h3><p>在已有一个大堆的<strong>前提下</strong>,把一个新的数据插入到堆的最后一个节点(此时破坏大堆的结构),再<strong>一路</strong>向上调整,可以重新建堆</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">adjust_up</span><span class=\"params\">(vector&lt;T&gt;&amp; arr, <span class=\"type\">int</span> child)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> parent = (child - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (parent != child)<span class=\"comment\">//parent == child == 0时</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[parent] &lt; arr[child])<span class=\"comment\">//不满足大堆</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(arr[parent], arr[child]);<span class=\"comment\">//交换</span></span><br><span class=\"line\">\t\t\tchild = parent;<span class=\"comment\">//继续向上调整,迭代child和parent</span></span><br><span class=\"line\">\t\t\tparent = (child - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span><span class=\"comment\">//完成建堆，退出循环</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"向下调整法\"><a href=\"#向下调整法\" class=\"headerlink\" title=\"向下调整法\"></a>向下调整法</h3><p>在已有一个大堆的<strong>前提下</strong>,把根的值改变(此时破坏大堆的结构),再<strong>一路</strong>向下调整，可以重新建堆</p>\n<p>上一句也可以等价于,左子树和右子树都是大堆的前提下，将根<strong>一路</strong>向下调整，可以重新建堆</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">adjust_down</span><span class=\"params\">(vector&lt;T&gt;&amp; arr,<span class=\"type\">int</span> sz , <span class=\"type\">int</span> parent)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> child = parent * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (child + <span class=\"number\">1</span> &lt; sz &amp;&amp; arr[child + <span class=\"number\">1</span>] &gt; arr[child]) child++;<span class=\"comment\">//取较大的孩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (child &lt; sz)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[parent] &lt; arr[child])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(arr[parent], arr[child]);</span><br><span class=\"line\">\t\t\tparent = child;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> child = parent * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (child &gt;= sz) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (child + <span class=\"number\">1</span> &lt; sz &amp;&amp; arr[child + <span class=\"number\">1</span>] &gt; arr[child]) child++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"主要思路\"><a href=\"#主要思路\" class=\"headerlink\" title=\"主要思路\"></a>主要思路</h1><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_12-40-09.png\"></p>\n<h2 id=\"建堆\"><a href=\"#建堆\" class=\"headerlink\" title=\"建堆\"></a>建堆</h2><p>用<code>向上调整法</code>和<code>向下调整法</code>都能建堆,不过<code>向上调整法</code>建堆思路更简单，也更容易代码实现，只需要把第一个元素当成现成的大堆，然后逐个插入并向上调整。<strong>也就是说只需要写一个循环</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向上调整法建堆</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; sz; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">adjust_up</span>(arr, i);<span class=\"comment\">//逐个插入并向上调整建堆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-45-09.png\"></p>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><p>此时的排序有个特点，那就是我们要<strong>倒着排</strong></p>\n<p>尽管此时数组的第一个元素为<code>最大值</code>,似乎只需要把它放在那，整一个<code>降序</code>排列，再把剩下的元素建个堆，确定第二大的数…<strong>但是</strong>，此时有个很大的问题，当把剩下的元素看作堆时，会发现前面建堆留下来的关系全被打乱了(原本父子关系,兄弟关系乱套了),也就是说要<code>完全重新建堆</code>,极大地浪费了第一次建堆所建立的关系</p>\n<p>所以我们要尽可能<code>保留</code>原来的堆,既然把下标<code>0</code>处的节点除外会极大地影响堆的关系，那就改成把<code>最后一个叶子节点</code>除外,这样对原来的堆几乎没有改变。</p>\n<p>但建堆选出的<code>最大的</code>的值在根处,所以把<code>根</code>和<code>最后一个叶子节点</code>交换，<strong>交换后</strong>,此时<strong>待排序</strong>的数中的<code>最大值</code>以完成排序（即倒着排）,把<code>最后一个叶子节点</code>从堆中除外,再从<code>根</code>开始一路向下调整即可重新<code>建堆</code>,如此循环</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = sz<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">1</span>; i--)<span class=\"comment\">//利用i的减小将已排序的元素逐个除外</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(arr[<span class=\"number\">0</span>], arr[i]);<span class=\"comment\">//选出最大的元素放在末尾</span></span><br><span class=\"line\">\t<span class=\"built_in\">adjust_down</span>(arr,i,<span class=\"number\">0</span>);<span class=\"comment\">//向下调整建堆,待排序的（待建堆的）数的个数为i,逐个减小</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-45-22.png\"></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-05-21_19-47-20.png\"></p>\n<p>正因为实际上排序时是<strong>倒着排</strong>的,所以当我们要排序时：</p>\n<ul>\n<li>升序-&gt;<code>大堆</code></li>\n<li>降序-&gt;<code>小堆</code></li>\n</ul>\n<h1 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">adjust_up</span><span class=\"params\">(vector&lt;T&gt;&amp; arr, <span class=\"type\">int</span> child)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> parent = (child - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (parent != child)<span class=\"comment\">//parent == child == 0时</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[parent] &lt; arr[child])<span class=\"comment\">//不满足大堆</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(arr[parent], arr[child]);<span class=\"comment\">//交换</span></span><br><span class=\"line\">\t\t\tchild = parent;<span class=\"comment\">//继续向上调整,迭代child和parent</span></span><br><span class=\"line\">\t\t\tparent = (child - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span><span class=\"comment\">//完成建堆，退出循环</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">adjust_down</span><span class=\"params\">(vector&lt;T&gt;&amp; arr,<span class=\"type\">int</span> sz , <span class=\"type\">int</span> parent)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> child = parent * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (child + <span class=\"number\">1</span> &lt; sz &amp;&amp; arr[child + <span class=\"number\">1</span>] &gt; arr[child]) child++;<span class=\"comment\">//取较大的孩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (child &lt; sz)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[parent] &lt; arr[child])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(arr[parent], arr[child]);</span><br><span class=\"line\">\t\t\tparent = child;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> child = parent * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (child &gt;= sz) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (child + <span class=\"number\">1</span> &lt; sz &amp;&amp; arr[child + <span class=\"number\">1</span>] &gt; arr[child]) child++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">heap_sort</span><span class=\"params\">(vector&lt;T&gt;&amp; arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sz = arr.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//建堆</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; sz; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">adjust_up</span>(arr, i);<span class=\"comment\">//逐个插入并向上调整建堆</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = sz<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>(arr[<span class=\"number\">0</span>], arr[i]);<span class=\"comment\">//选出最大的元素放在末尾</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">adjust_down</span>(arr,i,<span class=\"number\">0</span>);<span class=\"comment\">//向下调整建堆</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"初识动静态库(修改中)","date":"2024-07-08T01:10:13.000Z","_content":"\n# 动态库\n\n\n# 静态库\n","source":"_posts/libs.md","raw":"---\ntitle: 初识动静态库(修改中)\ndate: 2024-07-08 09:10:13\ntags: 动态库 静态库\n---\n\n# 动态库\n\n\n# 静态库\n","slug":"libs","published":1,"updated":"2024-07-07T08:28:24.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulv9000sv8p56mkjgayi","content":"<h1 id=\"动态库\"><a href=\"#动态库\" class=\"headerlink\" title=\"动态库\"></a>动态库</h1><h1 id=\"静态库\"><a href=\"#静态库\" class=\"headerlink\" title=\"静态库\"></a>静态库</h1>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":"<h1 id=\"动态库\"><a href=\"#动态库\" class=\"headerlink\" title=\"动态库\"></a>动态库</h1><h1 id=\"静态库\"><a href=\"#静态库\" class=\"headerlink\" title=\"静态库\"></a>静态库</h1>"},{"title":"归并排序","date":"2024-06-28T01:13:09.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.png","_content":"\n***\n时间复杂度: O(nlogn)\n空间复杂度: O(n)\n稳定性： 稳定\n实现语言: C/C++\n***\n\n# 原理\n\n## 思想\n这里采用的是**分治**的思想，但与`快速排序`相反的是，归并排序采用的是先分治再合并。\n\n已知在有额外空间的情况下，合并两个**有序**数组得到一个新的较长有序数组是很高效的。 所以能不能把一个任意数组分成由左右两个有序数组组成然后合并成有序数组呢？\n\n显然不能，大部分情况并不能分成两个有序数组，但如果在此之前用同样的方法（这里采用递归）事先排序左右两部分呢？大部分情况依然不能，因此这个递归会一直递推下去，最终待排序区间**不断缩小**,到只剩一个或零个元素，此时就可以将其看为有序数组了,也就是说递归在这里停止，可以一路合并有序数组一路回归上去了\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-02_21-29-34.png)\n\n## 分治\n这里使用左右指针**控制待排序区间**（迭代器也行）,并采用递归的方式形象地完成分治操作\n\n```C++\nvoid _MergeSort(vector<int>& arr,int left,int right,vector<int>&tmp)\n{\n    //分治\n    if(left >= right) return;//递归出口\n\n    int mid = (left+right)/2;\n    _MergeSort(arr,left,mid,tmp);//排序左半边\n    _MergeSort(arr,mid+1,right,tmp);//排序右半边\n\n    //合并数组\n    //...\n}\n\nvoid MergeSort(vector<int>& arr)\n{\n    vector<int> tmp(arr.size());//用tmp开辟额外空间用于合并数组\n    _MergeSort(arr,0,arr.size()-1);\n}\n```\n\n## 合并有序数组\n因为合并两个有序数组**难以原地**完成，所以要借助`tmp`数组提供额外空间。\n\n具体做法就是用两个指针分别从两个数组中挑最小值，然后用第三个指针从左向右填到`tmp`中，最后再拷贝至原数组\n\n```C++\nvoid _MergeSort(vector<int>& arr,int left,int right,vector<int>&tmp)\n{\n    //分治\n    if(left >= right) return;//递归出口\n\n    int mid = (left+right)/2;\n    _MergeSort(arr,left,mid,tmp);//排序左半边\n    _MergeSort(arr,mid+1,right,tmp);//排序右半边\n\n    //合并数组\n    \tint cur1 = left;\n\tint cur2 = mid + 1;\n\tint cur = left;\n\n\twhile (cur1 <= mid && cur2 <= right)\n\t{\n\t\tif (arr[cur1] < arr[cur2])\n\t\t{\n\t\t\ttmp[cur++] = arr[cur1++];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmp[cur++] = arr[cur2++];\n\t\t}\n\t}\n\n\twhile (cur1 <= left)\n\t\ttmp[cur++] = arr[cur1++];\n\twhile (cur2 <= right)\n\t\ttmp[cur++] = arr[cur2++];\n\n\tfor (int i = left; i <= right; i++)\n\t\tarr[i] = tmp[i];\n}\n\nvoid MergeSort(vector<int>& arr)\n{\n    vector<int> tmp(arr.size());//用tmp开辟额外空间用于合并数组\n    _MergeSort(arr,0,arr.size()-1);\n}\n```\n\n以上就是C++版的完整代码,下面再提供`C`语言版的\n\n```C\nvoid _MergeSort(int* arr, int sz, int left, int right, int* tmp)\n{\n\tif (left >= right) return;\n\n\tint mid = (left + right) / 2;\n\n\t_MergeSort(arr,sz ,left, mid, tmp);\n\t_MergeSort(arr, sz, mid + 1,right, tmp);\n\tint cur1 = left, cur2 = mid + 1, cur = left;\n\n\twhile (cur1 <= mid && cur2 <= right)\n\t{\n\t\tif (arr[cur1] < arr[cur2])\n\t\t\ttmp[cur++] = arr[cur1++];\n\t\telse\n\t\t\ttmp[cur++] = arr[cur2++];\n\t}\n\n\twhile (cur1 <= mid)\n\t\ttmp[cur++] = arr[cur1++];\n\twhile (cur2 <= right)\n\t\ttmp[cur++] = arr[cur2++];\n\n\tfor (int i = left; i <= right; i++)\n\t\tarr[i] = tmp[i];\n}\n\nvoid MergeSort(int* arr, int sz)\n{\n\tint* tmp = (int*)malloc(sizeof(int) * sz);\n\t_MergeSort(arr, sz, 0, sz - 1, tmp);\n}\n```\n\n# 小结\n归并排序的原理乍一看很吓人，好像很高深的样子，但其实多上手练练，多试着独立敲代码就能掌握其精髓了，之后手撕归并排序不要太简单","source":"_posts/mergesort.md","raw":"---\ntitle: 归并排序\ndate: 2024-06-28 09:13:09\ntags: 排序 算法\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.png\n---\n\n***\n时间复杂度: O(nlogn)\n空间复杂度: O(n)\n稳定性： 稳定\n实现语言: C/C++\n***\n\n# 原理\n\n## 思想\n这里采用的是**分治**的思想，但与`快速排序`相反的是，归并排序采用的是先分治再合并。\n\n已知在有额外空间的情况下，合并两个**有序**数组得到一个新的较长有序数组是很高效的。 所以能不能把一个任意数组分成由左右两个有序数组组成然后合并成有序数组呢？\n\n显然不能，大部分情况并不能分成两个有序数组，但如果在此之前用同样的方法（这里采用递归）事先排序左右两部分呢？大部分情况依然不能，因此这个递归会一直递推下去，最终待排序区间**不断缩小**,到只剩一个或零个元素，此时就可以将其看为有序数组了,也就是说递归在这里停止，可以一路合并有序数组一路回归上去了\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-02_21-29-34.png)\n\n## 分治\n这里使用左右指针**控制待排序区间**（迭代器也行）,并采用递归的方式形象地完成分治操作\n\n```C++\nvoid _MergeSort(vector<int>& arr,int left,int right,vector<int>&tmp)\n{\n    //分治\n    if(left >= right) return;//递归出口\n\n    int mid = (left+right)/2;\n    _MergeSort(arr,left,mid,tmp);//排序左半边\n    _MergeSort(arr,mid+1,right,tmp);//排序右半边\n\n    //合并数组\n    //...\n}\n\nvoid MergeSort(vector<int>& arr)\n{\n    vector<int> tmp(arr.size());//用tmp开辟额外空间用于合并数组\n    _MergeSort(arr,0,arr.size()-1);\n}\n```\n\n## 合并有序数组\n因为合并两个有序数组**难以原地**完成，所以要借助`tmp`数组提供额外空间。\n\n具体做法就是用两个指针分别从两个数组中挑最小值，然后用第三个指针从左向右填到`tmp`中，最后再拷贝至原数组\n\n```C++\nvoid _MergeSort(vector<int>& arr,int left,int right,vector<int>&tmp)\n{\n    //分治\n    if(left >= right) return;//递归出口\n\n    int mid = (left+right)/2;\n    _MergeSort(arr,left,mid,tmp);//排序左半边\n    _MergeSort(arr,mid+1,right,tmp);//排序右半边\n\n    //合并数组\n    \tint cur1 = left;\n\tint cur2 = mid + 1;\n\tint cur = left;\n\n\twhile (cur1 <= mid && cur2 <= right)\n\t{\n\t\tif (arr[cur1] < arr[cur2])\n\t\t{\n\t\t\ttmp[cur++] = arr[cur1++];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmp[cur++] = arr[cur2++];\n\t\t}\n\t}\n\n\twhile (cur1 <= left)\n\t\ttmp[cur++] = arr[cur1++];\n\twhile (cur2 <= right)\n\t\ttmp[cur++] = arr[cur2++];\n\n\tfor (int i = left; i <= right; i++)\n\t\tarr[i] = tmp[i];\n}\n\nvoid MergeSort(vector<int>& arr)\n{\n    vector<int> tmp(arr.size());//用tmp开辟额外空间用于合并数组\n    _MergeSort(arr,0,arr.size()-1);\n}\n```\n\n以上就是C++版的完整代码,下面再提供`C`语言版的\n\n```C\nvoid _MergeSort(int* arr, int sz, int left, int right, int* tmp)\n{\n\tif (left >= right) return;\n\n\tint mid = (left + right) / 2;\n\n\t_MergeSort(arr,sz ,left, mid, tmp);\n\t_MergeSort(arr, sz, mid + 1,right, tmp);\n\tint cur1 = left, cur2 = mid + 1, cur = left;\n\n\twhile (cur1 <= mid && cur2 <= right)\n\t{\n\t\tif (arr[cur1] < arr[cur2])\n\t\t\ttmp[cur++] = arr[cur1++];\n\t\telse\n\t\t\ttmp[cur++] = arr[cur2++];\n\t}\n\n\twhile (cur1 <= mid)\n\t\ttmp[cur++] = arr[cur1++];\n\twhile (cur2 <= right)\n\t\ttmp[cur++] = arr[cur2++];\n\n\tfor (int i = left; i <= right; i++)\n\t\tarr[i] = tmp[i];\n}\n\nvoid MergeSort(int* arr, int sz)\n{\n\tint* tmp = (int*)malloc(sizeof(int) * sz);\n\t_MergeSort(arr, sz, 0, sz - 1, tmp);\n}\n```\n\n# 小结\n归并排序的原理乍一看很吓人，好像很高深的样子，但其实多上手练练，多试着独立敲代码就能掌握其精髓了，之后手撕归并排序不要太简单","slug":"mergesort","published":1,"updated":"2024-07-03T07:13:12.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulva000vv8p52em2bvbv","content":"<hr>\n<p>时间复杂度: O(nlogn)<br>空间复杂度: O(n)<br>稳定性： 稳定<br>实现语言: C&#x2F;C++</p>\n<hr>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>这里采用的是<strong>分治</strong>的思想，但与<code>快速排序</code>相反的是，归并排序采用的是先分治再合并。</p>\n<p>已知在有额外空间的情况下，合并两个<strong>有序</strong>数组得到一个新的较长有序数组是很高效的。 所以能不能把一个任意数组分成由左右两个有序数组组成然后合并成有序数组呢？</p>\n<p>显然不能，大部分情况并不能分成两个有序数组，但如果在此之前用同样的方法（这里采用递归）事先排序左右两部分呢？大部分情况依然不能，因此这个递归会一直递推下去，最终待排序区间<strong>不断缩小</strong>,到只剩一个或零个元素，此时就可以将其看为有序数组了,也就是说递归在这里停止，可以一路合并有序数组一路回归上去了</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-02_21-29-34.png\"></p>\n<h2 id=\"分治\"><a href=\"#分治\" class=\"headerlink\" title=\"分治\"></a>分治</h2><p>这里使用左右指针<strong>控制待排序区间</strong>（迭代器也行）,并采用递归的方式形象地完成分治操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> _MergeSort(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr,<span class=\"type\">int</span> left,<span class=\"type\">int</span> right,vector&lt;<span class=\"type\">int</span>&gt;&amp;tmp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//分治</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &gt;= right) <span class=\"keyword\">return</span>;<span class=\"comment\">//递归出口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    _MergeSort(arr,left,mid,tmp);<span class=\"comment\">//排序左半边</span></span><br><span class=\"line\">    _MergeSort(arr,mid+<span class=\"number\">1</span>,right,tmp);<span class=\"comment\">//排序右半边</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//合并数组</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MergeSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">tmp</span><span class=\"params\">(arr.size())</span></span>;<span class=\"comment\">//用tmp开辟额外空间用于合并数组</span></span><br><span class=\"line\">    _MergeSort(arr,<span class=\"number\">0</span>,arr.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并有序数组\"><a href=\"#合并有序数组\" class=\"headerlink\" title=\"合并有序数组\"></a>合并有序数组</h2><p>因为合并两个有序数组<strong>难以原地</strong>完成，所以要借助<code>tmp</code>数组提供额外空间。</p>\n<p>具体做法就是用两个指针分别从两个数组中挑最小值，然后用第三个指针从左向右填到<code>tmp</code>中，最后再拷贝至原数组</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> _MergeSort(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr,<span class=\"type\">int</span> left,<span class=\"type\">int</span> right,vector&lt;<span class=\"type\">int</span>&gt;&amp;tmp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//分治</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &gt;= right) <span class=\"keyword\">return</span>;<span class=\"comment\">//递归出口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    _MergeSort(arr,left,mid,tmp);<span class=\"comment\">//排序左半边</span></span><br><span class=\"line\">    _MergeSort(arr,mid+<span class=\"number\">1</span>,right,tmp);<span class=\"comment\">//排序右半边</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//合并数组</span></span><br><span class=\"line\">    \t<span class=\"type\">int</span> cur1 = left;</span><br><span class=\"line\">\t<span class=\"type\">int</span> cur2 = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> cur = left;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur1 &lt;= mid &amp;&amp; cur2 &lt;= right)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[cur1] &lt; arr[cur2])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmp[cur++] = arr[cur1++];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmp[cur++] = arr[cur2++];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur1 &lt;= left)</span><br><span class=\"line\">\t\ttmp[cur++] = arr[cur1++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur2 &lt;= right)</span><br><span class=\"line\">\t\ttmp[cur++] = arr[cur2++];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = left; i &lt;= right; i++)</span><br><span class=\"line\">\t\tarr[i] = tmp[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MergeSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">tmp</span><span class=\"params\">(arr.size())</span></span>;<span class=\"comment\">//用tmp开辟额外空间用于合并数组</span></span><br><span class=\"line\">    _MergeSort(arr,<span class=\"number\">0</span>,arr.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上就是C++版的完整代码,下面再提供<code>C</code>语言版的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> _MergeSort(<span class=\"type\">int</span>* arr, <span class=\"type\">int</span> sz, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right, <span class=\"type\">int</span>* tmp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_MergeSort(arr,sz ,left, mid, tmp);</span><br><span class=\"line\">\t_MergeSort(arr, sz, mid + <span class=\"number\">1</span>,right, tmp);</span><br><span class=\"line\">\t<span class=\"type\">int</span> cur1 = left, cur2 = mid + <span class=\"number\">1</span>, cur = left;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur1 &lt;= mid &amp;&amp; cur2 &lt;= right)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[cur1] &lt; arr[cur2])</span><br><span class=\"line\">\t\t\ttmp[cur++] = arr[cur1++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\ttmp[cur++] = arr[cur2++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur1 &lt;= mid)</span><br><span class=\"line\">\t\ttmp[cur++] = arr[cur1++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur2 &lt;= right)</span><br><span class=\"line\">\t\ttmp[cur++] = arr[cur2++];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = left; i &lt;= right; i++)</span><br><span class=\"line\">\t\tarr[i] = tmp[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">MergeSort</span><span class=\"params\">(<span class=\"type\">int</span>* arr, <span class=\"type\">int</span> sz)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* tmp = (<span class=\"type\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * sz);</span><br><span class=\"line\">\t_MergeSort(arr, sz, <span class=\"number\">0</span>, sz - <span class=\"number\">1</span>, tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>归并排序的原理乍一看很吓人，好像很高深的样子，但其实多上手练练，多试着独立敲代码就能掌握其精髓了，之后手撕归并排序不要太简单</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<hr>\n<p>时间复杂度: O(nlogn)<br>空间复杂度: O(n)<br>稳定性： 稳定<br>实现语言: C&#x2F;C++</p>\n<hr>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>这里采用的是<strong>分治</strong>的思想，但与<code>快速排序</code>相反的是，归并排序采用的是先分治再合并。</p>\n<p>已知在有额外空间的情况下，合并两个<strong>有序</strong>数组得到一个新的较长有序数组是很高效的。 所以能不能把一个任意数组分成由左右两个有序数组组成然后合并成有序数组呢？</p>\n<p>显然不能，大部分情况并不能分成两个有序数组，但如果在此之前用同样的方法（这里采用递归）事先排序左右两部分呢？大部分情况依然不能，因此这个递归会一直递推下去，最终待排序区间<strong>不断缩小</strong>,到只剩一个或零个元素，此时就可以将其看为有序数组了,也就是说递归在这里停止，可以一路合并有序数组一路回归上去了</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-02_21-29-34.png\"></p>\n<h2 id=\"分治\"><a href=\"#分治\" class=\"headerlink\" title=\"分治\"></a>分治</h2><p>这里使用左右指针<strong>控制待排序区间</strong>（迭代器也行）,并采用递归的方式形象地完成分治操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> _MergeSort(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr,<span class=\"type\">int</span> left,<span class=\"type\">int</span> right,vector&lt;<span class=\"type\">int</span>&gt;&amp;tmp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//分治</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &gt;= right) <span class=\"keyword\">return</span>;<span class=\"comment\">//递归出口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    _MergeSort(arr,left,mid,tmp);<span class=\"comment\">//排序左半边</span></span><br><span class=\"line\">    _MergeSort(arr,mid+<span class=\"number\">1</span>,right,tmp);<span class=\"comment\">//排序右半边</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//合并数组</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MergeSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">tmp</span><span class=\"params\">(arr.size())</span></span>;<span class=\"comment\">//用tmp开辟额外空间用于合并数组</span></span><br><span class=\"line\">    _MergeSort(arr,<span class=\"number\">0</span>,arr.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并有序数组\"><a href=\"#合并有序数组\" class=\"headerlink\" title=\"合并有序数组\"></a>合并有序数组</h2><p>因为合并两个有序数组<strong>难以原地</strong>完成，所以要借助<code>tmp</code>数组提供额外空间。</p>\n<p>具体做法就是用两个指针分别从两个数组中挑最小值，然后用第三个指针从左向右填到<code>tmp</code>中，最后再拷贝至原数组</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> _MergeSort(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr,<span class=\"type\">int</span> left,<span class=\"type\">int</span> right,vector&lt;<span class=\"type\">int</span>&gt;&amp;tmp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//分治</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &gt;= right) <span class=\"keyword\">return</span>;<span class=\"comment\">//递归出口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    _MergeSort(arr,left,mid,tmp);<span class=\"comment\">//排序左半边</span></span><br><span class=\"line\">    _MergeSort(arr,mid+<span class=\"number\">1</span>,right,tmp);<span class=\"comment\">//排序右半边</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//合并数组</span></span><br><span class=\"line\">    \t<span class=\"type\">int</span> cur1 = left;</span><br><span class=\"line\">\t<span class=\"type\">int</span> cur2 = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> cur = left;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur1 &lt;= mid &amp;&amp; cur2 &lt;= right)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[cur1] &lt; arr[cur2])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmp[cur++] = arr[cur1++];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmp[cur++] = arr[cur2++];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur1 &lt;= left)</span><br><span class=\"line\">\t\ttmp[cur++] = arr[cur1++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur2 &lt;= right)</span><br><span class=\"line\">\t\ttmp[cur++] = arr[cur2++];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = left; i &lt;= right; i++)</span><br><span class=\"line\">\t\tarr[i] = tmp[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MergeSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">tmp</span><span class=\"params\">(arr.size())</span></span>;<span class=\"comment\">//用tmp开辟额外空间用于合并数组</span></span><br><span class=\"line\">    _MergeSort(arr,<span class=\"number\">0</span>,arr.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上就是C++版的完整代码,下面再提供<code>C</code>语言版的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> _MergeSort(<span class=\"type\">int</span>* arr, <span class=\"type\">int</span> sz, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right, <span class=\"type\">int</span>* tmp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_MergeSort(arr,sz ,left, mid, tmp);</span><br><span class=\"line\">\t_MergeSort(arr, sz, mid + <span class=\"number\">1</span>,right, tmp);</span><br><span class=\"line\">\t<span class=\"type\">int</span> cur1 = left, cur2 = mid + <span class=\"number\">1</span>, cur = left;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur1 &lt;= mid &amp;&amp; cur2 &lt;= right)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[cur1] &lt; arr[cur2])</span><br><span class=\"line\">\t\t\ttmp[cur++] = arr[cur1++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\ttmp[cur++] = arr[cur2++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur1 &lt;= mid)</span><br><span class=\"line\">\t\ttmp[cur++] = arr[cur1++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur2 &lt;= right)</span><br><span class=\"line\">\t\ttmp[cur++] = arr[cur2++];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = left; i &lt;= right; i++)</span><br><span class=\"line\">\t\tarr[i] = tmp[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">MergeSort</span><span class=\"params\">(<span class=\"type\">int</span>* arr, <span class=\"type\">int</span> sz)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* tmp = (<span class=\"type\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * sz);</span><br><span class=\"line\">\t_MergeSort(arr, sz, <span class=\"number\">0</span>, sz - <span class=\"number\">1</span>, tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>归并排序的原理乍一看很吓人，好像很高深的样子，但其实多上手练练，多试着独立敲代码就能掌握其精髓了，之后手撕归并排序不要太简单</p>\n"},{"title":"=C语言实践= 手把手教你做高端cmd简单扫雷","date":"2023-10-29T23:28:01.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-02_10-27-25.jpg","_content":"# 直接开始吧！\n\n## 多文件项目 #\n扫雷项目内容较多，需要调用的**函数**也较多，采用多文件的方式，可以使代码**条理清晰**，并且**易于管理和维护**。文件如下\n\n`game.h`用于宏定义，函数声明，引入头文件等\n\n`game.c`用于**函数的具体实现**\n\n`front.c`用于实现程序的**主干部分**\n\n`other.c`用于实现其他杂项函数，这里我用于实现`menu()`函数，~~主要内容太花了~~\n\n**注**  `.c`结尾的源文件均需加一句`#include \"game.h\"`\n\n## 头文件 #\n本次用到的头文件有`stdio.h` `stdlib.h` `time.h` `windows.h`\n和自己建的`game.h`\n\n**均在**文件`game.h`中`#include`\n\n\n## define宏定义 #\n为了便于**阅读和维护**代码,在`game.h`中的宏定义如下\n\n```C\n//显示行列\n#define ROW 9\n#define COL 9\n\n//实际数组大小\n#define ROWS ROW+2\n#define COLS COL + 2\n\n//地雷信息\n#define Bomb '*'\n#define Blank ' '\n\n//难度\n#define EZ_RANK 10\n#define HD_RANK 15\n\n//显示区\n#define UN '\u001f'\n#define Flag '!'\n\n```\n\n### 为什么实际数组要大一圈？ #\n\n如图，采用九宫格式访问时，大出来的一圈能有效**防止越界访问**\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-02_11-23-51.jpg)\n\n\n## 构建main函数 #\n内容不多，主要是与菜单配合食用\n```C\nint main()\n{\n    //用time()获取时间戳，传给srand设置(随机值生成器的)种子\n\tsrand((unsigned int)time(NULL));\n\twhile (1)//循环游玩\n\t{\n\t\tint input = 0;\n\t\tMenu();//打印菜单\n\t\tprintf(\"请输入:>\");\n\t\tscanf(\"%d\", &input);//获取指令\n\t\tswitch (input)\n\t\t{\n\t\tcase 1:\n\t\t\tSleep(250);\n\t\t\tgame();//开始游戏,游戏具体在game()函数中实现\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tprintf(\"游戏结束\\n\");\n\t\t\treturn 0;//结束程序\n\t\tdefault:\n\t\t\tprintf(\"输入错误,请重试\\n\");\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n```\n\n## 打印菜单 #\n还在做静态菜单?~~弱爆了！~~来试试**动态出现**的菜单！\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/menu.gif)\n\n原理很**简单**，就是`打印空白数组`->`向内逐个替换两侧元素`->`清屏`->`再打印`->`再替换`->`...`\n\n*接下来的代码写在`other.c`中*\n\n```C\n//动态打印菜单\nvoid Menu()\n{\n\tchar cover[]  =  \"=======================\";\n\tchar option1[] = \"======  play (1) ======\";\n\tchar option2[] = \"======  exit (2) ======\"; \n\tchar empty_c[] = \"                       \";\n\tchar empty_1[] = \"                       \";\n\tchar empty_2[] = \"                       \";\n\n\tint left = 0;\n\tint right = 22;\n\twhile (left < right)\n\t{\n        //内容替换\n\t\tempty_c[left] = cover[left];\n\t\tempty_c[right] = cover[right];\n\t\tempty_1[left] = option1[left];\n\t\tempty_1[right] = option1[right];\n\t\tempty_2[left] = option2[left];\n\t\tempty_2[right] = option2[right];\n\n\t\tSleep(50);\n\t\tsystem(\"cls\");//清屏\n\t\tprintf(\"%s\\n%s\\n%s\\n%s\\n\",empty_c,empty_1,empty_2,empty_c);//打印菜单\n\n\t\tleft++;\n\t\tright--;\n\n\t}\n\tif (left == right)//打印最终菜单\n\t{\n\t\tSleep(50);\n\t\tsystem(\"cls\");\n\t\tempty_c[left] = cover[left];\n\t\tempty_1[left] = option1[left];\n\t\tempty_2[left] = option2[left];\n\t\tprintf(\"%s\\n%s\\n%s\\n%s\\n\", empty_c, empty_1, empty_2, empty_c);\n\t}\n}\n```\n\n## 实现game()函数 #\n*游戏的主要逻辑在game()中实现*\n\n```C\nvoid game()\n{\n\tchar mine[ROWS][COLS] = { 0 };\n\tchar show[ROWS][COLS] = { 0 };\n\tchar check[ROWS][COLS] = { 0 };\n\n    //初始化棋盘，其实就是用第二个形参填充二维数组\n\tInitBoard(mine, Blank);\n\tInitBoard(show, UN);\n\n\tInitCheck(check);//初始化check数组，逻辑与上面的初始化不同\n\n\tSetMine(mine,EZ_RANK);//设置地雷\n\tSetNum(mine);//设置雷周围的数字\n\n\t//DisplayBoard(mine); //用于开发时检查棋盘布局\n\t//DisplayBoard(show); //同上，不使用时注释掉\n\n    //以上是前期准备\n\tOPMine(mine,show, check);//开始排雷\n\n\tprintf(\"敲击enter以继续\\n\");\n\tgetchar();\n\tgetchar();\n\n}\n```\n\n### 为什么用三个二维数组？ #\n扫雷需要实现的功能较多，显然一个二维数组是不足以满足需求的，所以这里采用**三个**数组相叠加的方式，各自实现功能，并整合到一起。\n\n数组`mine`用于存放`雷`和雷周围的`计数数字`\n\n数组`show`用于储存给`用户`看到的内容，可以是`Unkown`,`空白`，`数字`，`旗帜`\n\n数组`check`用于记录棋盘的哪些地块被检查过了，防止后面用**递归**打开成片的空白区时，出现无限递归。\n\n**规定**：检查过的坐标储存`字符1`,没检查过的坐标储存`字符0`,大出来的**一圈**默认储存`字符1`\n\n## 实现游戏用的函数 #\n### 先看看有哪些要声明在`game.h`里的 #\n```C\nvoid Menu();//这个在上文实现过了\n\n//一下函数将在下文实现\n\n//初始化棋盘\nvoid InitBoard(char board[ROWS][COLS], char sign);\n//展示棋盘\nvoid DisplayBoard(char board[ROWS][COLS]);\n//初始化check棋盘\nvoid InitCheck(char check[ROWS][COLS]);\n//设置地雷/数字\nvoid SetMine(char board[ROWS][COLS],int rank);\nvoid SetNum(char board[ROWS][COLS]);\n//玩家排雷用的函数\nvoid OPMine(char mine[ROWS][COLS],char show[ROWS][COLS],char check[ROWS][COLS]);\n\n```\n*好，有了目标，接下来就去一个一个实现*\n\n**注**：以下代码均写在`game.c`文件里\n\n### InitBoard() #\n```C\nvoid InitBoard(char board[ROWS][COLS],char sign)\n{\n\tfor (int i = 0; i < ROWS; i++)\n\t{\n\t\tfor (int j = 0; j < COLS; j++)\n\t\t{\n\t\t\tboard[i][j] = sign;\n\t\t}\n\t}\n}\n```\n这里初始化的方式比较简单粗暴，就是用形参`sign`填充整个二维数组\n\n### DisplayBoard()函数 #\n这里采用的展示方式是带横纵坐标的\n```C\nvoid DisplayBoard(char board[ROWS][COLS])\n{\n\t//打印一排列坐标\n\tfor (int k = 0; k <= COL; k++)\n\t{\n\t\tprintf(\"%d \", k);\n\t}\n\tprintf(\"\\n\");\n\t//打印一排横分割线\n\tfor (int k = 0; k <= COL; k++)\n\t{\n\t\tprintf(\"--\");\n\t}\n\tprintf(\"\\n\");\n\tfor (int i = 1; i <= ROW; i++)\n\t{\n\t\tprintf(\"%d|\", i);//这句话打印横排坐标和竖分割线\n\t\t//打印一排棋盘内容\n\t\tfor (int j = 1; j <= COL; j++)\n\t\t{\n\t\t\tprintf(\"%c \", board[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n\n```\n### InitCheck()函数 #\n这里复用了`InitBoard()`函数，是在其基础上增加了内容\n\n```C\nvoid InitCheck(char check[ROWS][COLS])\n{\n\tInitBoard(check, '0');\n\n\t//将边缘大出来的一圈改为'1'\n\tfor (int k = 0; k < COLS; k++)\n\t{\n\t\tcheck[0][k] = '1';\n\t\tcheck[ROWS - 1][k] = '1';\n\t}\n\tfor (int i = 1; i < ROWS -1; i++)\n\t{\n\t\tcheck[i][0] = '1';\n\t\tcheck[i][COLS - 1] = '1';\n\t}\n}\n\n```\n\n### SetMine()函数 #\n这里要使用`rand()`函数搭配`%`运算，来随机生成雷的坐标\n\n```C\nvoid SetMine(char board[ROWS][COLS],int rank)\n{\n\tint x = 0;\n\tint y = 0;\n\tfor (int count = 0;count < rank;)\n\t{\n\t\tx = rand() % ROW + 1;//x的范围是1~ROW\n\t\ty = rand() % COL + 1;\n\n\t\tif (board[x][y] == Blank)\n\t\t{\n\t\t\tcount++;\n\t\t\tboard[x][y] = Bomb;\n\t\t}\n\t}\n}\n\n```\n\n### SetNum()函数 #\n这里遍历一遍数组并采用`九宫格式`计数\n```C\n//该函数用于九宫格式计数，并在下个函数中被调用\nint CountMine(char board[ROWS][COLS], int x, int y)\n{\n\tint sum = 0;\n\tfor (int i = x - 1; i <= x + 1; i++)//上中下三行\n\t{\n\t\tfor (int j = y - 1; j <= y + 1; j++)//左中右三列\n\t\t{\n\t\t\tif (i != x || j != y)\n\t\t\t{\n\t\t\t\tif (board[i][j] == Bomb)\n\t\t\t\t{\n\t\t\t\t\tsum++;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\n\nvoid SetNum(char board[ROWS][COLS])\n{\n\t//遍历二维数组\n\tfor (int i = 1; i <= ROW; i++)\n\t{\n\t\tfor (int j = 0; j <= COLS; j++)\n\t\t{\n\t\t\tif (board[i][j] == Blank)//仅操作非雷的格子\n\t\t\t{\n\t\t\t\tif (CountMine(board, i, j))\n\t\t\t\t{\n\t\t\t\t\tboard[i][j] = '0' + CountMine(board, i, j);//将返回的数字转化成字符\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n### OPMine()函数--核心函数 #\n该函数为游戏的`核心函数`，有内置菜单，且多次调用其它函数，其中`函数`的具体实现见`四级标题`处\n\n```C\nvoid OPMine(char mine[ROWS][COLS],char show[ROWS][COLS],char check[ROWS][COLS])\n{\n\tint x = 0;//横纵坐标\n\tint y = 0;\n\tint flag = 1;//用于菜单选项\n\tint cont = 1;//cont为0时游戏结束\n\twhile (cont)\n\t{\n\t\tsystem(\"cls\");\n\t\tDisplayBoard(show);\n\t\tprintf(\"排雷(1)\\n插旗/拔旗(2)\\n请输入:>\");\n\t\tscanf(\"%d\", &flag);\n\t\t\n\t\tswitch (flag)\n\t\t{\n\t\t\tcase 1:\n\t\t\t{\n\t\t\t\t//排雷\n\t\t\t\tprintf(\"坐标格式,例>2(空格)2\\n\");\n\t\t\t\tprintf(\"请输入坐标:>\");\n\t\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\t\tif (show[x][y] == Flag)\n\t\t\t\t{\n\n\t\t\t\t\tprintf(\"此处为旗帜，不可排雷\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (show[x][y] != UN)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"不可重复排查\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//具体排雷操作\n\t\t\t\tcont = FindMine(mine,show,check, x, y);\n\t\t\t\tif (cont)\n\t\t\t\t{\n\t\t\t\t\t//检查是否赢得游戏\n\t\t\t\t\tcont = CheckWin(mine,show);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:\n\t\t\t{\n\t\t\t\t//插旗\n\t\t\t\tprintf(\"坐标格式,例>2(空格)2\\n\");\n\t\t\t\tprintf(\"请输入坐标:>\");\n\t\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\t\tSetFlag(show, x, y);//插旗函数\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t{\n\t\t\t\tsystem(\"cls\");\n\t\t\t\tprintf(\"\\n输入错误(恼\\n\");\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n#### SetFlag()函数 #\n先捏软柿子，插旗函数比较简单\n\n```C\nvoid SetFlag(char show[ROWS][COLS], int x, int y)\n{\n\tif (show[x][y] == UN)//插旗\n\t{\n\t\tshow[x][y] = Flag;\n\t}\n\telse if (show[x][y] == Flag)//拔旗\n\t{\n\t\tshow[x][y] = UN;\n\t}\n\telse\n\t{\n\t\tprintf(\"报错\\n\");\n\t}\n}\n\n```\n#### ExpandBlank()函数 #\n这个函数用于打开成片的`空白区`,因为要从连着的空白连续开下去，所以要用到`函数递归`,此时`二维数组check`用于防止死递归\n\n**注**：这个函数一定要写在下一个函数(FindMine)前\n\n```C\nvoid ExpandBlank(char mine[ROWS][COLS], char show[ROWS][COLS], char check[ROWS][COLS],int x,int y)\n{\n\tshow[x][y] = mine[x][y];//将用户看到的格子改成mine中的格子,包括空白和数字格子\n\tcheck[x][y] = '1';//探测过的格子放`1`\n\tif (mine[x][y] == Blank)//仅空白格子会触发递归，数字格子不会\n\t{\n\t\t//九宫格式探测\n\t\tfor (int i = x - 1; i <= x + 1; i++)\n\t\t{\n\t\t\tfor (int j = y - 1; j <= y + 1; j++)\n\t\t\t{\n\t\t\t\tif (check[i][j] == '0' && mine[i][j] != Bomb && show[i][j] != Flag)\n\t\t\t\t{\n\t\t\t\t\t//含雷的格子不会执行ExpandBlank函数，就不会把雷放出来给用户看，但数字格子会\n\t\t\t\t\tExpandBlank(mine, show, check, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n#### FindMine()函数 #\n排雷用的函数\n\n```C\nint FindMine(char mine[ROWS][COLS], char show[ROW][COLS],char check[ROWS][COLS], int x, int y)\n{\n\tif (mine[x][y] == Bomb)\n\t{\n\t\tDisplayBoard(mine);\n\t\tprintf(\"炸死，游戏结束:)\\n\");\n\t\treturn 0;//返回0来结束游戏\n\t}\n\telse if (mine[x][y] != Blank)\n\t{\n\t\tshow[x][y] = mine[x][y];\n\t\treturn 1;//返回1来继续游戏\n\t}\n\telse\n\t{\n\t\t//这里有对上一个函数的调用\n\t\tExpandBlank(mine, show, check,x,y);\n\t\treturn 1;\n\t}\n}\n```\n#### CheckWin()函数 #\n用于检查玩家是否完全排雷，赢得游戏\n\n```C\nint CheckWin(char mine[ROWS][COLS], char show[ROWS][COLS])\n{\n\tint count = 0;//统计没排雷的格子数\n\tfor (int i = 1; i <= ROW; i++)\n\t{\n\t\tfor (int j = 1; j <= COL; j++)\n\t\t{\n\t\t\tif (show[i][j] == UN || show[i][j] == Flag)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == EZ_RANK)//统计数==雷数\n\t{\n\t\tprintf(\"恭喜排雷成功!\\n\");\n\t\tDisplayBoard(mine);\n\t\treturn 0;//返回0，停止游戏\n\t}\n\telse\n\t{\n\t\treturn 1;\n\t}\n}\n```\n\n# 总结 #\n至此游戏所需的代码全部完成，已经可以编译出来玩耍啦。\n\n该实践项目主要练习了`二维数组`,`函数`,`函数递归`,`宏定义`等内容，代码量在入门学习中算较大的，本人在初次编写的时候也写出了不少bug，debug的过程是相当~~快乐~~\n\n建议多多画示意图，**耐下性子**写代码和debug,哪怕是实现这样的小游戏项目，也是颇有意义的","source":"_posts/mine-clearance.md","raw":"---\ntitle: =C语言实践= 手把手教你做高端cmd简单扫雷\ndate: 2023-10-30 07:28:01\ntags: C语言 实践项目\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-02_10-27-25.jpg\n---\n# 直接开始吧！\n\n## 多文件项目 #\n扫雷项目内容较多，需要调用的**函数**也较多，采用多文件的方式，可以使代码**条理清晰**，并且**易于管理和维护**。文件如下\n\n`game.h`用于宏定义，函数声明，引入头文件等\n\n`game.c`用于**函数的具体实现**\n\n`front.c`用于实现程序的**主干部分**\n\n`other.c`用于实现其他杂项函数，这里我用于实现`menu()`函数，~~主要内容太花了~~\n\n**注**  `.c`结尾的源文件均需加一句`#include \"game.h\"`\n\n## 头文件 #\n本次用到的头文件有`stdio.h` `stdlib.h` `time.h` `windows.h`\n和自己建的`game.h`\n\n**均在**文件`game.h`中`#include`\n\n\n## define宏定义 #\n为了便于**阅读和维护**代码,在`game.h`中的宏定义如下\n\n```C\n//显示行列\n#define ROW 9\n#define COL 9\n\n//实际数组大小\n#define ROWS ROW+2\n#define COLS COL + 2\n\n//地雷信息\n#define Bomb '*'\n#define Blank ' '\n\n//难度\n#define EZ_RANK 10\n#define HD_RANK 15\n\n//显示区\n#define UN '\u001f'\n#define Flag '!'\n\n```\n\n### 为什么实际数组要大一圈？ #\n\n如图，采用九宫格式访问时，大出来的一圈能有效**防止越界访问**\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-02_11-23-51.jpg)\n\n\n## 构建main函数 #\n内容不多，主要是与菜单配合食用\n```C\nint main()\n{\n    //用time()获取时间戳，传给srand设置(随机值生成器的)种子\n\tsrand((unsigned int)time(NULL));\n\twhile (1)//循环游玩\n\t{\n\t\tint input = 0;\n\t\tMenu();//打印菜单\n\t\tprintf(\"请输入:>\");\n\t\tscanf(\"%d\", &input);//获取指令\n\t\tswitch (input)\n\t\t{\n\t\tcase 1:\n\t\t\tSleep(250);\n\t\t\tgame();//开始游戏,游戏具体在game()函数中实现\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tprintf(\"游戏结束\\n\");\n\t\t\treturn 0;//结束程序\n\t\tdefault:\n\t\t\tprintf(\"输入错误,请重试\\n\");\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n```\n\n## 打印菜单 #\n还在做静态菜单?~~弱爆了！~~来试试**动态出现**的菜单！\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/menu.gif)\n\n原理很**简单**，就是`打印空白数组`->`向内逐个替换两侧元素`->`清屏`->`再打印`->`再替换`->`...`\n\n*接下来的代码写在`other.c`中*\n\n```C\n//动态打印菜单\nvoid Menu()\n{\n\tchar cover[]  =  \"=======================\";\n\tchar option1[] = \"======  play (1) ======\";\n\tchar option2[] = \"======  exit (2) ======\"; \n\tchar empty_c[] = \"                       \";\n\tchar empty_1[] = \"                       \";\n\tchar empty_2[] = \"                       \";\n\n\tint left = 0;\n\tint right = 22;\n\twhile (left < right)\n\t{\n        //内容替换\n\t\tempty_c[left] = cover[left];\n\t\tempty_c[right] = cover[right];\n\t\tempty_1[left] = option1[left];\n\t\tempty_1[right] = option1[right];\n\t\tempty_2[left] = option2[left];\n\t\tempty_2[right] = option2[right];\n\n\t\tSleep(50);\n\t\tsystem(\"cls\");//清屏\n\t\tprintf(\"%s\\n%s\\n%s\\n%s\\n\",empty_c,empty_1,empty_2,empty_c);//打印菜单\n\n\t\tleft++;\n\t\tright--;\n\n\t}\n\tif (left == right)//打印最终菜单\n\t{\n\t\tSleep(50);\n\t\tsystem(\"cls\");\n\t\tempty_c[left] = cover[left];\n\t\tempty_1[left] = option1[left];\n\t\tempty_2[left] = option2[left];\n\t\tprintf(\"%s\\n%s\\n%s\\n%s\\n\", empty_c, empty_1, empty_2, empty_c);\n\t}\n}\n```\n\n## 实现game()函数 #\n*游戏的主要逻辑在game()中实现*\n\n```C\nvoid game()\n{\n\tchar mine[ROWS][COLS] = { 0 };\n\tchar show[ROWS][COLS] = { 0 };\n\tchar check[ROWS][COLS] = { 0 };\n\n    //初始化棋盘，其实就是用第二个形参填充二维数组\n\tInitBoard(mine, Blank);\n\tInitBoard(show, UN);\n\n\tInitCheck(check);//初始化check数组，逻辑与上面的初始化不同\n\n\tSetMine(mine,EZ_RANK);//设置地雷\n\tSetNum(mine);//设置雷周围的数字\n\n\t//DisplayBoard(mine); //用于开发时检查棋盘布局\n\t//DisplayBoard(show); //同上，不使用时注释掉\n\n    //以上是前期准备\n\tOPMine(mine,show, check);//开始排雷\n\n\tprintf(\"敲击enter以继续\\n\");\n\tgetchar();\n\tgetchar();\n\n}\n```\n\n### 为什么用三个二维数组？ #\n扫雷需要实现的功能较多，显然一个二维数组是不足以满足需求的，所以这里采用**三个**数组相叠加的方式，各自实现功能，并整合到一起。\n\n数组`mine`用于存放`雷`和雷周围的`计数数字`\n\n数组`show`用于储存给`用户`看到的内容，可以是`Unkown`,`空白`，`数字`，`旗帜`\n\n数组`check`用于记录棋盘的哪些地块被检查过了，防止后面用**递归**打开成片的空白区时，出现无限递归。\n\n**规定**：检查过的坐标储存`字符1`,没检查过的坐标储存`字符0`,大出来的**一圈**默认储存`字符1`\n\n## 实现游戏用的函数 #\n### 先看看有哪些要声明在`game.h`里的 #\n```C\nvoid Menu();//这个在上文实现过了\n\n//一下函数将在下文实现\n\n//初始化棋盘\nvoid InitBoard(char board[ROWS][COLS], char sign);\n//展示棋盘\nvoid DisplayBoard(char board[ROWS][COLS]);\n//初始化check棋盘\nvoid InitCheck(char check[ROWS][COLS]);\n//设置地雷/数字\nvoid SetMine(char board[ROWS][COLS],int rank);\nvoid SetNum(char board[ROWS][COLS]);\n//玩家排雷用的函数\nvoid OPMine(char mine[ROWS][COLS],char show[ROWS][COLS],char check[ROWS][COLS]);\n\n```\n*好，有了目标，接下来就去一个一个实现*\n\n**注**：以下代码均写在`game.c`文件里\n\n### InitBoard() #\n```C\nvoid InitBoard(char board[ROWS][COLS],char sign)\n{\n\tfor (int i = 0; i < ROWS; i++)\n\t{\n\t\tfor (int j = 0; j < COLS; j++)\n\t\t{\n\t\t\tboard[i][j] = sign;\n\t\t}\n\t}\n}\n```\n这里初始化的方式比较简单粗暴，就是用形参`sign`填充整个二维数组\n\n### DisplayBoard()函数 #\n这里采用的展示方式是带横纵坐标的\n```C\nvoid DisplayBoard(char board[ROWS][COLS])\n{\n\t//打印一排列坐标\n\tfor (int k = 0; k <= COL; k++)\n\t{\n\t\tprintf(\"%d \", k);\n\t}\n\tprintf(\"\\n\");\n\t//打印一排横分割线\n\tfor (int k = 0; k <= COL; k++)\n\t{\n\t\tprintf(\"--\");\n\t}\n\tprintf(\"\\n\");\n\tfor (int i = 1; i <= ROW; i++)\n\t{\n\t\tprintf(\"%d|\", i);//这句话打印横排坐标和竖分割线\n\t\t//打印一排棋盘内容\n\t\tfor (int j = 1; j <= COL; j++)\n\t\t{\n\t\t\tprintf(\"%c \", board[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n\n```\n### InitCheck()函数 #\n这里复用了`InitBoard()`函数，是在其基础上增加了内容\n\n```C\nvoid InitCheck(char check[ROWS][COLS])\n{\n\tInitBoard(check, '0');\n\n\t//将边缘大出来的一圈改为'1'\n\tfor (int k = 0; k < COLS; k++)\n\t{\n\t\tcheck[0][k] = '1';\n\t\tcheck[ROWS - 1][k] = '1';\n\t}\n\tfor (int i = 1; i < ROWS -1; i++)\n\t{\n\t\tcheck[i][0] = '1';\n\t\tcheck[i][COLS - 1] = '1';\n\t}\n}\n\n```\n\n### SetMine()函数 #\n这里要使用`rand()`函数搭配`%`运算，来随机生成雷的坐标\n\n```C\nvoid SetMine(char board[ROWS][COLS],int rank)\n{\n\tint x = 0;\n\tint y = 0;\n\tfor (int count = 0;count < rank;)\n\t{\n\t\tx = rand() % ROW + 1;//x的范围是1~ROW\n\t\ty = rand() % COL + 1;\n\n\t\tif (board[x][y] == Blank)\n\t\t{\n\t\t\tcount++;\n\t\t\tboard[x][y] = Bomb;\n\t\t}\n\t}\n}\n\n```\n\n### SetNum()函数 #\n这里遍历一遍数组并采用`九宫格式`计数\n```C\n//该函数用于九宫格式计数，并在下个函数中被调用\nint CountMine(char board[ROWS][COLS], int x, int y)\n{\n\tint sum = 0;\n\tfor (int i = x - 1; i <= x + 1; i++)//上中下三行\n\t{\n\t\tfor (int j = y - 1; j <= y + 1; j++)//左中右三列\n\t\t{\n\t\t\tif (i != x || j != y)\n\t\t\t{\n\t\t\t\tif (board[i][j] == Bomb)\n\t\t\t\t{\n\t\t\t\t\tsum++;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\n\nvoid SetNum(char board[ROWS][COLS])\n{\n\t//遍历二维数组\n\tfor (int i = 1; i <= ROW; i++)\n\t{\n\t\tfor (int j = 0; j <= COLS; j++)\n\t\t{\n\t\t\tif (board[i][j] == Blank)//仅操作非雷的格子\n\t\t\t{\n\t\t\t\tif (CountMine(board, i, j))\n\t\t\t\t{\n\t\t\t\t\tboard[i][j] = '0' + CountMine(board, i, j);//将返回的数字转化成字符\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n### OPMine()函数--核心函数 #\n该函数为游戏的`核心函数`，有内置菜单，且多次调用其它函数，其中`函数`的具体实现见`四级标题`处\n\n```C\nvoid OPMine(char mine[ROWS][COLS],char show[ROWS][COLS],char check[ROWS][COLS])\n{\n\tint x = 0;//横纵坐标\n\tint y = 0;\n\tint flag = 1;//用于菜单选项\n\tint cont = 1;//cont为0时游戏结束\n\twhile (cont)\n\t{\n\t\tsystem(\"cls\");\n\t\tDisplayBoard(show);\n\t\tprintf(\"排雷(1)\\n插旗/拔旗(2)\\n请输入:>\");\n\t\tscanf(\"%d\", &flag);\n\t\t\n\t\tswitch (flag)\n\t\t{\n\t\t\tcase 1:\n\t\t\t{\n\t\t\t\t//排雷\n\t\t\t\tprintf(\"坐标格式,例>2(空格)2\\n\");\n\t\t\t\tprintf(\"请输入坐标:>\");\n\t\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\t\tif (show[x][y] == Flag)\n\t\t\t\t{\n\n\t\t\t\t\tprintf(\"此处为旗帜，不可排雷\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (show[x][y] != UN)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"不可重复排查\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//具体排雷操作\n\t\t\t\tcont = FindMine(mine,show,check, x, y);\n\t\t\t\tif (cont)\n\t\t\t\t{\n\t\t\t\t\t//检查是否赢得游戏\n\t\t\t\t\tcont = CheckWin(mine,show);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:\n\t\t\t{\n\t\t\t\t//插旗\n\t\t\t\tprintf(\"坐标格式,例>2(空格)2\\n\");\n\t\t\t\tprintf(\"请输入坐标:>\");\n\t\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\t\tSetFlag(show, x, y);//插旗函数\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t{\n\t\t\t\tsystem(\"cls\");\n\t\t\t\tprintf(\"\\n输入错误(恼\\n\");\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n#### SetFlag()函数 #\n先捏软柿子，插旗函数比较简单\n\n```C\nvoid SetFlag(char show[ROWS][COLS], int x, int y)\n{\n\tif (show[x][y] == UN)//插旗\n\t{\n\t\tshow[x][y] = Flag;\n\t}\n\telse if (show[x][y] == Flag)//拔旗\n\t{\n\t\tshow[x][y] = UN;\n\t}\n\telse\n\t{\n\t\tprintf(\"报错\\n\");\n\t}\n}\n\n```\n#### ExpandBlank()函数 #\n这个函数用于打开成片的`空白区`,因为要从连着的空白连续开下去，所以要用到`函数递归`,此时`二维数组check`用于防止死递归\n\n**注**：这个函数一定要写在下一个函数(FindMine)前\n\n```C\nvoid ExpandBlank(char mine[ROWS][COLS], char show[ROWS][COLS], char check[ROWS][COLS],int x,int y)\n{\n\tshow[x][y] = mine[x][y];//将用户看到的格子改成mine中的格子,包括空白和数字格子\n\tcheck[x][y] = '1';//探测过的格子放`1`\n\tif (mine[x][y] == Blank)//仅空白格子会触发递归，数字格子不会\n\t{\n\t\t//九宫格式探测\n\t\tfor (int i = x - 1; i <= x + 1; i++)\n\t\t{\n\t\t\tfor (int j = y - 1; j <= y + 1; j++)\n\t\t\t{\n\t\t\t\tif (check[i][j] == '0' && mine[i][j] != Bomb && show[i][j] != Flag)\n\t\t\t\t{\n\t\t\t\t\t//含雷的格子不会执行ExpandBlank函数，就不会把雷放出来给用户看，但数字格子会\n\t\t\t\t\tExpandBlank(mine, show, check, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n#### FindMine()函数 #\n排雷用的函数\n\n```C\nint FindMine(char mine[ROWS][COLS], char show[ROW][COLS],char check[ROWS][COLS], int x, int y)\n{\n\tif (mine[x][y] == Bomb)\n\t{\n\t\tDisplayBoard(mine);\n\t\tprintf(\"炸死，游戏结束:)\\n\");\n\t\treturn 0;//返回0来结束游戏\n\t}\n\telse if (mine[x][y] != Blank)\n\t{\n\t\tshow[x][y] = mine[x][y];\n\t\treturn 1;//返回1来继续游戏\n\t}\n\telse\n\t{\n\t\t//这里有对上一个函数的调用\n\t\tExpandBlank(mine, show, check,x,y);\n\t\treturn 1;\n\t}\n}\n```\n#### CheckWin()函数 #\n用于检查玩家是否完全排雷，赢得游戏\n\n```C\nint CheckWin(char mine[ROWS][COLS], char show[ROWS][COLS])\n{\n\tint count = 0;//统计没排雷的格子数\n\tfor (int i = 1; i <= ROW; i++)\n\t{\n\t\tfor (int j = 1; j <= COL; j++)\n\t\t{\n\t\t\tif (show[i][j] == UN || show[i][j] == Flag)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == EZ_RANK)//统计数==雷数\n\t{\n\t\tprintf(\"恭喜排雷成功!\\n\");\n\t\tDisplayBoard(mine);\n\t\treturn 0;//返回0，停止游戏\n\t}\n\telse\n\t{\n\t\treturn 1;\n\t}\n}\n```\n\n# 总结 #\n至此游戏所需的代码全部完成，已经可以编译出来玩耍啦。\n\n该实践项目主要练习了`二维数组`,`函数`,`函数递归`,`宏定义`等内容，代码量在入门学习中算较大的，本人在初次编写的时候也写出了不少bug，debug的过程是相当~~快乐~~\n\n建议多多画示意图，**耐下性子**写代码和debug,哪怕是实现这样的小游戏项目，也是颇有意义的","slug":"mine-clearance","published":1,"updated":"2024-05-14T02:21:08.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvb000wv8p59yomc57z","content":"<h1 id=\"直接开始吧！\"><a href=\"#直接开始吧！\" class=\"headerlink\" title=\"直接开始吧！\"></a>直接开始吧！</h1><h2 id=\"多文件项目\"><a href=\"#多文件项目\" class=\"headerlink\" title=\"多文件项目\"></a>多文件项目</h2><p>扫雷项目内容较多，需要调用的<strong>函数</strong>也较多，采用多文件的方式，可以使代码<strong>条理清晰</strong>，并且<strong>易于管理和维护</strong>。文件如下</p>\n<p><code>game.h</code>用于宏定义，函数声明，引入头文件等</p>\n<p><code>game.c</code>用于<strong>函数的具体实现</strong></p>\n<p><code>front.c</code>用于实现程序的<strong>主干部分</strong></p>\n<p><code>other.c</code>用于实现其他杂项函数，这里我用于实现<code>menu()</code>函数，<del>主要内容太花了</del></p>\n<p><strong>注</strong>  <code>.c</code>结尾的源文件均需加一句<code>#include &quot;game.h&quot;</code></p>\n<h2 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h2><p>本次用到的头文件有<code>stdio.h</code> <code>stdlib.h</code> <code>time.h</code> <code>windows.h</code><br>和自己建的<code>game.h</code></p>\n<p><strong>均在</strong>文件<code>game.h</code>中<code>#include</code></p>\n<h2 id=\"define宏定义\"><a href=\"#define宏定义\" class=\"headerlink\" title=\"define宏定义\"></a>define宏定义</h2><p>为了便于<strong>阅读和维护</strong>代码,在<code>game.h</code>中的宏定义如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//显示行列</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ROW 9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COL 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际数组大小</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ROWS ROW+2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLS COL + 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地雷信息</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Bomb <span class=\"string\">&#x27;*&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Blank <span class=\"string\">&#x27; &#x27;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//难度</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> EZ_RANK 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HD_RANK 15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//显示区</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> UN <span class=\"string\">&#x27;\u001f&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Flag <span class=\"string\">&#x27;!&#x27;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么实际数组要大一圈？\"><a href=\"#为什么实际数组要大一圈？\" class=\"headerlink\" title=\"为什么实际数组要大一圈？\"></a>为什么实际数组要大一圈？</h3><p>如图，采用九宫格式访问时，大出来的一圈能有效<strong>防止越界访问</strong></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-02_11-23-51.jpg\"></p>\n<h2 id=\"构建main函数\"><a href=\"#构建main函数\" class=\"headerlink\" title=\"构建main函数\"></a>构建main函数</h2><p>内容不多，主要是与菜单配合食用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//用time()获取时间戳，传给srand设置(随机值生成器的)种子</span></span><br><span class=\"line\">\tsrand((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)<span class=\"comment\">//循环游玩</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> input = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tMenu();<span class=\"comment\">//打印菜单</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入:&gt;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;input);<span class=\"comment\">//获取指令</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (input)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tSleep(<span class=\"number\">250</span>);</span><br><span class=\"line\">\t\t\tgame();<span class=\"comment\">//开始游戏,游戏具体在game()函数中实现</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;游戏结束\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//结束程序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入错误,请重试\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打印菜单\"><a href=\"#打印菜单\" class=\"headerlink\" title=\"打印菜单\"></a>打印菜单</h2><p>还在做静态菜单?<del>弱爆了！</del>来试试<strong>动态出现</strong>的菜单！</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/menu.gif\"></p>\n<p>原理很<strong>简单</strong>，就是<code>打印空白数组</code>-&gt;<code>向内逐个替换两侧元素</code>-&gt;<code>清屏</code>-&gt;<code>再打印</code>-&gt;<code>再替换</code>-&gt;<code>...</code></p>\n<p><em>接下来的代码写在<code>other.c</code>中</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//动态打印菜单</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Menu</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> cover[]  =  <span class=\"string\">&quot;=======================&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> option1[] = <span class=\"string\">&quot;======  play (1) ======&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> option2[] = <span class=\"string\">&quot;======  exit (2) ======&quot;</span>; </span><br><span class=\"line\">\t<span class=\"type\">char</span> empty_c[] = <span class=\"string\">&quot;                       &quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> empty_1[] = <span class=\"string\">&quot;                       &quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> empty_2[] = <span class=\"string\">&quot;                       &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> right = <span class=\"number\">22</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (left &lt; right)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">//内容替换</span></span><br><span class=\"line\">\t\tempty_c[left] = cover[left];</span><br><span class=\"line\">\t\tempty_c[right] = cover[right];</span><br><span class=\"line\">\t\tempty_1[left] = option1[left];</span><br><span class=\"line\">\t\tempty_1[right] = option1[right];</span><br><span class=\"line\">\t\tempty_2[left] = option2[left];</span><br><span class=\"line\">\t\tempty_2[right] = option2[right];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">\t\tsystem(<span class=\"string\">&quot;cls&quot;</span>);<span class=\"comment\">//清屏</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n%s\\n%s\\n%s\\n&quot;</span>,empty_c,empty_1,empty_2,empty_c);<span class=\"comment\">//打印菜单</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tleft++;</span><br><span class=\"line\">\t\tright--;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left == right)<span class=\"comment\">//打印最终菜单</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tSleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">\t\tsystem(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">\t\tempty_c[left] = cover[left];</span><br><span class=\"line\">\t\tempty_1[left] = option1[left];</span><br><span class=\"line\">\t\tempty_2[left] = option2[left];</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n%s\\n%s\\n%s\\n&quot;</span>, empty_c, empty_1, empty_2, empty_c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现game-函数\"><a href=\"#实现game-函数\" class=\"headerlink\" title=\"实现game()函数\"></a>实现game()函数</h2><p><em>游戏的主要逻辑在game()中实现</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">game</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> mine[ROWS][COLS] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">char</span> show[ROWS][COLS] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">char</span> check[ROWS][COLS] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化棋盘，其实就是用第二个形参填充二维数组</span></span><br><span class=\"line\">\tInitBoard(mine, Blank);</span><br><span class=\"line\">\tInitBoard(show, UN);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInitCheck(check);<span class=\"comment\">//初始化check数组，逻辑与上面的初始化不同</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tSetMine(mine,EZ_RANK);<span class=\"comment\">//设置地雷</span></span><br><span class=\"line\">\tSetNum(mine);<span class=\"comment\">//设置雷周围的数字</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//DisplayBoard(mine); //用于开发时检查棋盘布局</span></span><br><span class=\"line\">\t<span class=\"comment\">//DisplayBoard(show); //同上，不使用时注释掉</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//以上是前期准备</span></span><br><span class=\"line\">\tOPMine(mine,show, check);<span class=\"comment\">//开始排雷</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;敲击enter以继续\\n&quot;</span>);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么用三个二维数组？\"><a href=\"#为什么用三个二维数组？\" class=\"headerlink\" title=\"为什么用三个二维数组？\"></a>为什么用三个二维数组？</h3><p>扫雷需要实现的功能较多，显然一个二维数组是不足以满足需求的，所以这里采用<strong>三个</strong>数组相叠加的方式，各自实现功能，并整合到一起。</p>\n<p>数组<code>mine</code>用于存放<code>雷</code>和雷周围的<code>计数数字</code></p>\n<p>数组<code>show</code>用于储存给<code>用户</code>看到的内容，可以是<code>Unkown</code>,<code>空白</code>，<code>数字</code>，<code>旗帜</code></p>\n<p>数组<code>check</code>用于记录棋盘的哪些地块被检查过了，防止后面用<strong>递归</strong>打开成片的空白区时，出现无限递归。</p>\n<p><strong>规定</strong>：检查过的坐标储存<code>字符1</code>,没检查过的坐标储存<code>字符0</code>,大出来的<strong>一圈</strong>默认储存<code>字符1</code></p>\n<h2 id=\"实现游戏用的函数\"><a href=\"#实现游戏用的函数\" class=\"headerlink\" title=\"实现游戏用的函数\"></a>实现游戏用的函数</h2><h3 id=\"先看看有哪些要声明在game-h里的\"><a href=\"#先看看有哪些要声明在game-h里的\" class=\"headerlink\" title=\"先看看有哪些要声明在game.h里的\"></a>先看看有哪些要声明在<code>game.h</code>里的</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Menu</span><span class=\"params\">()</span>;<span class=\"comment\">//这个在上文实现过了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一下函数将在下文实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化棋盘</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitBoard</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS], <span class=\"type\">char</span> sign)</span>;</span><br><span class=\"line\"><span class=\"comment\">//展示棋盘</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DisplayBoard</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS])</span>;</span><br><span class=\"line\"><span class=\"comment\">//初始化check棋盘</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitCheck</span><span class=\"params\">(<span class=\"type\">char</span> check[ROWS][COLS])</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置地雷/数字</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetMine</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS],<span class=\"type\">int</span> rank)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetNum</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS])</span>;</span><br><span class=\"line\"><span class=\"comment\">//玩家排雷用的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">OPMine</span><span class=\"params\">(<span class=\"type\">char</span> mine[ROWS][COLS],<span class=\"type\">char</span> show[ROWS][COLS],<span class=\"type\">char</span> check[ROWS][COLS])</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em>好，有了目标，接下来就去一个一个实现</em></p>\n<p><strong>注</strong>：以下代码均写在<code>game.c</code>文件里</p>\n<h3 id=\"InitBoard\"><a href=\"#InitBoard\" class=\"headerlink\" title=\"InitBoard()\"></a>InitBoard()</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitBoard</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS],<span class=\"type\">char</span> sign)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ROWS; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; COLS; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tboard[i][j] = sign;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里初始化的方式比较简单粗暴，就是用形参<code>sign</code>填充整个二维数组</p>\n<h3 id=\"DisplayBoard-函数\"><a href=\"#DisplayBoard-函数\" class=\"headerlink\" title=\"DisplayBoard()函数\"></a>DisplayBoard()函数</h3><p>这里采用的展示方式是带横纵坐标的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DisplayBoard</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//打印一排列坐标</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt;= COL; k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, k);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//打印一排横分割线</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt;= COL; k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= ROW; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d|&quot;</span>, i);<span class=\"comment\">//这句话打印横排坐标和竖分割线</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//打印一排棋盘内容</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= COL; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, board[i][j]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"InitCheck-函数\"><a href=\"#InitCheck-函数\" class=\"headerlink\" title=\"InitCheck()函数\"></a>InitCheck()函数</h3><p>这里复用了<code>InitBoard()</code>函数，是在其基础上增加了内容</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitCheck</span><span class=\"params\">(<span class=\"type\">char</span> check[ROWS][COLS])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tInitBoard(check, <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//将边缘大出来的一圈改为&#x27;1&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; COLS; k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcheck[<span class=\"number\">0</span>][k] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">\t\tcheck[ROWS - <span class=\"number\">1</span>][k] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; ROWS <span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcheck[i][<span class=\"number\">0</span>] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">\t\tcheck[i][COLS - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SetMine-函数\"><a href=\"#SetMine-函数\" class=\"headerlink\" title=\"SetMine()函数\"></a>SetMine()函数</h3><p>这里要使用<code>rand()</code>函数搭配<code>%</code>运算，来随机生成雷的坐标</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetMine</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS],<span class=\"type\">int</span> rank)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> count = <span class=\"number\">0</span>;count &lt; rank;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx = rand() % ROW + <span class=\"number\">1</span>;<span class=\"comment\">//x的范围是1~ROW</span></span><br><span class=\"line\">\t\ty = rand() % COL + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (board[x][y] == Blank)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t\tboard[x][y] = Bomb;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SetNum-函数\"><a href=\"#SetNum-函数\" class=\"headerlink\" title=\"SetNum()函数\"></a>SetNum()函数</h3><p>这里遍历一遍数组并采用<code>九宫格式</code>计数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该函数用于九宫格式计数，并在下个函数中被调用</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">CountMine</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS], <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = x - <span class=\"number\">1</span>; i &lt;= x + <span class=\"number\">1</span>; i++)<span class=\"comment\">//上中下三行</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = y - <span class=\"number\">1</span>; j &lt;= y + <span class=\"number\">1</span>; j++)<span class=\"comment\">//左中右三列</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i != x || j != y)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (board[i][j] == Bomb)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tsum++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetNum</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历二维数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= ROW; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= COLS; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (board[i][j] == Blank)<span class=\"comment\">//仅操作非雷的格子</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (CountMine(board, i, j))</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tboard[i][j] = <span class=\"string\">&#x27;0&#x27;</span> + CountMine(board, i, j);<span class=\"comment\">//将返回的数字转化成字符</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OPMine-函数–核心函数\"><a href=\"#OPMine-函数–核心函数\" class=\"headerlink\" title=\"OPMine()函数–核心函数\"></a>OPMine()函数–核心函数</h3><p>该函数为游戏的<code>核心函数</code>，有内置菜单，且多次调用其它函数，其中<code>函数</code>的具体实现见<code>四级标题</code>处</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">OPMine</span><span class=\"params\">(<span class=\"type\">char</span> mine[ROWS][COLS],<span class=\"type\">char</span> show[ROWS][COLS],<span class=\"type\">char</span> check[ROWS][COLS])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"number\">0</span>;<span class=\"comment\">//横纵坐标</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> flag = <span class=\"number\">1</span>;<span class=\"comment\">//用于菜单选项</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> cont = <span class=\"number\">1</span>;<span class=\"comment\">//cont为0时游戏结束</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cont)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsystem(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">\t\tDisplayBoard(show);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;排雷(1)\\n插旗/拔旗(2)\\n请输入:&gt;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;flag);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//排雷</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;坐标格式,例&gt;2(空格)2\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入坐标:&gt;&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (show[x][y] == Flag)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;此处为旗帜，不可排雷\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (show[x][y] != UN)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;不可重复排查\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//具体排雷操作</span></span><br><span class=\"line\">\t\t\t\tcont = FindMine(mine,show,check, x, y);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cont)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//检查是否赢得游戏</span></span><br><span class=\"line\">\t\t\t\t\tcont = CheckWin(mine,show);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//插旗</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;坐标格式,例&gt;2(空格)2\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入坐标:&gt;&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t\t\tSetFlag(show, x, y);<span class=\"comment\">//插旗函数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tsystem(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n输入错误(恼\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SetFlag-函数\"><a href=\"#SetFlag-函数\" class=\"headerlink\" title=\"SetFlag()函数\"></a>SetFlag()函数</h4><p>先捏软柿子，插旗函数比较简单</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetFlag</span><span class=\"params\">(<span class=\"type\">char</span> show[ROWS][COLS], <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (show[x][y] == UN)<span class=\"comment\">//插旗</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tshow[x][y] = Flag;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (show[x][y] == Flag)<span class=\"comment\">//拔旗</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tshow[x][y] = UN;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;报错\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"ExpandBlank-函数\"><a href=\"#ExpandBlank-函数\" class=\"headerlink\" title=\"ExpandBlank()函数\"></a>ExpandBlank()函数</h4><p>这个函数用于打开成片的<code>空白区</code>,因为要从连着的空白连续开下去，所以要用到<code>函数递归</code>,此时<code>二维数组check</code>用于防止死递归</p>\n<p><strong>注</strong>：这个函数一定要写在下一个函数(FindMine)前</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ExpandBlank</span><span class=\"params\">(<span class=\"type\">char</span> mine[ROWS][COLS], <span class=\"type\">char</span> show[ROWS][COLS], <span class=\"type\">char</span> check[ROWS][COLS],<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tshow[x][y] = mine[x][y];<span class=\"comment\">//将用户看到的格子改成mine中的格子,包括空白和数字格子</span></span><br><span class=\"line\">\tcheck[x][y] = <span class=\"string\">&#x27;1&#x27;</span>;<span class=\"comment\">//探测过的格子放`1`</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mine[x][y] == Blank)<span class=\"comment\">//仅空白格子会触发递归，数字格子不会</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//九宫格式探测</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = x - <span class=\"number\">1</span>; i &lt;= x + <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = y - <span class=\"number\">1</span>; j &lt;= y + <span class=\"number\">1</span>; j++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (check[i][j] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; mine[i][j] != Bomb &amp;&amp; show[i][j] != Flag)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//含雷的格子不会执行ExpandBlank函数，就不会把雷放出来给用户看，但数字格子会</span></span><br><span class=\"line\">\t\t\t\t\tExpandBlank(mine, show, check, i, j);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FindMine-函数\"><a href=\"#FindMine-函数\" class=\"headerlink\" title=\"FindMine()函数\"></a>FindMine()函数</h4><p>排雷用的函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">FindMine</span><span class=\"params\">(<span class=\"type\">char</span> mine[ROWS][COLS], <span class=\"type\">char</span> show[ROW][COLS],<span class=\"type\">char</span> check[ROWS][COLS], <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mine[x][y] == Bomb)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDisplayBoard(mine);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;炸死，游戏结束:)\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//返回0来结束游戏</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mine[x][y] != Blank)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tshow[x][y] = mine[x][y];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//返回1来继续游戏</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//这里有对上一个函数的调用</span></span><br><span class=\"line\">\t\tExpandBlank(mine, show, check,x,y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CheckWin-函数\"><a href=\"#CheckWin-函数\" class=\"headerlink\" title=\"CheckWin()函数\"></a>CheckWin()函数</h4><p>用于检查玩家是否完全排雷，赢得游戏</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">CheckWin</span><span class=\"params\">(<span class=\"type\">char</span> mine[ROWS][COLS], <span class=\"type\">char</span> show[ROWS][COLS])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//统计没排雷的格子数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= ROW; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= COL; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (show[i][j] == UN || show[i][j] == Flag)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count == EZ_RANK)<span class=\"comment\">//统计数==雷数</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;恭喜排雷成功!\\n&quot;</span>);</span><br><span class=\"line\">\t\tDisplayBoard(mine);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//返回0，停止游戏</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>至此游戏所需的代码全部完成，已经可以编译出来玩耍啦。</p>\n<p>该实践项目主要练习了<code>二维数组</code>,<code>函数</code>,<code>函数递归</code>,<code>宏定义</code>等内容，代码量在入门学习中算较大的，本人在初次编写的时候也写出了不少bug，debug的过程是相当<del>快乐</del></p>\n<p>建议多多画示意图，<strong>耐下性子</strong>写代码和debug,哪怕是实现这样的小游戏项目，也是颇有意义的</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"直接开始吧！\"><a href=\"#直接开始吧！\" class=\"headerlink\" title=\"直接开始吧！\"></a>直接开始吧！</h1><h2 id=\"多文件项目\"><a href=\"#多文件项目\" class=\"headerlink\" title=\"多文件项目\"></a>多文件项目</h2><p>扫雷项目内容较多，需要调用的<strong>函数</strong>也较多，采用多文件的方式，可以使代码<strong>条理清晰</strong>，并且<strong>易于管理和维护</strong>。文件如下</p>\n<p><code>game.h</code>用于宏定义，函数声明，引入头文件等</p>\n<p><code>game.c</code>用于<strong>函数的具体实现</strong></p>\n<p><code>front.c</code>用于实现程序的<strong>主干部分</strong></p>\n<p><code>other.c</code>用于实现其他杂项函数，这里我用于实现<code>menu()</code>函数，<del>主要内容太花了</del></p>\n<p><strong>注</strong>  <code>.c</code>结尾的源文件均需加一句<code>#include &quot;game.h&quot;</code></p>\n<h2 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h2><p>本次用到的头文件有<code>stdio.h</code> <code>stdlib.h</code> <code>time.h</code> <code>windows.h</code><br>和自己建的<code>game.h</code></p>\n<p><strong>均在</strong>文件<code>game.h</code>中<code>#include</code></p>\n<h2 id=\"define宏定义\"><a href=\"#define宏定义\" class=\"headerlink\" title=\"define宏定义\"></a>define宏定义</h2><p>为了便于<strong>阅读和维护</strong>代码,在<code>game.h</code>中的宏定义如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//显示行列</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ROW 9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COL 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际数组大小</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ROWS ROW+2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLS COL + 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地雷信息</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Bomb <span class=\"string\">&#x27;*&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Blank <span class=\"string\">&#x27; &#x27;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//难度</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> EZ_RANK 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HD_RANK 15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//显示区</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> UN <span class=\"string\">&#x27;\u001f&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Flag <span class=\"string\">&#x27;!&#x27;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么实际数组要大一圈？\"><a href=\"#为什么实际数组要大一圈？\" class=\"headerlink\" title=\"为什么实际数组要大一圈？\"></a>为什么实际数组要大一圈？</h3><p>如图，采用九宫格式访问时，大出来的一圈能有效<strong>防止越界访问</strong></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-02_11-23-51.jpg\"></p>\n<h2 id=\"构建main函数\"><a href=\"#构建main函数\" class=\"headerlink\" title=\"构建main函数\"></a>构建main函数</h2><p>内容不多，主要是与菜单配合食用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//用time()获取时间戳，传给srand设置(随机值生成器的)种子</span></span><br><span class=\"line\">\tsrand((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)<span class=\"comment\">//循环游玩</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> input = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tMenu();<span class=\"comment\">//打印菜单</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入:&gt;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;input);<span class=\"comment\">//获取指令</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (input)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tSleep(<span class=\"number\">250</span>);</span><br><span class=\"line\">\t\t\tgame();<span class=\"comment\">//开始游戏,游戏具体在game()函数中实现</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;游戏结束\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//结束程序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入错误,请重试\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打印菜单\"><a href=\"#打印菜单\" class=\"headerlink\" title=\"打印菜单\"></a>打印菜单</h2><p>还在做静态菜单?<del>弱爆了！</del>来试试<strong>动态出现</strong>的菜单！</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/menu.gif\"></p>\n<p>原理很<strong>简单</strong>，就是<code>打印空白数组</code>-&gt;<code>向内逐个替换两侧元素</code>-&gt;<code>清屏</code>-&gt;<code>再打印</code>-&gt;<code>再替换</code>-&gt;<code>...</code></p>\n<p><em>接下来的代码写在<code>other.c</code>中</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//动态打印菜单</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Menu</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> cover[]  =  <span class=\"string\">&quot;=======================&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> option1[] = <span class=\"string\">&quot;======  play (1) ======&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> option2[] = <span class=\"string\">&quot;======  exit (2) ======&quot;</span>; </span><br><span class=\"line\">\t<span class=\"type\">char</span> empty_c[] = <span class=\"string\">&quot;                       &quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> empty_1[] = <span class=\"string\">&quot;                       &quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> empty_2[] = <span class=\"string\">&quot;                       &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> right = <span class=\"number\">22</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (left &lt; right)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">//内容替换</span></span><br><span class=\"line\">\t\tempty_c[left] = cover[left];</span><br><span class=\"line\">\t\tempty_c[right] = cover[right];</span><br><span class=\"line\">\t\tempty_1[left] = option1[left];</span><br><span class=\"line\">\t\tempty_1[right] = option1[right];</span><br><span class=\"line\">\t\tempty_2[left] = option2[left];</span><br><span class=\"line\">\t\tempty_2[right] = option2[right];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">\t\tsystem(<span class=\"string\">&quot;cls&quot;</span>);<span class=\"comment\">//清屏</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n%s\\n%s\\n%s\\n&quot;</span>,empty_c,empty_1,empty_2,empty_c);<span class=\"comment\">//打印菜单</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tleft++;</span><br><span class=\"line\">\t\tright--;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left == right)<span class=\"comment\">//打印最终菜单</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tSleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">\t\tsystem(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">\t\tempty_c[left] = cover[left];</span><br><span class=\"line\">\t\tempty_1[left] = option1[left];</span><br><span class=\"line\">\t\tempty_2[left] = option2[left];</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n%s\\n%s\\n%s\\n&quot;</span>, empty_c, empty_1, empty_2, empty_c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现game-函数\"><a href=\"#实现game-函数\" class=\"headerlink\" title=\"实现game()函数\"></a>实现game()函数</h2><p><em>游戏的主要逻辑在game()中实现</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">game</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> mine[ROWS][COLS] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">char</span> show[ROWS][COLS] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">char</span> check[ROWS][COLS] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化棋盘，其实就是用第二个形参填充二维数组</span></span><br><span class=\"line\">\tInitBoard(mine, Blank);</span><br><span class=\"line\">\tInitBoard(show, UN);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInitCheck(check);<span class=\"comment\">//初始化check数组，逻辑与上面的初始化不同</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tSetMine(mine,EZ_RANK);<span class=\"comment\">//设置地雷</span></span><br><span class=\"line\">\tSetNum(mine);<span class=\"comment\">//设置雷周围的数字</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//DisplayBoard(mine); //用于开发时检查棋盘布局</span></span><br><span class=\"line\">\t<span class=\"comment\">//DisplayBoard(show); //同上，不使用时注释掉</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//以上是前期准备</span></span><br><span class=\"line\">\tOPMine(mine,show, check);<span class=\"comment\">//开始排雷</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;敲击enter以继续\\n&quot;</span>);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么用三个二维数组？\"><a href=\"#为什么用三个二维数组？\" class=\"headerlink\" title=\"为什么用三个二维数组？\"></a>为什么用三个二维数组？</h3><p>扫雷需要实现的功能较多，显然一个二维数组是不足以满足需求的，所以这里采用<strong>三个</strong>数组相叠加的方式，各自实现功能，并整合到一起。</p>\n<p>数组<code>mine</code>用于存放<code>雷</code>和雷周围的<code>计数数字</code></p>\n<p>数组<code>show</code>用于储存给<code>用户</code>看到的内容，可以是<code>Unkown</code>,<code>空白</code>，<code>数字</code>，<code>旗帜</code></p>\n<p>数组<code>check</code>用于记录棋盘的哪些地块被检查过了，防止后面用<strong>递归</strong>打开成片的空白区时，出现无限递归。</p>\n<p><strong>规定</strong>：检查过的坐标储存<code>字符1</code>,没检查过的坐标储存<code>字符0</code>,大出来的<strong>一圈</strong>默认储存<code>字符1</code></p>\n<h2 id=\"实现游戏用的函数\"><a href=\"#实现游戏用的函数\" class=\"headerlink\" title=\"实现游戏用的函数\"></a>实现游戏用的函数</h2><h3 id=\"先看看有哪些要声明在game-h里的\"><a href=\"#先看看有哪些要声明在game-h里的\" class=\"headerlink\" title=\"先看看有哪些要声明在game.h里的\"></a>先看看有哪些要声明在<code>game.h</code>里的</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Menu</span><span class=\"params\">()</span>;<span class=\"comment\">//这个在上文实现过了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一下函数将在下文实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化棋盘</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitBoard</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS], <span class=\"type\">char</span> sign)</span>;</span><br><span class=\"line\"><span class=\"comment\">//展示棋盘</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DisplayBoard</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS])</span>;</span><br><span class=\"line\"><span class=\"comment\">//初始化check棋盘</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitCheck</span><span class=\"params\">(<span class=\"type\">char</span> check[ROWS][COLS])</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置地雷/数字</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetMine</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS],<span class=\"type\">int</span> rank)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetNum</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS])</span>;</span><br><span class=\"line\"><span class=\"comment\">//玩家排雷用的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">OPMine</span><span class=\"params\">(<span class=\"type\">char</span> mine[ROWS][COLS],<span class=\"type\">char</span> show[ROWS][COLS],<span class=\"type\">char</span> check[ROWS][COLS])</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em>好，有了目标，接下来就去一个一个实现</em></p>\n<p><strong>注</strong>：以下代码均写在<code>game.c</code>文件里</p>\n<h3 id=\"InitBoard\"><a href=\"#InitBoard\" class=\"headerlink\" title=\"InitBoard()\"></a>InitBoard()</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitBoard</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS],<span class=\"type\">char</span> sign)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ROWS; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; COLS; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tboard[i][j] = sign;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里初始化的方式比较简单粗暴，就是用形参<code>sign</code>填充整个二维数组</p>\n<h3 id=\"DisplayBoard-函数\"><a href=\"#DisplayBoard-函数\" class=\"headerlink\" title=\"DisplayBoard()函数\"></a>DisplayBoard()函数</h3><p>这里采用的展示方式是带横纵坐标的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DisplayBoard</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//打印一排列坐标</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt;= COL; k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, k);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//打印一排横分割线</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt;= COL; k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= ROW; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d|&quot;</span>, i);<span class=\"comment\">//这句话打印横排坐标和竖分割线</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//打印一排棋盘内容</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= COL; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, board[i][j]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"InitCheck-函数\"><a href=\"#InitCheck-函数\" class=\"headerlink\" title=\"InitCheck()函数\"></a>InitCheck()函数</h3><p>这里复用了<code>InitBoard()</code>函数，是在其基础上增加了内容</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitCheck</span><span class=\"params\">(<span class=\"type\">char</span> check[ROWS][COLS])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tInitBoard(check, <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//将边缘大出来的一圈改为&#x27;1&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; COLS; k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcheck[<span class=\"number\">0</span>][k] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">\t\tcheck[ROWS - <span class=\"number\">1</span>][k] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; ROWS <span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcheck[i][<span class=\"number\">0</span>] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">\t\tcheck[i][COLS - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SetMine-函数\"><a href=\"#SetMine-函数\" class=\"headerlink\" title=\"SetMine()函数\"></a>SetMine()函数</h3><p>这里要使用<code>rand()</code>函数搭配<code>%</code>运算，来随机生成雷的坐标</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetMine</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS],<span class=\"type\">int</span> rank)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> count = <span class=\"number\">0</span>;count &lt; rank;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx = rand() % ROW + <span class=\"number\">1</span>;<span class=\"comment\">//x的范围是1~ROW</span></span><br><span class=\"line\">\t\ty = rand() % COL + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (board[x][y] == Blank)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t\tboard[x][y] = Bomb;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SetNum-函数\"><a href=\"#SetNum-函数\" class=\"headerlink\" title=\"SetNum()函数\"></a>SetNum()函数</h3><p>这里遍历一遍数组并采用<code>九宫格式</code>计数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该函数用于九宫格式计数，并在下个函数中被调用</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">CountMine</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS], <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = x - <span class=\"number\">1</span>; i &lt;= x + <span class=\"number\">1</span>; i++)<span class=\"comment\">//上中下三行</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = y - <span class=\"number\">1</span>; j &lt;= y + <span class=\"number\">1</span>; j++)<span class=\"comment\">//左中右三列</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i != x || j != y)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (board[i][j] == Bomb)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tsum++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetNum</span><span class=\"params\">(<span class=\"type\">char</span> board[ROWS][COLS])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历二维数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= ROW; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= COLS; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (board[i][j] == Blank)<span class=\"comment\">//仅操作非雷的格子</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (CountMine(board, i, j))</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tboard[i][j] = <span class=\"string\">&#x27;0&#x27;</span> + CountMine(board, i, j);<span class=\"comment\">//将返回的数字转化成字符</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OPMine-函数–核心函数\"><a href=\"#OPMine-函数–核心函数\" class=\"headerlink\" title=\"OPMine()函数–核心函数\"></a>OPMine()函数–核心函数</h3><p>该函数为游戏的<code>核心函数</code>，有内置菜单，且多次调用其它函数，其中<code>函数</code>的具体实现见<code>四级标题</code>处</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">OPMine</span><span class=\"params\">(<span class=\"type\">char</span> mine[ROWS][COLS],<span class=\"type\">char</span> show[ROWS][COLS],<span class=\"type\">char</span> check[ROWS][COLS])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"number\">0</span>;<span class=\"comment\">//横纵坐标</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> flag = <span class=\"number\">1</span>;<span class=\"comment\">//用于菜单选项</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> cont = <span class=\"number\">1</span>;<span class=\"comment\">//cont为0时游戏结束</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cont)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsystem(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">\t\tDisplayBoard(show);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;排雷(1)\\n插旗/拔旗(2)\\n请输入:&gt;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;flag);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//排雷</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;坐标格式,例&gt;2(空格)2\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入坐标:&gt;&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (show[x][y] == Flag)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;此处为旗帜，不可排雷\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (show[x][y] != UN)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;不可重复排查\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//具体排雷操作</span></span><br><span class=\"line\">\t\t\t\tcont = FindMine(mine,show,check, x, y);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cont)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//检查是否赢得游戏</span></span><br><span class=\"line\">\t\t\t\t\tcont = CheckWin(mine,show);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//插旗</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;坐标格式,例&gt;2(空格)2\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入坐标:&gt;&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t\t\tSetFlag(show, x, y);<span class=\"comment\">//插旗函数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tsystem(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n输入错误(恼\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SetFlag-函数\"><a href=\"#SetFlag-函数\" class=\"headerlink\" title=\"SetFlag()函数\"></a>SetFlag()函数</h4><p>先捏软柿子，插旗函数比较简单</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetFlag</span><span class=\"params\">(<span class=\"type\">char</span> show[ROWS][COLS], <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (show[x][y] == UN)<span class=\"comment\">//插旗</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tshow[x][y] = Flag;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (show[x][y] == Flag)<span class=\"comment\">//拔旗</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tshow[x][y] = UN;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;报错\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"ExpandBlank-函数\"><a href=\"#ExpandBlank-函数\" class=\"headerlink\" title=\"ExpandBlank()函数\"></a>ExpandBlank()函数</h4><p>这个函数用于打开成片的<code>空白区</code>,因为要从连着的空白连续开下去，所以要用到<code>函数递归</code>,此时<code>二维数组check</code>用于防止死递归</p>\n<p><strong>注</strong>：这个函数一定要写在下一个函数(FindMine)前</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ExpandBlank</span><span class=\"params\">(<span class=\"type\">char</span> mine[ROWS][COLS], <span class=\"type\">char</span> show[ROWS][COLS], <span class=\"type\">char</span> check[ROWS][COLS],<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tshow[x][y] = mine[x][y];<span class=\"comment\">//将用户看到的格子改成mine中的格子,包括空白和数字格子</span></span><br><span class=\"line\">\tcheck[x][y] = <span class=\"string\">&#x27;1&#x27;</span>;<span class=\"comment\">//探测过的格子放`1`</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mine[x][y] == Blank)<span class=\"comment\">//仅空白格子会触发递归，数字格子不会</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//九宫格式探测</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = x - <span class=\"number\">1</span>; i &lt;= x + <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = y - <span class=\"number\">1</span>; j &lt;= y + <span class=\"number\">1</span>; j++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (check[i][j] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; mine[i][j] != Bomb &amp;&amp; show[i][j] != Flag)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//含雷的格子不会执行ExpandBlank函数，就不会把雷放出来给用户看，但数字格子会</span></span><br><span class=\"line\">\t\t\t\t\tExpandBlank(mine, show, check, i, j);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FindMine-函数\"><a href=\"#FindMine-函数\" class=\"headerlink\" title=\"FindMine()函数\"></a>FindMine()函数</h4><p>排雷用的函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">FindMine</span><span class=\"params\">(<span class=\"type\">char</span> mine[ROWS][COLS], <span class=\"type\">char</span> show[ROW][COLS],<span class=\"type\">char</span> check[ROWS][COLS], <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mine[x][y] == Bomb)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDisplayBoard(mine);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;炸死，游戏结束:)\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//返回0来结束游戏</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mine[x][y] != Blank)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tshow[x][y] = mine[x][y];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//返回1来继续游戏</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//这里有对上一个函数的调用</span></span><br><span class=\"line\">\t\tExpandBlank(mine, show, check,x,y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CheckWin-函数\"><a href=\"#CheckWin-函数\" class=\"headerlink\" title=\"CheckWin()函数\"></a>CheckWin()函数</h4><p>用于检查玩家是否完全排雷，赢得游戏</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">CheckWin</span><span class=\"params\">(<span class=\"type\">char</span> mine[ROWS][COLS], <span class=\"type\">char</span> show[ROWS][COLS])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//统计没排雷的格子数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= ROW; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= COL; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (show[i][j] == UN || show[i][j] == Flag)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count == EZ_RANK)<span class=\"comment\">//统计数==雷数</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;恭喜排雷成功!\\n&quot;</span>);</span><br><span class=\"line\">\t\tDisplayBoard(mine);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//返回0，停止游戏</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>至此游戏所需的代码全部完成，已经可以编译出来玩耍啦。</p>\n<p>该实践项目主要练习了<code>二维数组</code>,<code>函数</code>,<code>函数递归</code>,<code>宏定义</code>等内容，代码量在入门学习中算较大的，本人在初次编写的时候也写出了不少bug，debug的过程是相当<del>快乐</del></p>\n<p>建议多多画示意图，<strong>耐下性子</strong>写代码和debug,哪怕是实现这样的小游戏项目，也是颇有意义的</p>\n"},{"title":"玩转N组输入和多组输入","date":"2023-10-18T14:39:57.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-20_07-34-35.jpg","_content":"\n# 引入 #\n当我们在写IO型OJ时，`多组输入`便是我们绕过不开的话题了，但**不用担心**，可能初见多组输入会觉得难以理解，但用多了之后就会发现，`多组输入` 花样并不多，混熟了就**很简单了**\n\n## 先看看一组输入输出如何完成的 #\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-19_17-06-13.jpg)\n\n*如图*：一组输入时，用`scanf`获取一组输入，并在主体部分完成数据的处理，产生结果，最后用`printf`输出产生的一组结果。\n\n*以下用实现加法的程序做演示*\n\n```C\n#include <stdio.h>\n\nint main()\n{\n    int a,b;\n    scanf(\"%d %d\",&a,&b);//获取一组输入\n    int sum = a + b;//产生结果\n    printf(\"%d\\n\",sum);//输出结果\n    return 0;\n}\n```\n\n# 然后升级到N组输入\n有的OJ题在一个测试文件中会先输入一个`n`,告诉你接下来有`n`组输入，你就要产生`n`组输出,也就是说要将`一组输入输出`**重复性地**完成`n次`。难道我们要把代码重复`n次`吗？显然不现实。\n\n所以是时候使用**循环**了，具体用法如下\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-20_07-34-35.jpg)\n\n如图，先用一个`scanf`获取循环次数`n`,然后创建一个循环，将`一组输入输出`放入循环体，一次一次循环处理即可\n\n## 变量的重置 #\n\n为防止前后两次循环产生干扰，有两种处理`变量`的方式\n\n1.(推荐)除了输入的变量，**其它所有变量**在循环体内声明，这些变量会在一次循环后*销毁*，下一次循环开始时**自动***重新声明*，从而完成**变量的自动重置**\n\n*以下面这个一次求和3个数的程序为例*\n```C\n#include <stdio.h>\n\nint main()\n{\n    int n = 0;\n    scanf(\"%d\",&n);//获取循环次数n\n    for(int i =0;i<n;i++)//创建循环\n    {\n        //以下完成一组输入输出\n        int sum = 0;//声明一个局部变量，下次循环时会自动重声明\n        int num = 0;//储存输入的数字\n        for(int j =0;j<3;j++)\n        {\n            scanf(\"%d\",&num);\n            sum+=num;\n        }\n        printf(\"%d\\n\",sum);//完成输出\n        //本次循环走完后变量sum被销毁，然后进入下一次循环,完成重置\n    }\n    return 0;\n}\n\n```\n\n2.在循环外部声明变量，然后在**循环末尾**手动重置变量\n\n*以下面这个一次求和3个数的程序为例*\n\n```C\n#include <stdio.h>\n\nint main()\n{\n    int sum = 0;//声明在循环外部\n    int n = 0;\n    scanf(\"%d\",&n);//获取循环次数n\n    for(int i =0;i<n;i++)//创建循环\n    {\n        //以下完成一组输入输出\n        int num = 0;//储存输入的数字\n        for(int j =0;j<3;j++)\n        {\n            scanf(\"%d\",&num);\n            sum+=num;\n        }\n        printf(\"%d\\n\",sum);//完成输出\n        sum = 0;//重置sum\n    }\n    return 0;\n}\n\n```\n\n\n## 要不要用数组储存输入，或储存结果再一次性输出？ #\n答案是：**可以，但没必要**。\n\n只需要像上图那么写即可，因为输入是一次性喂进去的 。存数组再输出，和每产生一个结果就输出一次，最终呈现出来是一样的（如下图）\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/%E5%A4%9A%E7%BB%84%E8%BE%93%E5%87%BA.gif)\n\n# 现在，勇士，来挑战多组输入吧 #\n\n## scanf的返回值 #\n多组输入时，究竟会输入多少组数据，也不告诉你了，**但是**，此时`scanf`的返回值就派上用场了。和我们在终端手打输入不同,OJ的输入是喂一个文件进去，所以当**输入结束时**，`scanf`的返回值是`EOF`*(意为文件结尾end of file)*,而当成功输入数据时，则会返回输入数据的个数(文档截图如下)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-20_20-46-54.jpg)\n\n## 结合循环 #\n那么就把`scanf`放入`while`循环吧,每次试图获取下一组输入时，检测是否返回值为`EOF`,若是，则跳出循环，结束程序；若否，则继续循环\n\n*以下面这个一次求和3个数的程序为例*\n\n```C\n#include <stdio.h>\nint main()\n{\n    int num = 0;//先声明至少一个待输入的变量\n    while(scanf(\"%d\",&n) != EOF)//创建循环，每次循环开始时scanf一次，并检测是否返回EOF\n    {\n        //开始构建循坏体\n        int sum = 0;\n        sum+=n;\n        //完成剩下的两次输入\n        for(int i =0; i < 3 - 1;i++)\n        {\n            scanf(\"%d\",&n);\n            sum+=n\n        }\n        printf(\"%d\\n\",sum);//完成一次输出\n    }\n    //scanf返回EOF后跳出循环\n    return 0;\n}\n```\n## 基本架构 #\n以后再要写`多组输入`，基本就像上面那个程序一样\n\n1.先声明至少一个待输入的变量\n\n2.创建循环，每次循环开始时scanf一次，并检测是否返回EOF\n\n3.开始构建循坏体(包括完成剩下的输入,完成一组输出)**别忘了回车！！！**\n\n4.直至scanf返回EOF后跳出循环\n\n# 想模拟一下多组输入看看？ #\n像下图一样每组数据间加个`空格`就行，什么？题目的样例输入有`回车`？不用管它，放心大胆地`换成空格`就行。自己`测试`程序，只需要**输出**一样就行，至于怎么输入，**没必要**和题目一模一样\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/mutiInpuut.gif)\n\n# 注意！！！不要试图在终端停止程序 #\n因为和OJ不同，在本地运行程序时，不是文件输入，而是终端输入,没法让`scanf`返回`EOF`,~~炫迈，根本停不来~~\n\n你要是想立即`中断`程序，那就按`ctrl+c`","source":"_posts/mutiInput.md","raw":"---\ntitle: 玩转N组输入和多组输入\ndate: 2023-10-18 22:39:57\ntags: C语言 多组输入\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-20_07-34-35.jpg\n---\n\n# 引入 #\n当我们在写IO型OJ时，`多组输入`便是我们绕过不开的话题了，但**不用担心**，可能初见多组输入会觉得难以理解，但用多了之后就会发现，`多组输入` 花样并不多，混熟了就**很简单了**\n\n## 先看看一组输入输出如何完成的 #\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-19_17-06-13.jpg)\n\n*如图*：一组输入时，用`scanf`获取一组输入，并在主体部分完成数据的处理，产生结果，最后用`printf`输出产生的一组结果。\n\n*以下用实现加法的程序做演示*\n\n```C\n#include <stdio.h>\n\nint main()\n{\n    int a,b;\n    scanf(\"%d %d\",&a,&b);//获取一组输入\n    int sum = a + b;//产生结果\n    printf(\"%d\\n\",sum);//输出结果\n    return 0;\n}\n```\n\n# 然后升级到N组输入\n有的OJ题在一个测试文件中会先输入一个`n`,告诉你接下来有`n`组输入，你就要产生`n`组输出,也就是说要将`一组输入输出`**重复性地**完成`n次`。难道我们要把代码重复`n次`吗？显然不现实。\n\n所以是时候使用**循环**了，具体用法如下\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-20_07-34-35.jpg)\n\n如图，先用一个`scanf`获取循环次数`n`,然后创建一个循环，将`一组输入输出`放入循环体，一次一次循环处理即可\n\n## 变量的重置 #\n\n为防止前后两次循环产生干扰，有两种处理`变量`的方式\n\n1.(推荐)除了输入的变量，**其它所有变量**在循环体内声明，这些变量会在一次循环后*销毁*，下一次循环开始时**自动***重新声明*，从而完成**变量的自动重置**\n\n*以下面这个一次求和3个数的程序为例*\n```C\n#include <stdio.h>\n\nint main()\n{\n    int n = 0;\n    scanf(\"%d\",&n);//获取循环次数n\n    for(int i =0;i<n;i++)//创建循环\n    {\n        //以下完成一组输入输出\n        int sum = 0;//声明一个局部变量，下次循环时会自动重声明\n        int num = 0;//储存输入的数字\n        for(int j =0;j<3;j++)\n        {\n            scanf(\"%d\",&num);\n            sum+=num;\n        }\n        printf(\"%d\\n\",sum);//完成输出\n        //本次循环走完后变量sum被销毁，然后进入下一次循环,完成重置\n    }\n    return 0;\n}\n\n```\n\n2.在循环外部声明变量，然后在**循环末尾**手动重置变量\n\n*以下面这个一次求和3个数的程序为例*\n\n```C\n#include <stdio.h>\n\nint main()\n{\n    int sum = 0;//声明在循环外部\n    int n = 0;\n    scanf(\"%d\",&n);//获取循环次数n\n    for(int i =0;i<n;i++)//创建循环\n    {\n        //以下完成一组输入输出\n        int num = 0;//储存输入的数字\n        for(int j =0;j<3;j++)\n        {\n            scanf(\"%d\",&num);\n            sum+=num;\n        }\n        printf(\"%d\\n\",sum);//完成输出\n        sum = 0;//重置sum\n    }\n    return 0;\n}\n\n```\n\n\n## 要不要用数组储存输入，或储存结果再一次性输出？ #\n答案是：**可以，但没必要**。\n\n只需要像上图那么写即可，因为输入是一次性喂进去的 。存数组再输出，和每产生一个结果就输出一次，最终呈现出来是一样的（如下图）\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/%E5%A4%9A%E7%BB%84%E8%BE%93%E5%87%BA.gif)\n\n# 现在，勇士，来挑战多组输入吧 #\n\n## scanf的返回值 #\n多组输入时，究竟会输入多少组数据，也不告诉你了，**但是**，此时`scanf`的返回值就派上用场了。和我们在终端手打输入不同,OJ的输入是喂一个文件进去，所以当**输入结束时**，`scanf`的返回值是`EOF`*(意为文件结尾end of file)*,而当成功输入数据时，则会返回输入数据的个数(文档截图如下)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-20_20-46-54.jpg)\n\n## 结合循环 #\n那么就把`scanf`放入`while`循环吧,每次试图获取下一组输入时，检测是否返回值为`EOF`,若是，则跳出循环，结束程序；若否，则继续循环\n\n*以下面这个一次求和3个数的程序为例*\n\n```C\n#include <stdio.h>\nint main()\n{\n    int num = 0;//先声明至少一个待输入的变量\n    while(scanf(\"%d\",&n) != EOF)//创建循环，每次循环开始时scanf一次，并检测是否返回EOF\n    {\n        //开始构建循坏体\n        int sum = 0;\n        sum+=n;\n        //完成剩下的两次输入\n        for(int i =0; i < 3 - 1;i++)\n        {\n            scanf(\"%d\",&n);\n            sum+=n\n        }\n        printf(\"%d\\n\",sum);//完成一次输出\n    }\n    //scanf返回EOF后跳出循环\n    return 0;\n}\n```\n## 基本架构 #\n以后再要写`多组输入`，基本就像上面那个程序一样\n\n1.先声明至少一个待输入的变量\n\n2.创建循环，每次循环开始时scanf一次，并检测是否返回EOF\n\n3.开始构建循坏体(包括完成剩下的输入,完成一组输出)**别忘了回车！！！**\n\n4.直至scanf返回EOF后跳出循环\n\n# 想模拟一下多组输入看看？ #\n像下图一样每组数据间加个`空格`就行，什么？题目的样例输入有`回车`？不用管它，放心大胆地`换成空格`就行。自己`测试`程序，只需要**输出**一样就行，至于怎么输入，**没必要**和题目一模一样\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/mutiInpuut.gif)\n\n# 注意！！！不要试图在终端停止程序 #\n因为和OJ不同，在本地运行程序时，不是文件输入，而是终端输入,没法让`scanf`返回`EOF`,~~炫迈，根本停不来~~\n\n你要是想立即`中断`程序，那就按`ctrl+c`","slug":"mutiInput","published":1,"updated":"2024-05-14T02:21:35.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvb000zv8p5dlksbkba","content":"<h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><p>当我们在写IO型OJ时，<code>多组输入</code>便是我们绕过不开的话题了，但<strong>不用担心</strong>，可能初见多组输入会觉得难以理解，但用多了之后就会发现，<code>多组输入</code> 花样并不多，混熟了就<strong>很简单了</strong></p>\n<h2 id=\"先看看一组输入输出如何完成的\"><a href=\"#先看看一组输入输出如何完成的\" class=\"headerlink\" title=\"先看看一组输入输出如何完成的\"></a>先看看一组输入输出如何完成的</h2><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-19_17-06-13.jpg\"></p>\n<p><em>如图</em>：一组输入时，用<code>scanf</code>获取一组输入，并在主体部分完成数据的处理，产生结果，最后用<code>printf</code>输出产生的一组结果。</p>\n<p><em>以下用实现加法的程序做演示</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;a,&amp;b);<span class=\"comment\">//获取一组输入</span></span><br><span class=\"line\">    <span class=\"type\">int</span> sum = a + b;<span class=\"comment\">//产生结果</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,sum);<span class=\"comment\">//输出结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"然后升级到N组输入\"><a href=\"#然后升级到N组输入\" class=\"headerlink\" title=\"然后升级到N组输入\"></a>然后升级到N组输入</h1><p>有的OJ题在一个测试文件中会先输入一个<code>n</code>,告诉你接下来有<code>n</code>组输入，你就要产生<code>n</code>组输出,也就是说要将<code>一组输入输出</code><strong>重复性地</strong>完成<code>n次</code>。难道我们要把代码重复<code>n次</code>吗？显然不现实。</p>\n<p>所以是时候使用<strong>循环</strong>了，具体用法如下</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-20_07-34-35.jpg\"></p>\n<p>如图，先用一个<code>scanf</code>获取循环次数<code>n</code>,然后创建一个循环，将<code>一组输入输出</code>放入循环体，一次一次循环处理即可</p>\n<h2 id=\"变量的重置\"><a href=\"#变量的重置\" class=\"headerlink\" title=\"变量的重置\"></a>变量的重置</h2><p>为防止前后两次循环产生干扰，有两种处理<code>变量</code>的方式</p>\n<p>1.(推荐)除了输入的变量，<strong>其它所有变量</strong>在循环体内声明，这些变量会在一次循环后<em>销毁</em>，下一次循环开始时<strong>自动</strong><em>重新声明</em>，从而完成<strong>变量的自动重置</strong></p>\n<p><em>以下面这个一次求和3个数的程序为例</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);<span class=\"comment\">//获取循环次数n</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"comment\">//创建循环</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//以下完成一组输入输出</span></span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;<span class=\"comment\">//声明一个局部变量，下次循环时会自动重声明</span></span><br><span class=\"line\">        <span class=\"type\">int</span> num = <span class=\"number\">0</span>;<span class=\"comment\">//储存输入的数字</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j =<span class=\"number\">0</span>;j&lt;<span class=\"number\">3</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;num);</span><br><span class=\"line\">            sum+=num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,sum);<span class=\"comment\">//完成输出</span></span><br><span class=\"line\">        <span class=\"comment\">//本次循环走完后变量sum被销毁，然后进入下一次循环,完成重置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.在循环外部声明变量，然后在<strong>循环末尾</strong>手动重置变量</p>\n<p><em>以下面这个一次求和3个数的程序为例</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;<span class=\"comment\">//声明在循环外部</span></span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);<span class=\"comment\">//获取循环次数n</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"comment\">//创建循环</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//以下完成一组输入输出</span></span><br><span class=\"line\">        <span class=\"type\">int</span> num = <span class=\"number\">0</span>;<span class=\"comment\">//储存输入的数字</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j =<span class=\"number\">0</span>;j&lt;<span class=\"number\">3</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;num);</span><br><span class=\"line\">            sum+=num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,sum);<span class=\"comment\">//完成输出</span></span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;<span class=\"comment\">//重置sum</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"要不要用数组储存输入，或储存结果再一次性输出？\"><a href=\"#要不要用数组储存输入，或储存结果再一次性输出？\" class=\"headerlink\" title=\"要不要用数组储存输入，或储存结果再一次性输出？\"></a>要不要用数组储存输入，或储存结果再一次性输出？</h2><p>答案是：<strong>可以，但没必要</strong>。</p>\n<p>只需要像上图那么写即可，因为输入是一次性喂进去的 。存数组再输出，和每产生一个结果就输出一次，最终呈现出来是一样的（如下图）</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/%E5%A4%9A%E7%BB%84%E8%BE%93%E5%87%BA.gif\"></p>\n<h1 id=\"现在，勇士，来挑战多组输入吧\"><a href=\"#现在，勇士，来挑战多组输入吧\" class=\"headerlink\" title=\"现在，勇士，来挑战多组输入吧\"></a>现在，勇士，来挑战多组输入吧</h1><h2 id=\"scanf的返回值\"><a href=\"#scanf的返回值\" class=\"headerlink\" title=\"scanf的返回值\"></a>scanf的返回值</h2><p>多组输入时，究竟会输入多少组数据，也不告诉你了，<strong>但是</strong>，此时<code>scanf</code>的返回值就派上用场了。和我们在终端手打输入不同,OJ的输入是喂一个文件进去，所以当<strong>输入结束时</strong>，<code>scanf</code>的返回值是<code>EOF</code><em>(意为文件结尾end of file)</em>,而当成功输入数据时，则会返回输入数据的个数(文档截图如下)</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-20_20-46-54.jpg\"></p>\n<h2 id=\"结合循环\"><a href=\"#结合循环\" class=\"headerlink\" title=\"结合循环\"></a>结合循环</h2><p>那么就把<code>scanf</code>放入<code>while</code>循环吧,每次试图获取下一组输入时，检测是否返回值为<code>EOF</code>,若是，则跳出循环，结束程序；若否，则继续循环</p>\n<p><em>以下面这个一次求和3个数的程序为例</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">0</span>;<span class=\"comment\">//先声明至少一个待输入的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n) != EOF)<span class=\"comment\">//创建循环，每次循环开始时scanf一次，并检测是否返回EOF</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开始构建循坏体</span></span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        sum+=n;</span><br><span class=\"line\">        <span class=\"comment\">//完成剩下的两次输入</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span> - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">            sum+=n</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,sum);<span class=\"comment\">//完成一次输出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//scanf返回EOF后跳出循环</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本架构\"><a href=\"#基本架构\" class=\"headerlink\" title=\"基本架构\"></a>基本架构</h2><p>以后再要写<code>多组输入</code>，基本就像上面那个程序一样</p>\n<p>1.先声明至少一个待输入的变量</p>\n<p>2.创建循环，每次循环开始时scanf一次，并检测是否返回EOF</p>\n<p>3.开始构建循坏体(包括完成剩下的输入,完成一组输出)<strong>别忘了回车！！！</strong></p>\n<p>4.直至scanf返回EOF后跳出循环</p>\n<h1 id=\"想模拟一下多组输入看看？\"><a href=\"#想模拟一下多组输入看看？\" class=\"headerlink\" title=\"想模拟一下多组输入看看？\"></a>想模拟一下多组输入看看？</h1><p>像下图一样每组数据间加个<code>空格</code>就行，什么？题目的样例输入有<code>回车</code>？不用管它，放心大胆地<code>换成空格</code>就行。自己<code>测试</code>程序，只需要<strong>输出</strong>一样就行，至于怎么输入，<strong>没必要</strong>和题目一模一样</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/mutiInpuut.gif\"></p>\n<h1 id=\"注意！！！不要试图在终端停止程序\"><a href=\"#注意！！！不要试图在终端停止程序\" class=\"headerlink\" title=\"注意！！！不要试图在终端停止程序\"></a>注意！！！不要试图在终端停止程序</h1><p>因为和OJ不同，在本地运行程序时，不是文件输入，而是终端输入,没法让<code>scanf</code>返回<code>EOF</code>,<del>炫迈，根本停不来</del></p>\n<p>你要是想立即<code>中断</code>程序，那就按<code>ctrl+c</code></p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><p>当我们在写IO型OJ时，<code>多组输入</code>便是我们绕过不开的话题了，但<strong>不用担心</strong>，可能初见多组输入会觉得难以理解，但用多了之后就会发现，<code>多组输入</code> 花样并不多，混熟了就<strong>很简单了</strong></p>\n<h2 id=\"先看看一组输入输出如何完成的\"><a href=\"#先看看一组输入输出如何完成的\" class=\"headerlink\" title=\"先看看一组输入输出如何完成的\"></a>先看看一组输入输出如何完成的</h2><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-19_17-06-13.jpg\"></p>\n<p><em>如图</em>：一组输入时，用<code>scanf</code>获取一组输入，并在主体部分完成数据的处理，产生结果，最后用<code>printf</code>输出产生的一组结果。</p>\n<p><em>以下用实现加法的程序做演示</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;a,&amp;b);<span class=\"comment\">//获取一组输入</span></span><br><span class=\"line\">    <span class=\"type\">int</span> sum = a + b;<span class=\"comment\">//产生结果</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,sum);<span class=\"comment\">//输出结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"然后升级到N组输入\"><a href=\"#然后升级到N组输入\" class=\"headerlink\" title=\"然后升级到N组输入\"></a>然后升级到N组输入</h1><p>有的OJ题在一个测试文件中会先输入一个<code>n</code>,告诉你接下来有<code>n</code>组输入，你就要产生<code>n</code>组输出,也就是说要将<code>一组输入输出</code><strong>重复性地</strong>完成<code>n次</code>。难道我们要把代码重复<code>n次</code>吗？显然不现实。</p>\n<p>所以是时候使用<strong>循环</strong>了，具体用法如下</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-20_07-34-35.jpg\"></p>\n<p>如图，先用一个<code>scanf</code>获取循环次数<code>n</code>,然后创建一个循环，将<code>一组输入输出</code>放入循环体，一次一次循环处理即可</p>\n<h2 id=\"变量的重置\"><a href=\"#变量的重置\" class=\"headerlink\" title=\"变量的重置\"></a>变量的重置</h2><p>为防止前后两次循环产生干扰，有两种处理<code>变量</code>的方式</p>\n<p>1.(推荐)除了输入的变量，<strong>其它所有变量</strong>在循环体内声明，这些变量会在一次循环后<em>销毁</em>，下一次循环开始时<strong>自动</strong><em>重新声明</em>，从而完成<strong>变量的自动重置</strong></p>\n<p><em>以下面这个一次求和3个数的程序为例</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);<span class=\"comment\">//获取循环次数n</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"comment\">//创建循环</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//以下完成一组输入输出</span></span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;<span class=\"comment\">//声明一个局部变量，下次循环时会自动重声明</span></span><br><span class=\"line\">        <span class=\"type\">int</span> num = <span class=\"number\">0</span>;<span class=\"comment\">//储存输入的数字</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j =<span class=\"number\">0</span>;j&lt;<span class=\"number\">3</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;num);</span><br><span class=\"line\">            sum+=num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,sum);<span class=\"comment\">//完成输出</span></span><br><span class=\"line\">        <span class=\"comment\">//本次循环走完后变量sum被销毁，然后进入下一次循环,完成重置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.在循环外部声明变量，然后在<strong>循环末尾</strong>手动重置变量</p>\n<p><em>以下面这个一次求和3个数的程序为例</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;<span class=\"comment\">//声明在循环外部</span></span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);<span class=\"comment\">//获取循环次数n</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"comment\">//创建循环</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//以下完成一组输入输出</span></span><br><span class=\"line\">        <span class=\"type\">int</span> num = <span class=\"number\">0</span>;<span class=\"comment\">//储存输入的数字</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j =<span class=\"number\">0</span>;j&lt;<span class=\"number\">3</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;num);</span><br><span class=\"line\">            sum+=num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,sum);<span class=\"comment\">//完成输出</span></span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;<span class=\"comment\">//重置sum</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"要不要用数组储存输入，或储存结果再一次性输出？\"><a href=\"#要不要用数组储存输入，或储存结果再一次性输出？\" class=\"headerlink\" title=\"要不要用数组储存输入，或储存结果再一次性输出？\"></a>要不要用数组储存输入，或储存结果再一次性输出？</h2><p>答案是：<strong>可以，但没必要</strong>。</p>\n<p>只需要像上图那么写即可，因为输入是一次性喂进去的 。存数组再输出，和每产生一个结果就输出一次，最终呈现出来是一样的（如下图）</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/%E5%A4%9A%E7%BB%84%E8%BE%93%E5%87%BA.gif\"></p>\n<h1 id=\"现在，勇士，来挑战多组输入吧\"><a href=\"#现在，勇士，来挑战多组输入吧\" class=\"headerlink\" title=\"现在，勇士，来挑战多组输入吧\"></a>现在，勇士，来挑战多组输入吧</h1><h2 id=\"scanf的返回值\"><a href=\"#scanf的返回值\" class=\"headerlink\" title=\"scanf的返回值\"></a>scanf的返回值</h2><p>多组输入时，究竟会输入多少组数据，也不告诉你了，<strong>但是</strong>，此时<code>scanf</code>的返回值就派上用场了。和我们在终端手打输入不同,OJ的输入是喂一个文件进去，所以当<strong>输入结束时</strong>，<code>scanf</code>的返回值是<code>EOF</code><em>(意为文件结尾end of file)</em>,而当成功输入数据时，则会返回输入数据的个数(文档截图如下)</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-20_20-46-54.jpg\"></p>\n<h2 id=\"结合循环\"><a href=\"#结合循环\" class=\"headerlink\" title=\"结合循环\"></a>结合循环</h2><p>那么就把<code>scanf</code>放入<code>while</code>循环吧,每次试图获取下一组输入时，检测是否返回值为<code>EOF</code>,若是，则跳出循环，结束程序；若否，则继续循环</p>\n<p><em>以下面这个一次求和3个数的程序为例</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">0</span>;<span class=\"comment\">//先声明至少一个待输入的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n) != EOF)<span class=\"comment\">//创建循环，每次循环开始时scanf一次，并检测是否返回EOF</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开始构建循坏体</span></span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        sum+=n;</span><br><span class=\"line\">        <span class=\"comment\">//完成剩下的两次输入</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span> - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">            sum+=n</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,sum);<span class=\"comment\">//完成一次输出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//scanf返回EOF后跳出循环</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本架构\"><a href=\"#基本架构\" class=\"headerlink\" title=\"基本架构\"></a>基本架构</h2><p>以后再要写<code>多组输入</code>，基本就像上面那个程序一样</p>\n<p>1.先声明至少一个待输入的变量</p>\n<p>2.创建循环，每次循环开始时scanf一次，并检测是否返回EOF</p>\n<p>3.开始构建循坏体(包括完成剩下的输入,完成一组输出)<strong>别忘了回车！！！</strong></p>\n<p>4.直至scanf返回EOF后跳出循环</p>\n<h1 id=\"想模拟一下多组输入看看？\"><a href=\"#想模拟一下多组输入看看？\" class=\"headerlink\" title=\"想模拟一下多组输入看看？\"></a>想模拟一下多组输入看看？</h1><p>像下图一样每组数据间加个<code>空格</code>就行，什么？题目的样例输入有<code>回车</code>？不用管它，放心大胆地<code>换成空格</code>就行。自己<code>测试</code>程序，只需要<strong>输出</strong>一样就行，至于怎么输入，<strong>没必要</strong>和题目一模一样</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/mutiInpuut.gif\"></p>\n<h1 id=\"注意！！！不要试图在终端停止程序\"><a href=\"#注意！！！不要试图在终端停止程序\" class=\"headerlink\" title=\"注意！！！不要试图在终端停止程序\"></a>注意！！！不要试图在终端停止程序</h1><p>因为和OJ不同，在本地运行程序时，不是文件输入，而是终端输入,没法让<code>scanf</code>返回<code>EOF</code>,<del>炫迈，根本停不来</del></p>\n<p>你要是想立即<code>中断</code>程序，那就按<code>ctrl+c</code></p>\n"},{"title":"进程间通信--匿名管道与命名管道","date":"2024-08-02T13:16:14.000Z","_content":"\n# 什么是管道文件\n\n# 匿名管道\n\n## 小小项目--进程池\n详见[此博客🔗](https://www.supdriver.top/2024/08/02/processPool/)\n\n# 命名管道","source":"_posts/pipe.md","raw":"---\ntitle: 进程间通信--匿名管道与命名管道\ndate: 2024-08-02 21:16:14\ntags: Linux\n---\n\n# 什么是管道文件\n\n# 匿名管道\n\n## 小小项目--进程池\n详见[此博客🔗](https://www.supdriver.top/2024/08/02/processPool/)\n\n# 命名管道","slug":"pipe","published":1,"updated":"2024-08-02T13:46:57.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvb0010v8p540wc9lkl","content":"<h1 id=\"什么是管道文件\"><a href=\"#什么是管道文件\" class=\"headerlink\" title=\"什么是管道文件\"></a>什么是管道文件</h1><h1 id=\"匿名管道\"><a href=\"#匿名管道\" class=\"headerlink\" title=\"匿名管道\"></a>匿名管道</h1><h2 id=\"小小项目–进程池\"><a href=\"#小小项目–进程池\" class=\"headerlink\" title=\"小小项目–进程池\"></a>小小项目–进程池</h2><p>详见<a href=\"https://www.supdriver.top/2024/08/02/processPool/\">此博客🔗</a></p>\n<h1 id=\"命名管道\"><a href=\"#命名管道\" class=\"headerlink\" title=\"命名管道\"></a>命名管道</h1>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"什么是管道文件\"><a href=\"#什么是管道文件\" class=\"headerlink\" title=\"什么是管道文件\"></a>什么是管道文件</h1><h1 id=\"匿名管道\"><a href=\"#匿名管道\" class=\"headerlink\" title=\"匿名管道\"></a>匿名管道</h1><h2 id=\"小小项目–进程池\"><a href=\"#小小项目–进程池\" class=\"headerlink\" title=\"小小项目–进程池\"></a>小小项目–进程池</h2><p>详见<a href=\"https://www.supdriver.top/2024/08/02/processPool/\">此博客🔗</a></p>\n<h1 id=\"命名管道\"><a href=\"#命名管道\" class=\"headerlink\" title=\"命名管道\"></a>命名管道</h1>"},{"title":"=Linux=一步步自己写一个shell程序","date":"2024-06-03T16:13:55.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/craftTerminal.png","_content":"\n***\n系统：阿里云服务器Linux CentOs 7\n\n编辑器: vim \n\n编译器: gcc (支持C99)\n***\n\n# 文件\n本次写的程序较为简单，所以只使用一个源文件\n\n所以在shell中`touch`一个`makefile`和一个`myshell.c`\n> shell\n```Linux\ntouch makefile\ntouch myshell.c\n```\n\n然后编辑`makefile`文件\n> makefile\n\n```makefile\n1 myshell:myshell.c                         \n  gcc -o $@ $^ -std=c99\n\n.PHONY:clean\nclean:\n   rm -f myshell\n```\n# 头文件\n本程序因函数较杂，会`include`较多头文件\n\n> myshell.c\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <assert.h>\n```\n\n# 宏定义\n为了统一修改部分参数，以及使参数更易读，这里使用部分宏定义\n> myshell.c\n```C\n#define LEFT \"[\"\n#define RIGHT \"]\"\n#define LABEL \"# \"//注意有个空格\n\n#define LINE_SIZE 1024\n#define ARGC_SIZE 32\n#define DLIM \" \\t\" //可能有多个分隔符\n#define EXIT_CODE 446 //特殊的退出码，表示程序未正常退出，具体数字目前没有约定\n```\n\n# 全局变量\n我们需要用全局的变量来存储`命令行`(command line)和`参数包`\n\n> myshell.c\n```C\nchar cline[LINE_SIZE];\nchar* arg[ARGC_SIZE];\nint last_code = 0;\n```\n\n# 用`Interact`函数实现交互功能\n\n## 打印命令行头部\n为了打印命令行头部，我们需要知道三样东西：用户，主机，工作路径，这里包装了三个函数来分别调用`getenv`函数\n\n> myshell.c\n```C\nconst char* getusername()//获取用户名\n{\n    return getenv(\"USER\");\n}\n\nconst char* gethostname()//获取主机名\n{\n    return getenv(\"HOSTNAME\");\n}\n\nconst char* getpwd()//获取工作路径\n{\n    return getenv(\"PWD\");\n}\n\n```\n\n因此打印的代码为\n```C\nprintf(LEFT \"%s@%s %s\" RIGHT LABLE,getusername(),gethostname(),getpwd());\n```\n\n## 获取命令行\n使用Linux的终端时，我们会打`命令+空格+参数...`,因此我们的`myshell`程序也要支持连空格一起读入,读入一整行命令\n\n所以`scanf`并不适合用来读入命令，这次我们使用`fgets`函数，这个函数可以从`文件流`中整行读入，而正好在终端输入的字符都储存在`标准输入流`,即`stdin`中,因此可以用一行代码获取`命令行`\n\n为安全考虑，这里使用一个临时变量`s`来接受`fgets`的返回值并用`assert`判空,但在`release`版本中`assert`不被编译，导致变量`s`未被调用，而报警告（甚至报错），所以还要再加一句`(void) s`,只为了调用一下`s`,没有更多用处\n\n之后便完成了文件流的读取\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-06-04_16-25-34.png)\n\n但此时获得的命令行在`\\0`前以`\\n`结尾，所以要把`\\n`替换为`\\0`\n\n```C\nchar *s = fgets(cline,size,stdin);\nassert(s);//s为空时报错\n(void) s;//防止因未调用s而报警告\n\ncline[strlen(cline) - 1] = '\\0';\n```\n\n## 整个函数体\n> myshell.c\n```C\nvoid Interact(char* cline,int size)\n{\n    printf(LEFT \"%s@%s %s\" RIGHT LABLE,getusername(),gethostname(),getpwd());//打印头部\n    fgets(cline,size,stdin);//获取命令行\n    assert(s);//s为空时报错\n    (void) s;//防止因未调用s而报警告\n    cline[strlen(cline) - 1] = '\\0';\n\n    printf(\"echo: %s\\n\");//写一段测一段的测试代码，输出获取的命令行,测完可删\n}\n```\n\n## 测试\n先在`main`函数里调用一次`Interact`函数测试一下\n\n我的测试结果如下\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-06-04_16-42-55.png)\n\n可以看到达到了预期效果，但是`工作路径`太长了，还是学一学Linux的展示方式吧，我们来把`getpwd`函数重写一下\n\n## 重写`getpwd()`\n```C\nconst char* getpwd()\n{\n    const char* pwd = getenv(\"PWD\");\n    int n = strlen(pwd);\n    while(n)\n    {\n        if(pwd[n] == '/') break;\n        n--;\n    }\n    return (pwd+n+1);\n}\n```\n这样打印出的工作路径仅为当前文件夹，可以缩短很多长度\n\n# 分割命令行\n现在的`cline`中的命令行还是完整的一串，需要分割出命令和参数包，因此我们也封装一个函数`Splitcline`\n\n这里使用的是`string.h`中的`strtok`函数，可以用特定的单个或多个字符将字符串分割\n\n> myshell.c\n\n```C\nint Splitcline(char*cline,char** argv)\n{\n    memset(argv,0,sizeof(char*) * ARGV_SIZE);\n    int i = 1;\n    argv[0] = strtok(cline,DLIM);\n    if(argv[0])\n        while(argv[i++] == strtok(NULL,DLIM));\n\n    *argv_n = i-1;//输出型参数\n}\n\n```\n\n再写一段测试代码\n\n> myshell.c\n\n```C\nint main()\n{\n    Interact(cline,sizeof(cline));\n\n    Splitcline(cline,argv);\n    for(int i = 0;argv[i];i++)//逐行打印输出argv的内容\n    {\n        printf(\"%s\\n\",argv[i]);\n    }\n    return 0;\n}\n```\n\n# 执行外部命令\n通过`fork`函数创建子进程，然后用`execvp`替换子进程，通过环境变量`PATH`找到外部命令并替换到子进程执行，同时父进程`myshell`调用`waitpid`函数等待子进程结束，保证`myshell`程序正常运行\n\n> myshell.c\n\n```C\nvoid ExternalCommand()\n{\n    pid_t id = fork();\n    if(id <0)\n    {\n        perror(\"fork\");\n        return;\n    }\n    else if(id == 0)//child\n    {\n        execvp(argv[0],argv+1);//+1之后才是参数列表\n        exit(EXIT_CODE);\n    }\n    else\n    {\n        int status = 0;\n        pid_t rid = waitpid(id,&status,0);\n        if(rid == id)\n        {\n            last_code = WEXITSTATUS(status);\n        }\n        return;\n    }\n}\n```\n\n# 执行内建命令\n`shell`中并不是所有的命令都由子进程完成的，比如用`cd`命令改变工作路径，就不能让子进程去执行(~~否则只是改了子进程的路径~~),因此我们还需要加一个内建命令接口\n\n> myshell.c\n\n```C\nint BuildCommand(char* _argv[],int _argv_n)//处理内建命令\n{\n  if(_argv_n == 2 && strcmp(_argv[0],\"cd\")== 0)//特殊处理的命令1\n  {\n    chdir(argv[1]);\n    getpwd();\n    sprintf(getenv(\"PWD\"),\"%s\",pwd);\n    return 1;//完成执行返回1\n  }\n  //还可以继续else uf 加特殊处理的命令2,3,4,,,n\n  return 0;//未执行内建命令。返回0\n}\n\n```\n\n# 完成框架\n\n至此，把`main`函数组织好后，一个简单的`shell`代码框架就搭好了，可以根据需要继续扩展`内建命令`的内容，比如导出环境变量，实现`echo`指令等（略写）。\n\n> myshell.c\n\n```C\nint main()\n{\n   int quit = 0;\n   while(!quit)\n   {\n     Interact(cline,sizeof(cline));\n     int argv_n;\n     Splitcline(cline,argv,&argv_n);\n \n     if(argv_n == 0 )continue;\n     \n     int flag = BuildCommand(argv,argv_n);\n     if(!flag) ExeternalCommand();\n   }\n \n    return 0;                            \n}          \n```\n\n# 拓展\n这里的命令行处理并没有考虑`输入/输出重定向`,所以仍有较大的需要完善的地方\n\n## 源代码\n\n[点我去往github仓库](https://github.com/sis-shen/Linux_Code)。\n\n","source":"_posts/myshell.md","raw":"---\ntitle: =Linux=一步步自己写一个shell程序\ndate: 2024-06-04 00:13:55\ntags: Linux C\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/craftTerminal.png\n---\n\n***\n系统：阿里云服务器Linux CentOs 7\n\n编辑器: vim \n\n编译器: gcc (支持C99)\n***\n\n# 文件\n本次写的程序较为简单，所以只使用一个源文件\n\n所以在shell中`touch`一个`makefile`和一个`myshell.c`\n> shell\n```Linux\ntouch makefile\ntouch myshell.c\n```\n\n然后编辑`makefile`文件\n> makefile\n\n```makefile\n1 myshell:myshell.c                         \n  gcc -o $@ $^ -std=c99\n\n.PHONY:clean\nclean:\n   rm -f myshell\n```\n# 头文件\n本程序因函数较杂，会`include`较多头文件\n\n> myshell.c\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <assert.h>\n```\n\n# 宏定义\n为了统一修改部分参数，以及使参数更易读，这里使用部分宏定义\n> myshell.c\n```C\n#define LEFT \"[\"\n#define RIGHT \"]\"\n#define LABEL \"# \"//注意有个空格\n\n#define LINE_SIZE 1024\n#define ARGC_SIZE 32\n#define DLIM \" \\t\" //可能有多个分隔符\n#define EXIT_CODE 446 //特殊的退出码，表示程序未正常退出，具体数字目前没有约定\n```\n\n# 全局变量\n我们需要用全局的变量来存储`命令行`(command line)和`参数包`\n\n> myshell.c\n```C\nchar cline[LINE_SIZE];\nchar* arg[ARGC_SIZE];\nint last_code = 0;\n```\n\n# 用`Interact`函数实现交互功能\n\n## 打印命令行头部\n为了打印命令行头部，我们需要知道三样东西：用户，主机，工作路径，这里包装了三个函数来分别调用`getenv`函数\n\n> myshell.c\n```C\nconst char* getusername()//获取用户名\n{\n    return getenv(\"USER\");\n}\n\nconst char* gethostname()//获取主机名\n{\n    return getenv(\"HOSTNAME\");\n}\n\nconst char* getpwd()//获取工作路径\n{\n    return getenv(\"PWD\");\n}\n\n```\n\n因此打印的代码为\n```C\nprintf(LEFT \"%s@%s %s\" RIGHT LABLE,getusername(),gethostname(),getpwd());\n```\n\n## 获取命令行\n使用Linux的终端时，我们会打`命令+空格+参数...`,因此我们的`myshell`程序也要支持连空格一起读入,读入一整行命令\n\n所以`scanf`并不适合用来读入命令，这次我们使用`fgets`函数，这个函数可以从`文件流`中整行读入，而正好在终端输入的字符都储存在`标准输入流`,即`stdin`中,因此可以用一行代码获取`命令行`\n\n为安全考虑，这里使用一个临时变量`s`来接受`fgets`的返回值并用`assert`判空,但在`release`版本中`assert`不被编译，导致变量`s`未被调用，而报警告（甚至报错），所以还要再加一句`(void) s`,只为了调用一下`s`,没有更多用处\n\n之后便完成了文件流的读取\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-06-04_16-25-34.png)\n\n但此时获得的命令行在`\\0`前以`\\n`结尾，所以要把`\\n`替换为`\\0`\n\n```C\nchar *s = fgets(cline,size,stdin);\nassert(s);//s为空时报错\n(void) s;//防止因未调用s而报警告\n\ncline[strlen(cline) - 1] = '\\0';\n```\n\n## 整个函数体\n> myshell.c\n```C\nvoid Interact(char* cline,int size)\n{\n    printf(LEFT \"%s@%s %s\" RIGHT LABLE,getusername(),gethostname(),getpwd());//打印头部\n    fgets(cline,size,stdin);//获取命令行\n    assert(s);//s为空时报错\n    (void) s;//防止因未调用s而报警告\n    cline[strlen(cline) - 1] = '\\0';\n\n    printf(\"echo: %s\\n\");//写一段测一段的测试代码，输出获取的命令行,测完可删\n}\n```\n\n## 测试\n先在`main`函数里调用一次`Interact`函数测试一下\n\n我的测试结果如下\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-06-04_16-42-55.png)\n\n可以看到达到了预期效果，但是`工作路径`太长了，还是学一学Linux的展示方式吧，我们来把`getpwd`函数重写一下\n\n## 重写`getpwd()`\n```C\nconst char* getpwd()\n{\n    const char* pwd = getenv(\"PWD\");\n    int n = strlen(pwd);\n    while(n)\n    {\n        if(pwd[n] == '/') break;\n        n--;\n    }\n    return (pwd+n+1);\n}\n```\n这样打印出的工作路径仅为当前文件夹，可以缩短很多长度\n\n# 分割命令行\n现在的`cline`中的命令行还是完整的一串，需要分割出命令和参数包，因此我们也封装一个函数`Splitcline`\n\n这里使用的是`string.h`中的`strtok`函数，可以用特定的单个或多个字符将字符串分割\n\n> myshell.c\n\n```C\nint Splitcline(char*cline,char** argv)\n{\n    memset(argv,0,sizeof(char*) * ARGV_SIZE);\n    int i = 1;\n    argv[0] = strtok(cline,DLIM);\n    if(argv[0])\n        while(argv[i++] == strtok(NULL,DLIM));\n\n    *argv_n = i-1;//输出型参数\n}\n\n```\n\n再写一段测试代码\n\n> myshell.c\n\n```C\nint main()\n{\n    Interact(cline,sizeof(cline));\n\n    Splitcline(cline,argv);\n    for(int i = 0;argv[i];i++)//逐行打印输出argv的内容\n    {\n        printf(\"%s\\n\",argv[i]);\n    }\n    return 0;\n}\n```\n\n# 执行外部命令\n通过`fork`函数创建子进程，然后用`execvp`替换子进程，通过环境变量`PATH`找到外部命令并替换到子进程执行，同时父进程`myshell`调用`waitpid`函数等待子进程结束，保证`myshell`程序正常运行\n\n> myshell.c\n\n```C\nvoid ExternalCommand()\n{\n    pid_t id = fork();\n    if(id <0)\n    {\n        perror(\"fork\");\n        return;\n    }\n    else if(id == 0)//child\n    {\n        execvp(argv[0],argv+1);//+1之后才是参数列表\n        exit(EXIT_CODE);\n    }\n    else\n    {\n        int status = 0;\n        pid_t rid = waitpid(id,&status,0);\n        if(rid == id)\n        {\n            last_code = WEXITSTATUS(status);\n        }\n        return;\n    }\n}\n```\n\n# 执行内建命令\n`shell`中并不是所有的命令都由子进程完成的，比如用`cd`命令改变工作路径，就不能让子进程去执行(~~否则只是改了子进程的路径~~),因此我们还需要加一个内建命令接口\n\n> myshell.c\n\n```C\nint BuildCommand(char* _argv[],int _argv_n)//处理内建命令\n{\n  if(_argv_n == 2 && strcmp(_argv[0],\"cd\")== 0)//特殊处理的命令1\n  {\n    chdir(argv[1]);\n    getpwd();\n    sprintf(getenv(\"PWD\"),\"%s\",pwd);\n    return 1;//完成执行返回1\n  }\n  //还可以继续else uf 加特殊处理的命令2,3,4,,,n\n  return 0;//未执行内建命令。返回0\n}\n\n```\n\n# 完成框架\n\n至此，把`main`函数组织好后，一个简单的`shell`代码框架就搭好了，可以根据需要继续扩展`内建命令`的内容，比如导出环境变量，实现`echo`指令等（略写）。\n\n> myshell.c\n\n```C\nint main()\n{\n   int quit = 0;\n   while(!quit)\n   {\n     Interact(cline,sizeof(cline));\n     int argv_n;\n     Splitcline(cline,argv,&argv_n);\n \n     if(argv_n == 0 )continue;\n     \n     int flag = BuildCommand(argv,argv_n);\n     if(!flag) ExeternalCommand();\n   }\n \n    return 0;                            \n}          \n```\n\n# 拓展\n这里的命令行处理并没有考虑`输入/输出重定向`,所以仍有较大的需要完善的地方\n\n## 源代码\n\n[点我去往github仓库](https://github.com/sis-shen/Linux_Code)。\n\n","slug":"myshell","published":1,"updated":"2024-06-18T14:38:21.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvc0012v8p57vsycqax","content":"<hr>\n<p>系统：阿里云服务器Linux CentOs 7</p>\n<p>编辑器: vim </p>\n<p>编译器: gcc (支持C99)</p>\n<hr>\n<h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><p>本次写的程序较为简单，所以只使用一个源文件</p>\n<p>所以在shell中<code>touch</code>一个<code>makefile</code>和一个<code>myshell.c</code></p>\n<blockquote>\n<p>shell</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch makefile</span><br><span class=\"line\">touch myshell.c</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑<code>makefile</code>文件</p>\n<blockquote>\n<p>makefile</p>\n</blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 myshell:myshell.c                         </span><br><span class=\"line\">  gcc -o <span class=\"variable\">$@</span> <span class=\"variable\">$^</span> -std=c99</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">   rm -f myshell</span><br></pre></td></tr></table></figure>\n<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><p>本程序因函数较杂，会<code>include</code>较多头文件</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"宏定义\"><a href=\"#宏定义\" class=\"headerlink\" title=\"宏定义\"></a>宏定义</h1><p>为了统一修改部分参数，以及使参数更易读，这里使用部分宏定义</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEFT <span class=\"string\">&quot;[&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RIGHT <span class=\"string\">&quot;]&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LABEL <span class=\"string\">&quot;# &quot;</span><span class=\"comment\">//注意有个空格</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LINE_SIZE 1024</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARGC_SIZE 32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DLIM <span class=\"string\">&quot; \\t&quot;</span> <span class=\"comment\">//可能有多个分隔符</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> EXIT_CODE 446 <span class=\"comment\">//特殊的退出码，表示程序未正常退出，具体数字目前没有约定</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h1><p>我们需要用全局的变量来存储<code>命令行</code>(command line)和<code>参数包</code></p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> cline[LINE_SIZE];</span><br><span class=\"line\"><span class=\"type\">char</span>* arg[ARGC_SIZE];</span><br><span class=\"line\"><span class=\"type\">int</span> last_code = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"用Interact函数实现交互功能\"><a href=\"#用Interact函数实现交互功能\" class=\"headerlink\" title=\"用Interact函数实现交互功能\"></a>用<code>Interact</code>函数实现交互功能</h1><h2 id=\"打印命令行头部\"><a href=\"#打印命令行头部\" class=\"headerlink\" title=\"打印命令行头部\"></a>打印命令行头部</h2><p>为了打印命令行头部，我们需要知道三样东西：用户，主机，工作路径，这里包装了三个函数来分别调用<code>getenv</code>函数</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title function_\">getusername</span><span class=\"params\">()</span><span class=\"comment\">//获取用户名</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getenv(<span class=\"string\">&quot;USER&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title function_\">gethostname</span><span class=\"params\">()</span><span class=\"comment\">//获取主机名</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getenv(<span class=\"string\">&quot;HOSTNAME&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title function_\">getpwd</span><span class=\"params\">()</span><span class=\"comment\">//获取工作路径</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getenv(<span class=\"string\">&quot;PWD&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>因此打印的代码为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(LEFT <span class=\"string\">&quot;%s@%s %s&quot;</span> RIGHT LABLE,getusername(),gethostname(),getpwd());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取命令行\"><a href=\"#获取命令行\" class=\"headerlink\" title=\"获取命令行\"></a>获取命令行</h2><p>使用Linux的终端时，我们会打<code>命令+空格+参数...</code>,因此我们的<code>myshell</code>程序也要支持连空格一起读入,读入一整行命令</p>\n<p>所以<code>scanf</code>并不适合用来读入命令，这次我们使用<code>fgets</code>函数，这个函数可以从<code>文件流</code>中整行读入，而正好在终端输入的字符都储存在<code>标准输入流</code>,即<code>stdin</code>中,因此可以用一行代码获取<code>命令行</code></p>\n<p>为安全考虑，这里使用一个临时变量<code>s</code>来接受<code>fgets</code>的返回值并用<code>assert</code>判空,但在<code>release</code>版本中<code>assert</code>不被编译，导致变量<code>s</code>未被调用，而报警告（甚至报错），所以还要再加一句<code>(void) s</code>,只为了调用一下<code>s</code>,没有更多用处</p>\n<p>之后便完成了文件流的读取</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-06-04_16-25-34.png\"></p>\n<p>但此时获得的命令行在<code>\\0</code>前以<code>\\n</code>结尾，所以要把<code>\\n</code>替换为<code>\\0</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *s = fgets(cline,size,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">assert(s);<span class=\"comment\">//s为空时报错</span></span><br><span class=\"line\">(<span class=\"type\">void</span>) s;<span class=\"comment\">//防止因未调用s而报警告</span></span><br><span class=\"line\"></span><br><span class=\"line\">cline[<span class=\"built_in\">strlen</span>(cline) - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整个函数体\"><a href=\"#整个函数体\" class=\"headerlink\" title=\"整个函数体\"></a>整个函数体</h2><blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Interact</span><span class=\"params\">(<span class=\"type\">char</span>* cline,<span class=\"type\">int</span> size)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(LEFT <span class=\"string\">&quot;%s@%s %s&quot;</span> RIGHT LABLE,getusername(),gethostname(),getpwd());<span class=\"comment\">//打印头部</span></span><br><span class=\"line\">    fgets(cline,size,<span class=\"built_in\">stdin</span>);<span class=\"comment\">//获取命令行</span></span><br><span class=\"line\">    assert(s);<span class=\"comment\">//s为空时报错</span></span><br><span class=\"line\">    (<span class=\"type\">void</span>) s;<span class=\"comment\">//防止因未调用s而报警告</span></span><br><span class=\"line\">    cline[<span class=\"built_in\">strlen</span>(cline) - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;echo: %s\\n&quot;</span>);<span class=\"comment\">//写一段测一段的测试代码，输出获取的命令行,测完可删</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>先在<code>main</code>函数里调用一次<code>Interact</code>函数测试一下</p>\n<p>我的测试结果如下</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-06-04_16-42-55.png\"></p>\n<p>可以看到达到了预期效果，但是<code>工作路径</code>太长了，还是学一学Linux的展示方式吧，我们来把<code>getpwd</code>函数重写一下</p>\n<h2 id=\"重写getpwd\"><a href=\"#重写getpwd\" class=\"headerlink\" title=\"重写getpwd()\"></a>重写<code>getpwd()</code></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title function_\">getpwd</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* pwd = getenv(<span class=\"string\">&quot;PWD&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">strlen</span>(pwd);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pwd[n] == <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (pwd+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样打印出的工作路径仅为当前文件夹，可以缩短很多长度</p>\n<h1 id=\"分割命令行\"><a href=\"#分割命令行\" class=\"headerlink\" title=\"分割命令行\"></a>分割命令行</h1><p>现在的<code>cline</code>中的命令行还是完整的一串，需要分割出命令和参数包，因此我们也封装一个函数<code>Splitcline</code></p>\n<p>这里使用的是<code>string.h</code>中的<code>strtok</code>函数，可以用特定的单个或多个字符将字符串分割</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Splitcline</span><span class=\"params\">(<span class=\"type\">char</span>*cline,<span class=\"type\">char</span>** argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(argv,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>*) * ARGV_SIZE);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    argv[<span class=\"number\">0</span>] = strtok(cline,DLIM);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argv[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(argv[i++] == strtok(<span class=\"literal\">NULL</span>,DLIM));</span><br><span class=\"line\"></span><br><span class=\"line\">    *argv_n = i<span class=\"number\">-1</span>;<span class=\"comment\">//输出型参数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>再写一段测试代码</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Interact(cline,<span class=\"keyword\">sizeof</span>(cline));</span><br><span class=\"line\"></span><br><span class=\"line\">    Splitcline(cline,argv);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;argv[i];i++)<span class=\"comment\">//逐行打印输出argv的内容</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,argv[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"执行外部命令\"><a href=\"#执行外部命令\" class=\"headerlink\" title=\"执行外部命令\"></a>执行外部命令</h1><p>通过<code>fork</code>函数创建子进程，然后用<code>execvp</code>替换子进程，通过环境变量<code>PATH</code>找到外部命令并替换到子进程执行，同时父进程<code>myshell</code>调用<code>waitpid</code>函数等待子进程结束，保证<code>myshell</code>程序正常运行</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ExternalCommand</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id &lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;fork&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)<span class=\"comment\">//child</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        execvp(argv[<span class=\"number\">0</span>],argv+<span class=\"number\">1</span>);<span class=\"comment\">//+1之后才是参数列表</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_CODE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> status = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">pid_t</span> rid = waitpid(id,&amp;status,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rid == id)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            last_code = WEXITSTATUS(status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"执行内建命令\"><a href=\"#执行内建命令\" class=\"headerlink\" title=\"执行内建命令\"></a>执行内建命令</h1><p><code>shell</code>中并不是所有的命令都由子进程完成的，比如用<code>cd</code>命令改变工作路径，就不能让子进程去执行(<del>否则只是改了子进程的路径</del>),因此我们还需要加一个内建命令接口</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">BuildCommand</span><span class=\"params\">(<span class=\"type\">char</span>* _argv[],<span class=\"type\">int</span> _argv_n)</span><span class=\"comment\">//处理内建命令</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(_argv_n == <span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(_argv[<span class=\"number\">0</span>],<span class=\"string\">&quot;cd&quot;</span>)== <span class=\"number\">0</span>)<span class=\"comment\">//特殊处理的命令1</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    chdir(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    getpwd();</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(getenv(<span class=\"string\">&quot;PWD&quot;</span>),<span class=\"string\">&quot;%s&quot;</span>,pwd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//完成执行返回1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//还可以继续else uf 加特殊处理的命令2,3,4,,,n</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//未执行内建命令。返回0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"完成框架\"><a href=\"#完成框架\" class=\"headerlink\" title=\"完成框架\"></a>完成框架</h1><p>至此，把<code>main</code>函数组织好后，一个简单的<code>shell</code>代码框架就搭好了，可以根据需要继续扩展<code>内建命令</code>的内容，比如导出环境变量，实现<code>echo</code>指令等（略写）。</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> quit = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(!quit)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     Interact(cline,<span class=\"keyword\">sizeof</span>(cline));</span><br><span class=\"line\">     <span class=\"type\">int</span> argv_n;</span><br><span class=\"line\">     Splitcline(cline,argv,&amp;argv_n);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span>(argv_n == <span class=\"number\">0</span> )<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"type\">int</span> flag = BuildCommand(argv,argv_n);</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(!flag) ExeternalCommand();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;                            </span><br><span class=\"line\">&#125;          </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>这里的命令行处理并没有考虑<code>输入/输出重定向</code>,所以仍有较大的需要完善的地方</p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p><a href=\"https://github.com/sis-shen/Linux_Code\">点我去往github仓库</a>。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<hr>\n<p>系统：阿里云服务器Linux CentOs 7</p>\n<p>编辑器: vim </p>\n<p>编译器: gcc (支持C99)</p>\n<hr>\n<h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><p>本次写的程序较为简单，所以只使用一个源文件</p>\n<p>所以在shell中<code>touch</code>一个<code>makefile</code>和一个<code>myshell.c</code></p>\n<blockquote>\n<p>shell</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch makefile</span><br><span class=\"line\">touch myshell.c</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑<code>makefile</code>文件</p>\n<blockquote>\n<p>makefile</p>\n</blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 myshell:myshell.c                         </span><br><span class=\"line\">  gcc -o <span class=\"variable\">$@</span> <span class=\"variable\">$^</span> -std=c99</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">   rm -f myshell</span><br></pre></td></tr></table></figure>\n<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><p>本程序因函数较杂，会<code>include</code>较多头文件</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"宏定义\"><a href=\"#宏定义\" class=\"headerlink\" title=\"宏定义\"></a>宏定义</h1><p>为了统一修改部分参数，以及使参数更易读，这里使用部分宏定义</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEFT <span class=\"string\">&quot;[&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RIGHT <span class=\"string\">&quot;]&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LABEL <span class=\"string\">&quot;# &quot;</span><span class=\"comment\">//注意有个空格</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LINE_SIZE 1024</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARGC_SIZE 32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DLIM <span class=\"string\">&quot; \\t&quot;</span> <span class=\"comment\">//可能有多个分隔符</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> EXIT_CODE 446 <span class=\"comment\">//特殊的退出码，表示程序未正常退出，具体数字目前没有约定</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h1><p>我们需要用全局的变量来存储<code>命令行</code>(command line)和<code>参数包</code></p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> cline[LINE_SIZE];</span><br><span class=\"line\"><span class=\"type\">char</span>* arg[ARGC_SIZE];</span><br><span class=\"line\"><span class=\"type\">int</span> last_code = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"用Interact函数实现交互功能\"><a href=\"#用Interact函数实现交互功能\" class=\"headerlink\" title=\"用Interact函数实现交互功能\"></a>用<code>Interact</code>函数实现交互功能</h1><h2 id=\"打印命令行头部\"><a href=\"#打印命令行头部\" class=\"headerlink\" title=\"打印命令行头部\"></a>打印命令行头部</h2><p>为了打印命令行头部，我们需要知道三样东西：用户，主机，工作路径，这里包装了三个函数来分别调用<code>getenv</code>函数</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title function_\">getusername</span><span class=\"params\">()</span><span class=\"comment\">//获取用户名</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getenv(<span class=\"string\">&quot;USER&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title function_\">gethostname</span><span class=\"params\">()</span><span class=\"comment\">//获取主机名</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getenv(<span class=\"string\">&quot;HOSTNAME&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title function_\">getpwd</span><span class=\"params\">()</span><span class=\"comment\">//获取工作路径</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getenv(<span class=\"string\">&quot;PWD&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>因此打印的代码为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(LEFT <span class=\"string\">&quot;%s@%s %s&quot;</span> RIGHT LABLE,getusername(),gethostname(),getpwd());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取命令行\"><a href=\"#获取命令行\" class=\"headerlink\" title=\"获取命令行\"></a>获取命令行</h2><p>使用Linux的终端时，我们会打<code>命令+空格+参数...</code>,因此我们的<code>myshell</code>程序也要支持连空格一起读入,读入一整行命令</p>\n<p>所以<code>scanf</code>并不适合用来读入命令，这次我们使用<code>fgets</code>函数，这个函数可以从<code>文件流</code>中整行读入，而正好在终端输入的字符都储存在<code>标准输入流</code>,即<code>stdin</code>中,因此可以用一行代码获取<code>命令行</code></p>\n<p>为安全考虑，这里使用一个临时变量<code>s</code>来接受<code>fgets</code>的返回值并用<code>assert</code>判空,但在<code>release</code>版本中<code>assert</code>不被编译，导致变量<code>s</code>未被调用，而报警告（甚至报错），所以还要再加一句<code>(void) s</code>,只为了调用一下<code>s</code>,没有更多用处</p>\n<p>之后便完成了文件流的读取</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-06-04_16-25-34.png\"></p>\n<p>但此时获得的命令行在<code>\\0</code>前以<code>\\n</code>结尾，所以要把<code>\\n</code>替换为<code>\\0</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *s = fgets(cline,size,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">assert(s);<span class=\"comment\">//s为空时报错</span></span><br><span class=\"line\">(<span class=\"type\">void</span>) s;<span class=\"comment\">//防止因未调用s而报警告</span></span><br><span class=\"line\"></span><br><span class=\"line\">cline[<span class=\"built_in\">strlen</span>(cline) - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整个函数体\"><a href=\"#整个函数体\" class=\"headerlink\" title=\"整个函数体\"></a>整个函数体</h2><blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Interact</span><span class=\"params\">(<span class=\"type\">char</span>* cline,<span class=\"type\">int</span> size)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(LEFT <span class=\"string\">&quot;%s@%s %s&quot;</span> RIGHT LABLE,getusername(),gethostname(),getpwd());<span class=\"comment\">//打印头部</span></span><br><span class=\"line\">    fgets(cline,size,<span class=\"built_in\">stdin</span>);<span class=\"comment\">//获取命令行</span></span><br><span class=\"line\">    assert(s);<span class=\"comment\">//s为空时报错</span></span><br><span class=\"line\">    (<span class=\"type\">void</span>) s;<span class=\"comment\">//防止因未调用s而报警告</span></span><br><span class=\"line\">    cline[<span class=\"built_in\">strlen</span>(cline) - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;echo: %s\\n&quot;</span>);<span class=\"comment\">//写一段测一段的测试代码，输出获取的命令行,测完可删</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>先在<code>main</code>函数里调用一次<code>Interact</code>函数测试一下</p>\n<p>我的测试结果如下</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-06-04_16-42-55.png\"></p>\n<p>可以看到达到了预期效果，但是<code>工作路径</code>太长了，还是学一学Linux的展示方式吧，我们来把<code>getpwd</code>函数重写一下</p>\n<h2 id=\"重写getpwd\"><a href=\"#重写getpwd\" class=\"headerlink\" title=\"重写getpwd()\"></a>重写<code>getpwd()</code></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title function_\">getpwd</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* pwd = getenv(<span class=\"string\">&quot;PWD&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">strlen</span>(pwd);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pwd[n] == <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (pwd+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样打印出的工作路径仅为当前文件夹，可以缩短很多长度</p>\n<h1 id=\"分割命令行\"><a href=\"#分割命令行\" class=\"headerlink\" title=\"分割命令行\"></a>分割命令行</h1><p>现在的<code>cline</code>中的命令行还是完整的一串，需要分割出命令和参数包，因此我们也封装一个函数<code>Splitcline</code></p>\n<p>这里使用的是<code>string.h</code>中的<code>strtok</code>函数，可以用特定的单个或多个字符将字符串分割</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Splitcline</span><span class=\"params\">(<span class=\"type\">char</span>*cline,<span class=\"type\">char</span>** argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(argv,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>*) * ARGV_SIZE);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    argv[<span class=\"number\">0</span>] = strtok(cline,DLIM);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argv[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(argv[i++] == strtok(<span class=\"literal\">NULL</span>,DLIM));</span><br><span class=\"line\"></span><br><span class=\"line\">    *argv_n = i<span class=\"number\">-1</span>;<span class=\"comment\">//输出型参数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>再写一段测试代码</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Interact(cline,<span class=\"keyword\">sizeof</span>(cline));</span><br><span class=\"line\"></span><br><span class=\"line\">    Splitcline(cline,argv);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;argv[i];i++)<span class=\"comment\">//逐行打印输出argv的内容</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,argv[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"执行外部命令\"><a href=\"#执行外部命令\" class=\"headerlink\" title=\"执行外部命令\"></a>执行外部命令</h1><p>通过<code>fork</code>函数创建子进程，然后用<code>execvp</code>替换子进程，通过环境变量<code>PATH</code>找到外部命令并替换到子进程执行，同时父进程<code>myshell</code>调用<code>waitpid</code>函数等待子进程结束，保证<code>myshell</code>程序正常运行</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ExternalCommand</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id &lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;fork&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)<span class=\"comment\">//child</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        execvp(argv[<span class=\"number\">0</span>],argv+<span class=\"number\">1</span>);<span class=\"comment\">//+1之后才是参数列表</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_CODE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> status = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">pid_t</span> rid = waitpid(id,&amp;status,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rid == id)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            last_code = WEXITSTATUS(status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"执行内建命令\"><a href=\"#执行内建命令\" class=\"headerlink\" title=\"执行内建命令\"></a>执行内建命令</h1><p><code>shell</code>中并不是所有的命令都由子进程完成的，比如用<code>cd</code>命令改变工作路径，就不能让子进程去执行(<del>否则只是改了子进程的路径</del>),因此我们还需要加一个内建命令接口</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">BuildCommand</span><span class=\"params\">(<span class=\"type\">char</span>* _argv[],<span class=\"type\">int</span> _argv_n)</span><span class=\"comment\">//处理内建命令</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(_argv_n == <span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(_argv[<span class=\"number\">0</span>],<span class=\"string\">&quot;cd&quot;</span>)== <span class=\"number\">0</span>)<span class=\"comment\">//特殊处理的命令1</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    chdir(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    getpwd();</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(getenv(<span class=\"string\">&quot;PWD&quot;</span>),<span class=\"string\">&quot;%s&quot;</span>,pwd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//完成执行返回1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//还可以继续else uf 加特殊处理的命令2,3,4,,,n</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//未执行内建命令。返回0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"完成框架\"><a href=\"#完成框架\" class=\"headerlink\" title=\"完成框架\"></a>完成框架</h1><p>至此，把<code>main</code>函数组织好后，一个简单的<code>shell</code>代码框架就搭好了，可以根据需要继续扩展<code>内建命令</code>的内容，比如导出环境变量，实现<code>echo</code>指令等（略写）。</p>\n<blockquote>\n<p>myshell.c</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> quit = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(!quit)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     Interact(cline,<span class=\"keyword\">sizeof</span>(cline));</span><br><span class=\"line\">     <span class=\"type\">int</span> argv_n;</span><br><span class=\"line\">     Splitcline(cline,argv,&amp;argv_n);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span>(argv_n == <span class=\"number\">0</span> )<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"type\">int</span> flag = BuildCommand(argv,argv_n);</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(!flag) ExeternalCommand();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;                            </span><br><span class=\"line\">&#125;          </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>这里的命令行处理并没有考虑<code>输入/输出重定向</code>,所以仍有较大的需要完善的地方</p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p><a href=\"https://github.com/sis-shen/Linux_Code\">点我去往github仓库</a>。</p>\n"},{"title":"=C语言=动态内存分配遇上函数-经典错误纠错","date":"2023-08-28T08:11:37.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-02_10-46-45.jpg","_content":"### 直接完整代码 #\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid GetMemory(char* p)   //申请内存\n{\n\tp = (char*)malloc(100);  \n}\n\nvoid Test()\n{\n\tchar* str = NULL;\n\tGetMemory(str);\n\tstrcpy(str, \"hello world\"); //复制字符串\n\tprintf(str);  //输出字符串\n}\n\nint main()\n{\n\tTest();\n\treturn 0;\n}\n```\n### 分析 #\n推测这段代码的的目的是通过``GetMemory``函数申请内存，然后把返回的地址存入指针变量``str``,再把字符串``\"hello world\"``复制到``str``所指向的内存中，最后``printf``输出\n\n#### 逐步纠错 #\n\n##### ``GetMemory`` #\n\n1. 首先是传参错误。若在函数内修改外部的一级指针，不能直接将外部一级指针作为**实参**传入：因为函数会将**实参**赋给**形参**，程序运行到大括号外面后，**形参**被销毁，**实参**没有变化。所以应该使用``char** p``二级指针作为**形参**,储存地址时使用``*p``\\\n2. 其次是内存泄漏。开辟的内存的地址并没有传递给实参，形参又最后销毁了，同时没有释放内存，函数运行完后申请的内存无法找到，导致最终无法释放，造成内存泄漏\n\n```C\n//更合适的代码\nvoid GetMenmory(char** p)\n{\n    *p = (char*)malloc(100);\n}\n\n```\n##### ``Test`` #\n1. NULL的大问题。假设``malloc``返回的地址已经存入``str``,但任然缺少对空指针的判断,导致``strcmp``中传入了空指针->报错;``printf``中传入空指针->报错\n2. 没有释放内存->内存泄漏。\n```C\n//更适合的代码\nvoid Test()\n{\n    char* str = NULL;\n    GetMemory(str);\n    if(str == MULL)\n    {\n        return;\n    }\n    strcpy(str,\"hello world\");\n    printf(\"%s\\n\",str);\n    free(str); //防止内存泄漏\n    str = NULL; //清除野指针\n}\n\n```\n","source":"_posts/mistake1.md","raw":"---\ntitle: =C语言=动态内存分配遇上函数-经典错误纠错\ndate: 2023-08-28 16:11:37\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-02_10-46-45.jpg\n---\n### 直接完整代码 #\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid GetMemory(char* p)   //申请内存\n{\n\tp = (char*)malloc(100);  \n}\n\nvoid Test()\n{\n\tchar* str = NULL;\n\tGetMemory(str);\n\tstrcpy(str, \"hello world\"); //复制字符串\n\tprintf(str);  //输出字符串\n}\n\nint main()\n{\n\tTest();\n\treturn 0;\n}\n```\n### 分析 #\n推测这段代码的的目的是通过``GetMemory``函数申请内存，然后把返回的地址存入指针变量``str``,再把字符串``\"hello world\"``复制到``str``所指向的内存中，最后``printf``输出\n\n#### 逐步纠错 #\n\n##### ``GetMemory`` #\n\n1. 首先是传参错误。若在函数内修改外部的一级指针，不能直接将外部一级指针作为**实参**传入：因为函数会将**实参**赋给**形参**，程序运行到大括号外面后，**形参**被销毁，**实参**没有变化。所以应该使用``char** p``二级指针作为**形参**,储存地址时使用``*p``\\\n2. 其次是内存泄漏。开辟的内存的地址并没有传递给实参，形参又最后销毁了，同时没有释放内存，函数运行完后申请的内存无法找到，导致最终无法释放，造成内存泄漏\n\n```C\n//更合适的代码\nvoid GetMenmory(char** p)\n{\n    *p = (char*)malloc(100);\n}\n\n```\n##### ``Test`` #\n1. NULL的大问题。假设``malloc``返回的地址已经存入``str``,但任然缺少对空指针的判断,导致``strcmp``中传入了空指针->报错;``printf``中传入空指针->报错\n2. 没有释放内存->内存泄漏。\n```C\n//更适合的代码\nvoid Test()\n{\n    char* str = NULL;\n    GetMemory(str);\n    if(str == MULL)\n    {\n        return;\n    }\n    strcpy(str,\"hello world\");\n    printf(\"%s\\n\",str);\n    free(str); //防止内存泄漏\n    str = NULL; //清除野指针\n}\n\n```\n","slug":"mistake1","published":1,"updated":"2023-11-14T00:32:03.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvc0014v8p54i21fm0c","content":"<h3 id=\"直接完整代码\"><a href=\"#直接完整代码\" class=\"headerlink\" title=\"直接完整代码\"></a>直接完整代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GetMemory</span><span class=\"params\">(<span class=\"type\">char</span>* p)</span>   <span class=\"comment\">//申请内存</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tp = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Test</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* str = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tGetMemory(str);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(str, <span class=\"string\">&quot;hello world&quot;</span>); <span class=\"comment\">//复制字符串</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(str);  <span class=\"comment\">//输出字符串</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTest();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>推测这段代码的的目的是通过<code>GetMemory</code>函数申请内存，然后把返回的地址存入指针变量<code>str</code>,再把字符串<code>&quot;hello world&quot;</code>复制到<code>str</code>所指向的内存中，最后<code>printf</code>输出</p>\n<h4 id=\"逐步纠错\"><a href=\"#逐步纠错\" class=\"headerlink\" title=\"逐步纠错\"></a>逐步纠错</h4><h5 id=\"GetMemory\"><a href=\"#GetMemory\" class=\"headerlink\" title=\"GetMemory\"></a><code>GetMemory</code></h5><ol>\n<li>首先是传参错误。若在函数内修改外部的一级指针，不能直接将外部一级指针作为<strong>实参</strong>传入：因为函数会将<strong>实参</strong>赋给<strong>形参</strong>，程序运行到大括号外面后，<strong>形参</strong>被销毁，<strong>实参</strong>没有变化。所以应该使用<code>char** p</code>二级指针作为<strong>形参</strong>,储存地址时使用<code>*p</code>\\</li>\n<li>其次是内存泄漏。开辟的内存的地址并没有传递给实参，形参又最后销毁了，同时没有释放内存，函数运行完后申请的内存无法找到，导致最终无法释放，造成内存泄漏</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更合适的代码</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GetMenmory</span><span class=\"params\">(<span class=\"type\">char</span>** p)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    *p = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a><code>Test</code></h5><ol>\n<li>NULL的大问题。假设<code>malloc</code>返回的地址已经存入<code>str</code>,但任然缺少对空指针的判断,导致<code>strcmp</code>中传入了空指针-&gt;报错;<code>printf</code>中传入空指针-&gt;报错</li>\n<li>没有释放内存-&gt;内存泄漏。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更适合的代码</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Test</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* str = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    GetMemory(str);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str == MULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str,<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,str);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(str); <span class=\"comment\">//防止内存泄漏</span></span><br><span class=\"line\">    str = <span class=\"literal\">NULL</span>; <span class=\"comment\">//清除野指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"直接完整代码\"><a href=\"#直接完整代码\" class=\"headerlink\" title=\"直接完整代码\"></a>直接完整代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GetMemory</span><span class=\"params\">(<span class=\"type\">char</span>* p)</span>   <span class=\"comment\">//申请内存</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tp = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Test</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* str = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tGetMemory(str);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(str, <span class=\"string\">&quot;hello world&quot;</span>); <span class=\"comment\">//复制字符串</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(str);  <span class=\"comment\">//输出字符串</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTest();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>推测这段代码的的目的是通过<code>GetMemory</code>函数申请内存，然后把返回的地址存入指针变量<code>str</code>,再把字符串<code>&quot;hello world&quot;</code>复制到<code>str</code>所指向的内存中，最后<code>printf</code>输出</p>\n<h4 id=\"逐步纠错\"><a href=\"#逐步纠错\" class=\"headerlink\" title=\"逐步纠错\"></a>逐步纠错</h4><h5 id=\"GetMemory\"><a href=\"#GetMemory\" class=\"headerlink\" title=\"GetMemory\"></a><code>GetMemory</code></h5><ol>\n<li>首先是传参错误。若在函数内修改外部的一级指针，不能直接将外部一级指针作为<strong>实参</strong>传入：因为函数会将<strong>实参</strong>赋给<strong>形参</strong>，程序运行到大括号外面后，<strong>形参</strong>被销毁，<strong>实参</strong>没有变化。所以应该使用<code>char** p</code>二级指针作为<strong>形参</strong>,储存地址时使用<code>*p</code>\\</li>\n<li>其次是内存泄漏。开辟的内存的地址并没有传递给实参，形参又最后销毁了，同时没有释放内存，函数运行完后申请的内存无法找到，导致最终无法释放，造成内存泄漏</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更合适的代码</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GetMenmory</span><span class=\"params\">(<span class=\"type\">char</span>** p)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    *p = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a><code>Test</code></h5><ol>\n<li>NULL的大问题。假设<code>malloc</code>返回的地址已经存入<code>str</code>,但任然缺少对空指针的判断,导致<code>strcmp</code>中传入了空指针-&gt;报错;<code>printf</code>中传入空指针-&gt;报错</li>\n<li>没有释放内存-&gt;内存泄漏。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更适合的代码</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Test</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* str = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    GetMemory(str);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str == MULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str,<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,str);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(str); <span class=\"comment\">//防止内存泄漏</span></span><br><span class=\"line\">    str = <span class=\"literal\">NULL</span>; <span class=\"comment\">//清除野指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"【Linux】简易进程池","date":"2024-08-02T12:02:48.000Z","_content":"","source":"_posts/processPool.md","raw":"---\ntitle: 【Linux】简易进程池\ndate: 2024-08-02 20:02:48\ntags:\n---\n","slug":"processPool","published":1,"updated":"2024-08-02T12:03:16.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulve001jv8p55axm9q31","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":""},{"title":"指针详解","date":"2023-11-22T23:35:39.000Z","_content":"*这篇质量不太行:（*\n# 内存和地址 #\n在了解指针之前，先讲讲内存是如何管理的\n\n首先因为内存很大（一般有几个G）,所以为了高效管理，有了`内存单元`的概念。而这个单元的大小，正好是一个字节。\n\n因为一个`比特位`就是一个二进制位，太小了，超过一个字节，在处理`char`这样一个字节长的变量很麻烦。\n\n定下长度后，就可以给内存单元编号，而每个内存单元获得的独一无二的编号，便是它的**地址**,以声明了一个变量a为例,示意图如下\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_09-59-30.png)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_10-21-48.png)\n\n## 变量的地址\n\n上图中`a`占4个字节，每个字节都有自己的地址，但要找到`a`其实只需要找到第一个地址就行了，实际上在`C语言`中也是如此,`a`的地址就是`首字节地址`,即图中的`0x000000AF88DFF6A4`\n\n## 关于几个名词 #\n在`C语言`中称`地址`为`指针`,**储存**地址的变量叫`指针变量`,平时也**简称**`指针`,此时强调的是`指针变量`里储存的地址，而不是这个变量。\n\n## 指针变量的组成 #\n指针变量也要**拆成两部分**来看\n\n一个是变量的`值`,在同一个程序中，所有指针变量的值的`长度`都是一样的，都指向了某**一**个内存中的`字节`, 至于具体多长，取决于环境:`32位程序是4个字节`,`64位程序是8个字节`\n\n另一个是变量的`类型`,类型决定编译器从`值`所指向的字节，向后总共读**几个**字节，以及用**什么方式**读取内存里的内容。以下图的代码为例\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_11-36-47.png)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_11-29-53.png)\n\n可以看到三种指针指向了**同一个**字节，即它们的值是相等的，但`指针类型`不同，解引用之后得到的`值`也不同,\n\n`char`比`int`短，所以`*p_char`只能取到`00`,\n\n而虽然`float`和`int`一样长，但对内存的**读法不同**，所以`*p_float`和`*p_int`依然不同\n\n# 指针(变量)的使用 #\n\n## 声明指针变量 #\n\n指针变量也是变量，在没有结合性问题时，和一般变量的声明方式差不多。\n\n变量的声明:`变量类型` + `变量名`\n\n指针的声明:`指向的变量类型` + `*` + `变量名`\n\n以下以声明一个字符指针为例\n\n```C\nchar* pointer = NULL;\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-24_10-02-19.png)\n\n*变量的声明逻辑如上图*\n\n### 进阶：二级指针->N级指针 #\n我们可以用同样的逻辑声明更高级的指针\n\n```C\nchar* *ppstr = NULL;//ppstr是一个二级指针\nchar** *ppstr = NULL;//pppstr是一个三级指针\n```\n\n在声明中,前面的`char*`声明了`ppstr`**指向**的变量类型,后面的`*`与`变量名`结合，声明`ppstr`是一个指针.\n\n此处，称指向`一级指针`的指针为`二级指针`,同理有`三级指针`,至`N级指针`.\n\n## 指针的解引用 #\n指针最常见的用处就是通过变量里**储存的地址**，通过直接修改目标变量的**内存**来修改变量的值 ， 当然还有强制转换指针类型来读取目标变量的**一部分**内存 之类的骚操作\n\n### 函数的传址调用 #\n在遇到指针前，使用函数时，由于实参传到函数里都变成了**形参**,无法通过形参（*包括修改形参的值*）来改变实参的值，因为形参终究只是实参的一份**临时拷贝**.\n\n而有了指针之后，函数的实参，形参关系不变，但我们有了**更高端**的形参,也就是`指针`, 尽管`函数内的指针`依旧是`函数外的指针`的**临时拷贝**,但我们已经能通过其储存的**值**访问`函数外变量`的内存了,同时包括`读取`和`修改`, 这种通过传入指针来修改外部变量的函数调用，便称为`函数的传址调用`\n\n*以如下代码为例*\n\n```C\nvoid Swap_int(int*a,int*b)\n{\n    //给我两个整型的地址，我就能 真·交换它们的值\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n```\n\n#### 提问?如何修改函数外的指针的值? #\n依然还是把这一**指针的地址**传进去，而函数的形参写成**更高一级**的指针\n\n*如下代码，例如我想在函数里把外部的指针置空*\n\n```C\nvoid Reset(char* *pstr) \n{\n    *pstr = NULL;\n}\n\nint main()\n{\n    char* str;\n    Reset(&str)//对一级指针取地址，传入二级指针\n    return 0;\n}\n```\n\n# 有关指针的危险操作 #\n## 野指针的解引用 #\n\n有些指针因为错误操作，指向了不能访问的内存，一旦解引用，就有可能使程序崩溃\n\n*情形如下*\n\n### 使用了 未初始化/赋值 的指针 #\n```C\nint* pa;//未初始化，pa的值为随机值\n*pa = 0 ;//野指针的解引用\n\n//正确的用法\nint arr[10] = {0};\n\nint* pa;\npa = arr;//立即初始化\nint* pb = NULL;//初始化\n\n```\n所以声明指针时最好初始化,如果不知道初始化成什么，就用`NULL`空指针初始化\n\n### 指向了 已回收的 内存空间 #\n有的函数**错误***地返回了内部临时变量的地址， 在**外面**使用返回的指针，因为此时函数的栈帧已经**销毁**，会发生野指针的解引用\n\n```C\nchar* fun(void)\n{\n    char a = 0;\n    char* pa = &a;\n    return pa;\n}\n\nint main()\n{\n    //情形一\n    char* pa = fun();\n    *pa = 1;//此时变量a已经销毁，发生野指针的解引用，即非法访问\n\n    //情形二\n    char* str = (char*) malloc(sizeof(char) *10) //在堆区开辟10个字节的空间\n    free(str);//然后释放掉\n    str[0] = 'A';//试图访问已free的内存，并写入，发生非法访问\n    return 0;\n}\n\n```\n\n## 空指针的解引用 #\n空指针`NULL`,`值`为`0`,一旦解引用就会报错，所以在解引用陌生指针时一定要注意判空\n\n```C\n//情形一\nchar* func(char* str)\n{\n    if(str == NULL)//防止使用者错误传入空指针\n    {\n        return NULL;\n    }\n\n    printf(\"%s\\n\");\n}\n//情形二\nchar* InitArray(char** pstr)\n{\n    if(pstr == NULL)\n    {\n        return NULL;\n    }\n    *pstr = (char*)malloc(sizeof(char) * 10);\n    if(*ptr == NULL)//malloc一旦失败就会返回NULL,所以调用后一定要判空\n    {\n        return NULL;\n    }\n}\n\n```\n\n\n\n\n\n\n\n","source":"_posts/pointer.md","raw":"---\ntitle: 指针详解\ndate: 2023-11-23 07:35:39\ntags:\n---\n*这篇质量不太行:（*\n# 内存和地址 #\n在了解指针之前，先讲讲内存是如何管理的\n\n首先因为内存很大（一般有几个G）,所以为了高效管理，有了`内存单元`的概念。而这个单元的大小，正好是一个字节。\n\n因为一个`比特位`就是一个二进制位，太小了，超过一个字节，在处理`char`这样一个字节长的变量很麻烦。\n\n定下长度后，就可以给内存单元编号，而每个内存单元获得的独一无二的编号，便是它的**地址**,以声明了一个变量a为例,示意图如下\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_09-59-30.png)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_10-21-48.png)\n\n## 变量的地址\n\n上图中`a`占4个字节，每个字节都有自己的地址，但要找到`a`其实只需要找到第一个地址就行了，实际上在`C语言`中也是如此,`a`的地址就是`首字节地址`,即图中的`0x000000AF88DFF6A4`\n\n## 关于几个名词 #\n在`C语言`中称`地址`为`指针`,**储存**地址的变量叫`指针变量`,平时也**简称**`指针`,此时强调的是`指针变量`里储存的地址，而不是这个变量。\n\n## 指针变量的组成 #\n指针变量也要**拆成两部分**来看\n\n一个是变量的`值`,在同一个程序中，所有指针变量的值的`长度`都是一样的，都指向了某**一**个内存中的`字节`, 至于具体多长，取决于环境:`32位程序是4个字节`,`64位程序是8个字节`\n\n另一个是变量的`类型`,类型决定编译器从`值`所指向的字节，向后总共读**几个**字节，以及用**什么方式**读取内存里的内容。以下图的代码为例\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_11-36-47.png)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_11-29-53.png)\n\n可以看到三种指针指向了**同一个**字节，即它们的值是相等的，但`指针类型`不同，解引用之后得到的`值`也不同,\n\n`char`比`int`短，所以`*p_char`只能取到`00`,\n\n而虽然`float`和`int`一样长，但对内存的**读法不同**，所以`*p_float`和`*p_int`依然不同\n\n# 指针(变量)的使用 #\n\n## 声明指针变量 #\n\n指针变量也是变量，在没有结合性问题时，和一般变量的声明方式差不多。\n\n变量的声明:`变量类型` + `变量名`\n\n指针的声明:`指向的变量类型` + `*` + `变量名`\n\n以下以声明一个字符指针为例\n\n```C\nchar* pointer = NULL;\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-24_10-02-19.png)\n\n*变量的声明逻辑如上图*\n\n### 进阶：二级指针->N级指针 #\n我们可以用同样的逻辑声明更高级的指针\n\n```C\nchar* *ppstr = NULL;//ppstr是一个二级指针\nchar** *ppstr = NULL;//pppstr是一个三级指针\n```\n\n在声明中,前面的`char*`声明了`ppstr`**指向**的变量类型,后面的`*`与`变量名`结合，声明`ppstr`是一个指针.\n\n此处，称指向`一级指针`的指针为`二级指针`,同理有`三级指针`,至`N级指针`.\n\n## 指针的解引用 #\n指针最常见的用处就是通过变量里**储存的地址**，通过直接修改目标变量的**内存**来修改变量的值 ， 当然还有强制转换指针类型来读取目标变量的**一部分**内存 之类的骚操作\n\n### 函数的传址调用 #\n在遇到指针前，使用函数时，由于实参传到函数里都变成了**形参**,无法通过形参（*包括修改形参的值*）来改变实参的值，因为形参终究只是实参的一份**临时拷贝**.\n\n而有了指针之后，函数的实参，形参关系不变，但我们有了**更高端**的形参,也就是`指针`, 尽管`函数内的指针`依旧是`函数外的指针`的**临时拷贝**,但我们已经能通过其储存的**值**访问`函数外变量`的内存了,同时包括`读取`和`修改`, 这种通过传入指针来修改外部变量的函数调用，便称为`函数的传址调用`\n\n*以如下代码为例*\n\n```C\nvoid Swap_int(int*a,int*b)\n{\n    //给我两个整型的地址，我就能 真·交换它们的值\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n```\n\n#### 提问?如何修改函数外的指针的值? #\n依然还是把这一**指针的地址**传进去，而函数的形参写成**更高一级**的指针\n\n*如下代码，例如我想在函数里把外部的指针置空*\n\n```C\nvoid Reset(char* *pstr) \n{\n    *pstr = NULL;\n}\n\nint main()\n{\n    char* str;\n    Reset(&str)//对一级指针取地址，传入二级指针\n    return 0;\n}\n```\n\n# 有关指针的危险操作 #\n## 野指针的解引用 #\n\n有些指针因为错误操作，指向了不能访问的内存，一旦解引用，就有可能使程序崩溃\n\n*情形如下*\n\n### 使用了 未初始化/赋值 的指针 #\n```C\nint* pa;//未初始化，pa的值为随机值\n*pa = 0 ;//野指针的解引用\n\n//正确的用法\nint arr[10] = {0};\n\nint* pa;\npa = arr;//立即初始化\nint* pb = NULL;//初始化\n\n```\n所以声明指针时最好初始化,如果不知道初始化成什么，就用`NULL`空指针初始化\n\n### 指向了 已回收的 内存空间 #\n有的函数**错误***地返回了内部临时变量的地址， 在**外面**使用返回的指针，因为此时函数的栈帧已经**销毁**，会发生野指针的解引用\n\n```C\nchar* fun(void)\n{\n    char a = 0;\n    char* pa = &a;\n    return pa;\n}\n\nint main()\n{\n    //情形一\n    char* pa = fun();\n    *pa = 1;//此时变量a已经销毁，发生野指针的解引用，即非法访问\n\n    //情形二\n    char* str = (char*) malloc(sizeof(char) *10) //在堆区开辟10个字节的空间\n    free(str);//然后释放掉\n    str[0] = 'A';//试图访问已free的内存，并写入，发生非法访问\n    return 0;\n}\n\n```\n\n## 空指针的解引用 #\n空指针`NULL`,`值`为`0`,一旦解引用就会报错，所以在解引用陌生指针时一定要注意判空\n\n```C\n//情形一\nchar* func(char* str)\n{\n    if(str == NULL)//防止使用者错误传入空指针\n    {\n        return NULL;\n    }\n\n    printf(\"%s\\n\");\n}\n//情形二\nchar* InitArray(char** pstr)\n{\n    if(pstr == NULL)\n    {\n        return NULL;\n    }\n    *pstr = (char*)malloc(sizeof(char) * 10);\n    if(*ptr == NULL)//malloc一旦失败就会返回NULL,所以调用后一定要判空\n    {\n        return NULL;\n    }\n}\n\n```\n\n\n\n\n\n\n\n","slug":"pointer","published":1,"updated":"2024-05-22T15:13:43.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvf001kv8p516jqghyk","content":"<p><em>这篇质量不太行:（</em></p>\n<h1 id=\"内存和地址\"><a href=\"#内存和地址\" class=\"headerlink\" title=\"内存和地址\"></a>内存和地址</h1><p>在了解指针之前，先讲讲内存是如何管理的</p>\n<p>首先因为内存很大（一般有几个G）,所以为了高效管理，有了<code>内存单元</code>的概念。而这个单元的大小，正好是一个字节。</p>\n<p>因为一个<code>比特位</code>就是一个二进制位，太小了，超过一个字节，在处理<code>char</code>这样一个字节长的变量很麻烦。</p>\n<p>定下长度后，就可以给内存单元编号，而每个内存单元获得的独一无二的编号，便是它的<strong>地址</strong>,以声明了一个变量a为例,示意图如下</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_09-59-30.png\"></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_10-21-48.png\"></p>\n<h2 id=\"变量的地址\"><a href=\"#变量的地址\" class=\"headerlink\" title=\"变量的地址\"></a>变量的地址</h2><p>上图中<code>a</code>占4个字节，每个字节都有自己的地址，但要找到<code>a</code>其实只需要找到第一个地址就行了，实际上在<code>C语言</code>中也是如此,<code>a</code>的地址就是<code>首字节地址</code>,即图中的<code>0x000000AF88DFF6A4</code></p>\n<h2 id=\"关于几个名词\"><a href=\"#关于几个名词\" class=\"headerlink\" title=\"关于几个名词\"></a>关于几个名词</h2><p>在<code>C语言</code>中称<code>地址</code>为<code>指针</code>,<strong>储存</strong>地址的变量叫<code>指针变量</code>,平时也<strong>简称</strong><code>指针</code>,此时强调的是<code>指针变量</code>里储存的地址，而不是这个变量。</p>\n<h2 id=\"指针变量的组成\"><a href=\"#指针变量的组成\" class=\"headerlink\" title=\"指针变量的组成\"></a>指针变量的组成</h2><p>指针变量也要<strong>拆成两部分</strong>来看</p>\n<p>一个是变量的<code>值</code>,在同一个程序中，所有指针变量的值的<code>长度</code>都是一样的，都指向了某<strong>一</strong>个内存中的<code>字节</code>, 至于具体多长，取决于环境:<code>32位程序是4个字节</code>,<code>64位程序是8个字节</code></p>\n<p>另一个是变量的<code>类型</code>,类型决定编译器从<code>值</code>所指向的字节，向后总共读<strong>几个</strong>字节，以及用<strong>什么方式</strong>读取内存里的内容。以下图的代码为例</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_11-36-47.png\"></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_11-29-53.png\"></p>\n<p>可以看到三种指针指向了<strong>同一个</strong>字节，即它们的值是相等的，但<code>指针类型</code>不同，解引用之后得到的<code>值</code>也不同,</p>\n<p><code>char</code>比<code>int</code>短，所以<code>*p_char</code>只能取到<code>00</code>,</p>\n<p>而虽然<code>float</code>和<code>int</code>一样长，但对内存的<strong>读法不同</strong>，所以<code>*p_float</code>和<code>*p_int</code>依然不同</p>\n<h1 id=\"指针-变量-的使用\"><a href=\"#指针-变量-的使用\" class=\"headerlink\" title=\"指针(变量)的使用\"></a>指针(变量)的使用</h1><h2 id=\"声明指针变量\"><a href=\"#声明指针变量\" class=\"headerlink\" title=\"声明指针变量\"></a>声明指针变量</h2><p>指针变量也是变量，在没有结合性问题时，和一般变量的声明方式差不多。</p>\n<p>变量的声明:<code>变量类型</code> + <code>变量名</code></p>\n<p>指针的声明:<code>指向的变量类型</code> + <code>*</code> + <code>变量名</code></p>\n<p>以下以声明一个字符指针为例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* pointer = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-24_10-02-19.png\"></p>\n<p><em>变量的声明逻辑如上图</em></p>\n<h3 id=\"进阶：二级指针-N级指针\"><a href=\"#进阶：二级指针-N级指针\" class=\"headerlink\" title=\"进阶：二级指针-&gt;N级指针\"></a>进阶：二级指针-&gt;N级指针</h3><p>我们可以用同样的逻辑声明更高级的指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* *ppstr = <span class=\"literal\">NULL</span>;<span class=\"comment\">//ppstr是一个二级指针</span></span><br><span class=\"line\"><span class=\"type\">char</span>** *ppstr = <span class=\"literal\">NULL</span>;<span class=\"comment\">//pppstr是一个三级指针</span></span><br></pre></td></tr></table></figure>\n\n<p>在声明中,前面的<code>char*</code>声明了<code>ppstr</code><strong>指向</strong>的变量类型,后面的<code>*</code>与<code>变量名</code>结合，声明<code>ppstr</code>是一个指针.</p>\n<p>此处，称指向<code>一级指针</code>的指针为<code>二级指针</code>,同理有<code>三级指针</code>,至<code>N级指针</code>.</p>\n<h2 id=\"指针的解引用\"><a href=\"#指针的解引用\" class=\"headerlink\" title=\"指针的解引用\"></a>指针的解引用</h2><p>指针最常见的用处就是通过变量里<strong>储存的地址</strong>，通过直接修改目标变量的<strong>内存</strong>来修改变量的值 ， 当然还有强制转换指针类型来读取目标变量的<strong>一部分</strong>内存 之类的骚操作</p>\n<h3 id=\"函数的传址调用\"><a href=\"#函数的传址调用\" class=\"headerlink\" title=\"函数的传址调用\"></a>函数的传址调用</h3><p>在遇到指针前，使用函数时，由于实参传到函数里都变成了<strong>形参</strong>,无法通过形参（<em>包括修改形参的值</em>）来改变实参的值，因为形参终究只是实参的一份<strong>临时拷贝</strong>.</p>\n<p>而有了指针之后，函数的实参，形参关系不变，但我们有了<strong>更高端</strong>的形参,也就是<code>指针</code>, 尽管<code>函数内的指针</code>依旧是<code>函数外的指针</code>的<strong>临时拷贝</strong>,但我们已经能通过其储存的<strong>值</strong>访问<code>函数外变量</code>的内存了,同时包括<code>读取</code>和<code>修改</code>, 这种通过传入指针来修改外部变量的函数调用，便称为<code>函数的传址调用</code></p>\n<p><em>以如下代码为例</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Swap_int</span><span class=\"params\">(<span class=\"type\">int</span>*a,<span class=\"type\">int</span>*b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//给我两个整型的地址，我就能 真·交换它们的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = *a;</span><br><span class=\"line\">    *a = *b;</span><br><span class=\"line\">    *b = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提问-如何修改函数外的指针的值\"><a href=\"#提问-如何修改函数外的指针的值\" class=\"headerlink\" title=\"提问?如何修改函数外的指针的值?\"></a>提问?如何修改函数外的指针的值?</h4><p>依然还是把这一<strong>指针的地址</strong>传进去，而函数的形参写成<strong>更高一级</strong>的指针</p>\n<p><em>如下代码，例如我想在函数里把外部的指针置空</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Reset</span><span class=\"params\">(<span class=\"type\">char</span>* *pstr)</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    *pstr = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* str;</span><br><span class=\"line\">    Reset(&amp;str)<span class=\"comment\">//对一级指针取地址，传入二级指针</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"有关指针的危险操作\"><a href=\"#有关指针的危险操作\" class=\"headerlink\" title=\"有关指针的危险操作\"></a>有关指针的危险操作</h1><h2 id=\"野指针的解引用\"><a href=\"#野指针的解引用\" class=\"headerlink\" title=\"野指针的解引用\"></a>野指针的解引用</h2><p>有些指针因为错误操作，指向了不能访问的内存，一旦解引用，就有可能使程序崩溃</p>\n<p><em>情形如下</em></p>\n<h3 id=\"使用了-未初始化-赋值-的指针\"><a href=\"#使用了-未初始化-赋值-的指针\" class=\"headerlink\" title=\"使用了 未初始化&#x2F;赋值 的指针\"></a>使用了 未初始化&#x2F;赋值 的指针</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* pa;<span class=\"comment\">//未初始化，pa的值为随机值</span></span><br><span class=\"line\">*pa = <span class=\"number\">0</span> ;<span class=\"comment\">//野指针的解引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//正确的用法</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span>* pa;</span><br><span class=\"line\">pa = arr;<span class=\"comment\">//立即初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>* pb = <span class=\"literal\">NULL</span>;<span class=\"comment\">//初始化</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>所以声明指针时最好初始化,如果不知道初始化成什么，就用<code>NULL</code>空指针初始化</p>\n<h3 id=\"指向了-已回收的-内存空间\"><a href=\"#指向了-已回收的-内存空间\" class=\"headerlink\" title=\"指向了 已回收的 内存空间\"></a>指向了 已回收的 内存空间</h3><p>有的函数<strong>错误</strong>*地返回了内部临时变量的地址， 在<strong>外面</strong>使用返回的指针，因为此时函数的栈帧已经<strong>销毁</strong>，会发生野指针的解引用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">fun</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span>* pa = &amp;a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pa;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//情形一</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* pa = fun();</span><br><span class=\"line\">    *pa = <span class=\"number\">1</span>;<span class=\"comment\">//此时变量a已经销毁，发生野指针的解引用，即非法访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//情形二</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* str = (<span class=\"type\">char</span>*) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>) *<span class=\"number\">10</span>) <span class=\"comment\">//在堆区开辟10个字节的空间</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(str);<span class=\"comment\">//然后释放掉</span></span><br><span class=\"line\">    str[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//试图访问已free的内存，并写入，发生非法访问</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"空指针的解引用\"><a href=\"#空指针的解引用\" class=\"headerlink\" title=\"空指针的解引用\"></a>空指针的解引用</h2><p>空指针<code>NULL</code>,<code>值</code>为<code>0</code>,一旦解引用就会报错，所以在解引用陌生指针时一定要注意判空</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//情形一</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">char</span>* str)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str == <span class=\"literal\">NULL</span>)<span class=\"comment\">//防止使用者错误传入空指针</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//情形二</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">InitArray</span><span class=\"params\">(<span class=\"type\">char</span>** pstr)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pstr == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *pstr = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(*ptr == <span class=\"literal\">NULL</span>)<span class=\"comment\">//malloc一旦失败就会返回NULL,所以调用后一定要判空</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":"<p><em>这篇质量不太行:（</em></p>\n<h1 id=\"内存和地址\"><a href=\"#内存和地址\" class=\"headerlink\" title=\"内存和地址\"></a>内存和地址</h1><p>在了解指针之前，先讲讲内存是如何管理的</p>\n<p>首先因为内存很大（一般有几个G）,所以为了高效管理，有了<code>内存单元</code>的概念。而这个单元的大小，正好是一个字节。</p>\n<p>因为一个<code>比特位</code>就是一个二进制位，太小了，超过一个字节，在处理<code>char</code>这样一个字节长的变量很麻烦。</p>\n<p>定下长度后，就可以给内存单元编号，而每个内存单元获得的独一无二的编号，便是它的<strong>地址</strong>,以声明了一个变量a为例,示意图如下</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_09-59-30.png\"></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_10-21-48.png\"></p>\n<h2 id=\"变量的地址\"><a href=\"#变量的地址\" class=\"headerlink\" title=\"变量的地址\"></a>变量的地址</h2><p>上图中<code>a</code>占4个字节，每个字节都有自己的地址，但要找到<code>a</code>其实只需要找到第一个地址就行了，实际上在<code>C语言</code>中也是如此,<code>a</code>的地址就是<code>首字节地址</code>,即图中的<code>0x000000AF88DFF6A4</code></p>\n<h2 id=\"关于几个名词\"><a href=\"#关于几个名词\" class=\"headerlink\" title=\"关于几个名词\"></a>关于几个名词</h2><p>在<code>C语言</code>中称<code>地址</code>为<code>指针</code>,<strong>储存</strong>地址的变量叫<code>指针变量</code>,平时也<strong>简称</strong><code>指针</code>,此时强调的是<code>指针变量</code>里储存的地址，而不是这个变量。</p>\n<h2 id=\"指针变量的组成\"><a href=\"#指针变量的组成\" class=\"headerlink\" title=\"指针变量的组成\"></a>指针变量的组成</h2><p>指针变量也要<strong>拆成两部分</strong>来看</p>\n<p>一个是变量的<code>值</code>,在同一个程序中，所有指针变量的值的<code>长度</code>都是一样的，都指向了某<strong>一</strong>个内存中的<code>字节</code>, 至于具体多长，取决于环境:<code>32位程序是4个字节</code>,<code>64位程序是8个字节</code></p>\n<p>另一个是变量的<code>类型</code>,类型决定编译器从<code>值</code>所指向的字节，向后总共读<strong>几个</strong>字节，以及用<strong>什么方式</strong>读取内存里的内容。以下图的代码为例</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_11-36-47.png\"></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-23_11-29-53.png\"></p>\n<p>可以看到三种指针指向了<strong>同一个</strong>字节，即它们的值是相等的，但<code>指针类型</code>不同，解引用之后得到的<code>值</code>也不同,</p>\n<p><code>char</code>比<code>int</code>短，所以<code>*p_char</code>只能取到<code>00</code>,</p>\n<p>而虽然<code>float</code>和<code>int</code>一样长，但对内存的<strong>读法不同</strong>，所以<code>*p_float</code>和<code>*p_int</code>依然不同</p>\n<h1 id=\"指针-变量-的使用\"><a href=\"#指针-变量-的使用\" class=\"headerlink\" title=\"指针(变量)的使用\"></a>指针(变量)的使用</h1><h2 id=\"声明指针变量\"><a href=\"#声明指针变量\" class=\"headerlink\" title=\"声明指针变量\"></a>声明指针变量</h2><p>指针变量也是变量，在没有结合性问题时，和一般变量的声明方式差不多。</p>\n<p>变量的声明:<code>变量类型</code> + <code>变量名</code></p>\n<p>指针的声明:<code>指向的变量类型</code> + <code>*</code> + <code>变量名</code></p>\n<p>以下以声明一个字符指针为例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* pointer = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-24_10-02-19.png\"></p>\n<p><em>变量的声明逻辑如上图</em></p>\n<h3 id=\"进阶：二级指针-N级指针\"><a href=\"#进阶：二级指针-N级指针\" class=\"headerlink\" title=\"进阶：二级指针-&gt;N级指针\"></a>进阶：二级指针-&gt;N级指针</h3><p>我们可以用同样的逻辑声明更高级的指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* *ppstr = <span class=\"literal\">NULL</span>;<span class=\"comment\">//ppstr是一个二级指针</span></span><br><span class=\"line\"><span class=\"type\">char</span>** *ppstr = <span class=\"literal\">NULL</span>;<span class=\"comment\">//pppstr是一个三级指针</span></span><br></pre></td></tr></table></figure>\n\n<p>在声明中,前面的<code>char*</code>声明了<code>ppstr</code><strong>指向</strong>的变量类型,后面的<code>*</code>与<code>变量名</code>结合，声明<code>ppstr</code>是一个指针.</p>\n<p>此处，称指向<code>一级指针</code>的指针为<code>二级指针</code>,同理有<code>三级指针</code>,至<code>N级指针</code>.</p>\n<h2 id=\"指针的解引用\"><a href=\"#指针的解引用\" class=\"headerlink\" title=\"指针的解引用\"></a>指针的解引用</h2><p>指针最常见的用处就是通过变量里<strong>储存的地址</strong>，通过直接修改目标变量的<strong>内存</strong>来修改变量的值 ， 当然还有强制转换指针类型来读取目标变量的<strong>一部分</strong>内存 之类的骚操作</p>\n<h3 id=\"函数的传址调用\"><a href=\"#函数的传址调用\" class=\"headerlink\" title=\"函数的传址调用\"></a>函数的传址调用</h3><p>在遇到指针前，使用函数时，由于实参传到函数里都变成了<strong>形参</strong>,无法通过形参（<em>包括修改形参的值</em>）来改变实参的值，因为形参终究只是实参的一份<strong>临时拷贝</strong>.</p>\n<p>而有了指针之后，函数的实参，形参关系不变，但我们有了<strong>更高端</strong>的形参,也就是<code>指针</code>, 尽管<code>函数内的指针</code>依旧是<code>函数外的指针</code>的<strong>临时拷贝</strong>,但我们已经能通过其储存的<strong>值</strong>访问<code>函数外变量</code>的内存了,同时包括<code>读取</code>和<code>修改</code>, 这种通过传入指针来修改外部变量的函数调用，便称为<code>函数的传址调用</code></p>\n<p><em>以如下代码为例</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Swap_int</span><span class=\"params\">(<span class=\"type\">int</span>*a,<span class=\"type\">int</span>*b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//给我两个整型的地址，我就能 真·交换它们的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = *a;</span><br><span class=\"line\">    *a = *b;</span><br><span class=\"line\">    *b = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提问-如何修改函数外的指针的值\"><a href=\"#提问-如何修改函数外的指针的值\" class=\"headerlink\" title=\"提问?如何修改函数外的指针的值?\"></a>提问?如何修改函数外的指针的值?</h4><p>依然还是把这一<strong>指针的地址</strong>传进去，而函数的形参写成<strong>更高一级</strong>的指针</p>\n<p><em>如下代码，例如我想在函数里把外部的指针置空</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Reset</span><span class=\"params\">(<span class=\"type\">char</span>* *pstr)</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    *pstr = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* str;</span><br><span class=\"line\">    Reset(&amp;str)<span class=\"comment\">//对一级指针取地址，传入二级指针</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"有关指针的危险操作\"><a href=\"#有关指针的危险操作\" class=\"headerlink\" title=\"有关指针的危险操作\"></a>有关指针的危险操作</h1><h2 id=\"野指针的解引用\"><a href=\"#野指针的解引用\" class=\"headerlink\" title=\"野指针的解引用\"></a>野指针的解引用</h2><p>有些指针因为错误操作，指向了不能访问的内存，一旦解引用，就有可能使程序崩溃</p>\n<p><em>情形如下</em></p>\n<h3 id=\"使用了-未初始化-赋值-的指针\"><a href=\"#使用了-未初始化-赋值-的指针\" class=\"headerlink\" title=\"使用了 未初始化&#x2F;赋值 的指针\"></a>使用了 未初始化&#x2F;赋值 的指针</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* pa;<span class=\"comment\">//未初始化，pa的值为随机值</span></span><br><span class=\"line\">*pa = <span class=\"number\">0</span> ;<span class=\"comment\">//野指针的解引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//正确的用法</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span>* pa;</span><br><span class=\"line\">pa = arr;<span class=\"comment\">//立即初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>* pb = <span class=\"literal\">NULL</span>;<span class=\"comment\">//初始化</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>所以声明指针时最好初始化,如果不知道初始化成什么，就用<code>NULL</code>空指针初始化</p>\n<h3 id=\"指向了-已回收的-内存空间\"><a href=\"#指向了-已回收的-内存空间\" class=\"headerlink\" title=\"指向了 已回收的 内存空间\"></a>指向了 已回收的 内存空间</h3><p>有的函数<strong>错误</strong>*地返回了内部临时变量的地址， 在<strong>外面</strong>使用返回的指针，因为此时函数的栈帧已经<strong>销毁</strong>，会发生野指针的解引用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">fun</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span>* pa = &amp;a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pa;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//情形一</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* pa = fun();</span><br><span class=\"line\">    *pa = <span class=\"number\">1</span>;<span class=\"comment\">//此时变量a已经销毁，发生野指针的解引用，即非法访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//情形二</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* str = (<span class=\"type\">char</span>*) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>) *<span class=\"number\">10</span>) <span class=\"comment\">//在堆区开辟10个字节的空间</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(str);<span class=\"comment\">//然后释放掉</span></span><br><span class=\"line\">    str[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//试图访问已free的内存，并写入，发生非法访问</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"空指针的解引用\"><a href=\"#空指针的解引用\" class=\"headerlink\" title=\"空指针的解引用\"></a>空指针的解引用</h2><p>空指针<code>NULL</code>,<code>值</code>为<code>0</code>,一旦解引用就会报错，所以在解引用陌生指针时一定要注意判空</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//情形一</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">char</span>* str)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str == <span class=\"literal\">NULL</span>)<span class=\"comment\">//防止使用者错误传入空指针</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//情形二</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">InitArray</span><span class=\"params\">(<span class=\"type\">char</span>** pstr)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pstr == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *pstr = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(*ptr == <span class=\"literal\">NULL</span>)<span class=\"comment\">//malloc一旦失败就会返回NULL,所以调用后一定要判空</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"初识进程","date":"2024-07-04T15:02:14.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_23-41-09.png","_content":"\n***\n操作系统平台:Linux\n服务器系统: CentOS 7\n***\n\n# 概念抽象\n\n## 程序\n\n`程序` = `代码` + `数据`\n\n程序是储存在硬盘上的可执行文件\n\n## 进程\n将`程序`加载到`内存`后，就在`内存`中程序的就是进程。也就是说一个正在运行的程序就能叫做进程\n\n*结构关系如下*\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_13-55-08.png)\n\n如图，操作系统为了**管理**内存中的进程,使用了`PCB`结构体来描述进程,通过管理`PCB`来管理进程,依然是*先描述再组织*\n\n`PCB`:进程控制块的数据结构(process control block)\n\n所以实际上:`进程`=`PCB`+`代码和数据`\n\n对于`代码和数据`没什么好说的，接下来主要讨论`PCB`\n\n## task_struct\n`Linux`平台下的`PCB`叫做`task_struct`\n\n> `task_struct`内容分类:\n\n+ **标示符**: 描述本进程的唯一标示符，用来区别其他进程。\n+ **状态**: 任务状态，退出代码，退出信号等。\n+ **优先级**: 相对于其他进程的优先级。\n+ 程序计数器: 程序中即将被执行的下一条指令的地址。\n+ 内存指针: 包括程序代码和进程相关数据的指针，还有和其他进程共享的内存块的指针\n+ 上下文数据: 进程执行时处理器的寄存器中的数据。\n+ I／O状态信息: 包括显示的I/O请求,分配给进程的I／O设备和被进程使用的文件列表。\n+ 记账信息: 可能包括处理器时间总和，使用的时钟数总和，时间限制，记账号等。\n+ 其他信息\n  \n*加粗部分会详细介绍*\n\n# 查看进程\n进程的信息可以通过/proc 系统文件夹查看,其中文件夹的名字就是进程的`PID`\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_21-53-59.png)\n\n大多数进程信息同样可以使用top和ps这些用户级工具来获取\n\n> 以我自己编写的一个程序为例\n\n*Makefile*\n```\nmycmd:mycmd.c\n\tgcc -o $@ $^\n\n.PHONY:clean\nclean:\n\trm -rf mycmd\n```\n\n**注**： 后面的程序都是这三个头文件，仅修改`main()`函数体即可\n*mycmd.c*\n```C\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n\n\nint main()\n{\n  while(1) sleep(1);//死循环使该进程常驻内存\n  return 0;\n}\n```\n然后编译并运行程序\n*命令行*\n```\nmake\n./mycmd\nps aux | grep mycmd | grep -v grep\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_22-56-05.png)\n\n## 进程标示符(PID PPID)\n可以通过系统接口获取进程标示符\n\n+ 进程id (pid)    使用`getpid()`\n+ 父进程id (ppid) 使用`getppid()`\n  \n*来修改一下代码*\n*mycmd.c*\n```C\n\nint main()\n{\n  printf(\"pid: %d\\n\",getpid());//打印pid (该进程id)\n  printf(\"ppid: %d\\n\",getppid());//打印ppid (父进程id)\n  return 0;\n}\n```\n\n*命令行*\n```\nmake clean\nmake\n./mycmd\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_23-28-35.png)\n\n## 利用`fork()`创建子进程\n\n*mycmd.c*\n```C\n\nint main()\n{\n  pid_t id = fork();\n  if(id == 0)//子进程\n  {\n    printf(\"child pid: %d\\n\",getpid());//打印pid (该进程id)\n    printf(\"child ppid: %d\\n\",getppid());//打印ppid (父进程id)\n    sleep(1);\n  }\n  else//父进程\n  {\n    printf(\"father pid: %d\\n\",getpid());//打印pid (该进程id)\n    printf(\"father ppid: %d\\n\",getppid());//打印ppid (父进程id)\n    sleep(1);\n  }\n  return 0;\n}\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_10-56-48.png)\n\n如图，`fork()`创建了子进程，且子进程的`PPID`和父进程`PID`相同\n\n### fork()的返回值\n父子进程中`fork()`函数的返回值(此处用变量`id`储存)是不同的:\n\n**父进程**里`id`的值为子进程的`PID`,其值`>0`;**子进程**里`id`值固定为`0`\n\n+ `id > 0` 父进程\n+ `id == 0` 子进程\n+ `id < 0` fork()失败\n\n### 父子进程分流\n利用`fork()`返回值不同的特性可以做到分流操作，利用`if...else...`让父子进程执行不同的代码\n\n[戳我去fork的详细介绍](https://www.supdriver.top/2024/07/07/fork/)\n\n# 进程状态 \n*状态在kernel源代码里定义*\n```C\n static const char * const task_state_array[] = {\n \"R (running)\", /* 0 */\n \"S (sleeping)\", /* 1 */\n \"D (disk sleep)\", /* 2 */\n \"T (stopped)\", /* 4 */\n \"t (tracing stop)\", /* 8 */\n \"X (dead)\", /* 16 */\n \"Z (zombie)\", /* 32 */\n };\n```\n\n## R 运行状态(running)\nR状态并不一定正在运行，而是`正在运行`和`处于运行队列`中的一种\n\n```C\nint main()\n{\n  while(1);\n  return 0;\n}\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-14-49.png)\n\n## S 睡眠状态(sleeping)\nS 意味着进程在**等待**运行完成\n\n(*这里的睡眠有时也可叫做可中断睡眠 interruptible sleep*)\n\n*下面展示两种S状态的进程*\n```C\nint main()\n{\n  sleep(50);\n  return 0;\n}\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-45-14.png)\n\n直接使用`sleep()`系列的函数直接使进程休眠\n\n```C\nint main()\n{\n  int n;\n  printf(\"Enter the num: \");\n  scanf(\"%d\",&n);\n  return 0;\n}\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-47-33.png)\n\n像`scanf()`这种需要等待外设(键盘)的接口，在**阻塞等待**资源的过程中会使进程进入`S`状态\n\n## D 磁盘休眠状态（Disk sleep）\n有时候也叫不可中断睡眠状态（uninterruptible sleep），在这个状态的进程通常会等待`IO`的结束。\n\n## T 停止状态（stopped）\n可以通过(*kill等命令*)发送 `SIGSTOP` 信号给进程来停止（T）进程。这个被暂停的进程可以通过发送 `SIGCONT `信号让进程继续运行。\n\n```C\nint main()\n{\n  while(1) sleep(1);\n  return 0;\n}\n```\n运行前先**复制**ssh渠道，其中一个窗口用于执行进程\n```\nmake clean\nmake\n./mycmd\n```\n另一个进程用于输入命令\n\n先查看该进程的`PID`\n```\nps ajx | head -1 && ps ajx | grep mycmd | grep -v grep\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-04-51.png)\n\n如图，这次的`PID`是`20275`\n\n然后用`kill`发送`SIGSTOP`,对应参数为`-19`\n\n```\nkill -19 20275\nps ajx | head -1 && ps ajx | grep mycmd | grep -v grep\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-06-38.png)\n\n可以看到它已经由`S`状态改为`T`状态了\n\n接下来发送`SIGCONT`,对应参数`-18`,使进程恢复\n\n```\nkill -18 20275\nps ajx | head -1 && ps ajx | grep mycmd | grep -v grep\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-08-45.png)\n\n可以看到已经由`T`变为原本的`S`状态了\n\n## X 死亡状态（dead）\n这个状态只是一个返回状态，你不会在任务列表里看到这个状态。\n\n## Z 僵尸进程(zombie)\n这个详细讨论下\n\n### 产生\n当该进程退出后，父进程尚未使用`wait()`之类的接口获取该进程的`退出码`,且父进程**没有结束**时，该进程会变成僵尸进程\n\n*父进程比子进程先退出时，子进程的父进程会改变为PID为1的进程，由新进程托管*\n\n*下面创建一个例子*\n\n```C\nint main()\n{\n  pid_t id = fork();\n  if(id == 0)//子进程\n  {\n    printf(\"child exit\\n\");\n  }\n  else//父进程\n  {\n    sleep(30);\n    printf(\"father exit\\n\");\n  }\n  return 0;\n}\n```\n\n运行程序后的`30秒`内查看进程状态，可以看到子进程进入了`Z`状态\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_16-27-27.png)\n\n### 行为\n僵尸进程会以终止状态保持在进程表中，等待父进程读取退出状态代码\n\n### 危害\n+ 父进程一直**未获取**子进程的退出码,僵尸状态就会一直保持\n+ 保持`Z`状态的进程的`PCB`仍然要一直维护，占用资源\n+ 未退出`Z`状态的子进程可能造成内存泄漏\n\n## 孤儿进程\n当父进程比子进程**先**退出后,这个子进程便成了`孤儿进程`\n\n既然原本的父进程没了，谁来托管子进程呢？答案是`PID`为`1`的那个进程\n\n*例子如下*\n\n```C\nint main()\n{\n  pid_t id = fork();\n  if(id == 0)//子进程\n  {\n    sleep(30);\n    printf(\"child exit\\n\");\n  }\n  else//父进程\n  {\n    sleep(1);\n    printf(\"father exit\\n\");\n  }\n  return 0;\n}\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_19-05-32.png)\n\n# 进程优先级\n\n## 基础概念\n+ cpu资源分配的先后顺序，就是指进程的优先权（priority）。\n+ 优先权高的进程有优先执行权利。配置进程优先权对多任务环境的linux很有用，可以改善系统性能。\n+ 还可以把进程运行到指定的CPU上，这样一来，把不重要的进程安排到某个CPU，可以大大改善系统整体性能\n\n## 查看优先级\n*首先写一个常驻进程*\n```C\nint main()\n{\n  while(1)sleep(1);\n  return 0;\n}\n```\n\n然后使用`ps -la`查看进程信息\n```\n./mycmd\nps -la\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_19-59-12.png)\n\n其中的`PRI`和`NI`与进程优先级有关,`PRI`就是进程的优先级，跟排队摇号一样，此值`越小`，被执行的优先级越高,而`NI`就是nice值，用于修正原`PRI`值\n\n### PRI值的计算\n首先在看到的`PRI`值之外，还有个隐藏的基准值，本文用`PRI0`指代，这个`PRI0`是固定的，当`NI`值为`0`时，`PRI == PRI0`,而\n无论怎么修改多少次`NI`,`PRI`的值减去`NI`值都相等，所以大可以推断在本系统(Linux)中,`PRI`值有如下计算公式\n\n`PRI = PRI0 + NI`\n\n### 修改NI值\n因为修改`NI`值要管理员权限，所以要么`root`用户用`top`，要么信任用户用`sudo top`打开界面，然后按`r`,输入待修改进程的`PID`,按下回车后再输入新的`NI`值(有效范围`-20~19`)\n\n*此处可以用`ps -la`查看进程的PID,或调用`getpid()`*\n\n*再写一个例子*\n```C\nint main()\n{\n  while(1)\n  {\n    printf(\"mypid: %d\\n\",getpid());\n    sleep(1);\n  }\n  return 0;\n}\n```\n`sudo top`然后按`r`\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-14-38.png)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-15-50.png)\n\n`ps -la`可以看到被修改后的进程优先级\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-17-02.png)\n\n# 其它概念\n\n+ 竞争性: 系统进程数目众多，而CPU资源只有少量，甚至1个，所以进程之间是具有竞争属性的。为了高效完成任务，更合理竞争相关资源，便具有了优先级\n+ 独立性: 多进程运行，需要独享各种资源，多进程运行期间**互不干扰**\n+ 并行: 多个进程在**多个CPU**下分别，同时进行运行，这称之为并行\n+ 并发: 多个进程在**一个CPU**下采用进程切换的方式，在一段时间之内，让多个进程都得以推进，称之为并发\n\n*下一章*[环境变量](https://www.supdriver.top/2024/07/06/evn/)\n","source":"_posts/progress.md","raw":"---\ntitle: 初识进程\ndate: 2024-07-04 23:02:14\ntags: 进程 Linux\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_23-41-09.png\n---\n\n***\n操作系统平台:Linux\n服务器系统: CentOS 7\n***\n\n# 概念抽象\n\n## 程序\n\n`程序` = `代码` + `数据`\n\n程序是储存在硬盘上的可执行文件\n\n## 进程\n将`程序`加载到`内存`后，就在`内存`中程序的就是进程。也就是说一个正在运行的程序就能叫做进程\n\n*结构关系如下*\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_13-55-08.png)\n\n如图，操作系统为了**管理**内存中的进程,使用了`PCB`结构体来描述进程,通过管理`PCB`来管理进程,依然是*先描述再组织*\n\n`PCB`:进程控制块的数据结构(process control block)\n\n所以实际上:`进程`=`PCB`+`代码和数据`\n\n对于`代码和数据`没什么好说的，接下来主要讨论`PCB`\n\n## task_struct\n`Linux`平台下的`PCB`叫做`task_struct`\n\n> `task_struct`内容分类:\n\n+ **标示符**: 描述本进程的唯一标示符，用来区别其他进程。\n+ **状态**: 任务状态，退出代码，退出信号等。\n+ **优先级**: 相对于其他进程的优先级。\n+ 程序计数器: 程序中即将被执行的下一条指令的地址。\n+ 内存指针: 包括程序代码和进程相关数据的指针，还有和其他进程共享的内存块的指针\n+ 上下文数据: 进程执行时处理器的寄存器中的数据。\n+ I／O状态信息: 包括显示的I/O请求,分配给进程的I／O设备和被进程使用的文件列表。\n+ 记账信息: 可能包括处理器时间总和，使用的时钟数总和，时间限制，记账号等。\n+ 其他信息\n  \n*加粗部分会详细介绍*\n\n# 查看进程\n进程的信息可以通过/proc 系统文件夹查看,其中文件夹的名字就是进程的`PID`\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_21-53-59.png)\n\n大多数进程信息同样可以使用top和ps这些用户级工具来获取\n\n> 以我自己编写的一个程序为例\n\n*Makefile*\n```\nmycmd:mycmd.c\n\tgcc -o $@ $^\n\n.PHONY:clean\nclean:\n\trm -rf mycmd\n```\n\n**注**： 后面的程序都是这三个头文件，仅修改`main()`函数体即可\n*mycmd.c*\n```C\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n\n\nint main()\n{\n  while(1) sleep(1);//死循环使该进程常驻内存\n  return 0;\n}\n```\n然后编译并运行程序\n*命令行*\n```\nmake\n./mycmd\nps aux | grep mycmd | grep -v grep\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_22-56-05.png)\n\n## 进程标示符(PID PPID)\n可以通过系统接口获取进程标示符\n\n+ 进程id (pid)    使用`getpid()`\n+ 父进程id (ppid) 使用`getppid()`\n  \n*来修改一下代码*\n*mycmd.c*\n```C\n\nint main()\n{\n  printf(\"pid: %d\\n\",getpid());//打印pid (该进程id)\n  printf(\"ppid: %d\\n\",getppid());//打印ppid (父进程id)\n  return 0;\n}\n```\n\n*命令行*\n```\nmake clean\nmake\n./mycmd\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_23-28-35.png)\n\n## 利用`fork()`创建子进程\n\n*mycmd.c*\n```C\n\nint main()\n{\n  pid_t id = fork();\n  if(id == 0)//子进程\n  {\n    printf(\"child pid: %d\\n\",getpid());//打印pid (该进程id)\n    printf(\"child ppid: %d\\n\",getppid());//打印ppid (父进程id)\n    sleep(1);\n  }\n  else//父进程\n  {\n    printf(\"father pid: %d\\n\",getpid());//打印pid (该进程id)\n    printf(\"father ppid: %d\\n\",getppid());//打印ppid (父进程id)\n    sleep(1);\n  }\n  return 0;\n}\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_10-56-48.png)\n\n如图，`fork()`创建了子进程，且子进程的`PPID`和父进程`PID`相同\n\n### fork()的返回值\n父子进程中`fork()`函数的返回值(此处用变量`id`储存)是不同的:\n\n**父进程**里`id`的值为子进程的`PID`,其值`>0`;**子进程**里`id`值固定为`0`\n\n+ `id > 0` 父进程\n+ `id == 0` 子进程\n+ `id < 0` fork()失败\n\n### 父子进程分流\n利用`fork()`返回值不同的特性可以做到分流操作，利用`if...else...`让父子进程执行不同的代码\n\n[戳我去fork的详细介绍](https://www.supdriver.top/2024/07/07/fork/)\n\n# 进程状态 \n*状态在kernel源代码里定义*\n```C\n static const char * const task_state_array[] = {\n \"R (running)\", /* 0 */\n \"S (sleeping)\", /* 1 */\n \"D (disk sleep)\", /* 2 */\n \"T (stopped)\", /* 4 */\n \"t (tracing stop)\", /* 8 */\n \"X (dead)\", /* 16 */\n \"Z (zombie)\", /* 32 */\n };\n```\n\n## R 运行状态(running)\nR状态并不一定正在运行，而是`正在运行`和`处于运行队列`中的一种\n\n```C\nint main()\n{\n  while(1);\n  return 0;\n}\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-14-49.png)\n\n## S 睡眠状态(sleeping)\nS 意味着进程在**等待**运行完成\n\n(*这里的睡眠有时也可叫做可中断睡眠 interruptible sleep*)\n\n*下面展示两种S状态的进程*\n```C\nint main()\n{\n  sleep(50);\n  return 0;\n}\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-45-14.png)\n\n直接使用`sleep()`系列的函数直接使进程休眠\n\n```C\nint main()\n{\n  int n;\n  printf(\"Enter the num: \");\n  scanf(\"%d\",&n);\n  return 0;\n}\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-47-33.png)\n\n像`scanf()`这种需要等待外设(键盘)的接口，在**阻塞等待**资源的过程中会使进程进入`S`状态\n\n## D 磁盘休眠状态（Disk sleep）\n有时候也叫不可中断睡眠状态（uninterruptible sleep），在这个状态的进程通常会等待`IO`的结束。\n\n## T 停止状态（stopped）\n可以通过(*kill等命令*)发送 `SIGSTOP` 信号给进程来停止（T）进程。这个被暂停的进程可以通过发送 `SIGCONT `信号让进程继续运行。\n\n```C\nint main()\n{\n  while(1) sleep(1);\n  return 0;\n}\n```\n运行前先**复制**ssh渠道，其中一个窗口用于执行进程\n```\nmake clean\nmake\n./mycmd\n```\n另一个进程用于输入命令\n\n先查看该进程的`PID`\n```\nps ajx | head -1 && ps ajx | grep mycmd | grep -v grep\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-04-51.png)\n\n如图，这次的`PID`是`20275`\n\n然后用`kill`发送`SIGSTOP`,对应参数为`-19`\n\n```\nkill -19 20275\nps ajx | head -1 && ps ajx | grep mycmd | grep -v grep\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-06-38.png)\n\n可以看到它已经由`S`状态改为`T`状态了\n\n接下来发送`SIGCONT`,对应参数`-18`,使进程恢复\n\n```\nkill -18 20275\nps ajx | head -1 && ps ajx | grep mycmd | grep -v grep\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-08-45.png)\n\n可以看到已经由`T`变为原本的`S`状态了\n\n## X 死亡状态（dead）\n这个状态只是一个返回状态，你不会在任务列表里看到这个状态。\n\n## Z 僵尸进程(zombie)\n这个详细讨论下\n\n### 产生\n当该进程退出后，父进程尚未使用`wait()`之类的接口获取该进程的`退出码`,且父进程**没有结束**时，该进程会变成僵尸进程\n\n*父进程比子进程先退出时，子进程的父进程会改变为PID为1的进程，由新进程托管*\n\n*下面创建一个例子*\n\n```C\nint main()\n{\n  pid_t id = fork();\n  if(id == 0)//子进程\n  {\n    printf(\"child exit\\n\");\n  }\n  else//父进程\n  {\n    sleep(30);\n    printf(\"father exit\\n\");\n  }\n  return 0;\n}\n```\n\n运行程序后的`30秒`内查看进程状态，可以看到子进程进入了`Z`状态\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_16-27-27.png)\n\n### 行为\n僵尸进程会以终止状态保持在进程表中，等待父进程读取退出状态代码\n\n### 危害\n+ 父进程一直**未获取**子进程的退出码,僵尸状态就会一直保持\n+ 保持`Z`状态的进程的`PCB`仍然要一直维护，占用资源\n+ 未退出`Z`状态的子进程可能造成内存泄漏\n\n## 孤儿进程\n当父进程比子进程**先**退出后,这个子进程便成了`孤儿进程`\n\n既然原本的父进程没了，谁来托管子进程呢？答案是`PID`为`1`的那个进程\n\n*例子如下*\n\n```C\nint main()\n{\n  pid_t id = fork();\n  if(id == 0)//子进程\n  {\n    sleep(30);\n    printf(\"child exit\\n\");\n  }\n  else//父进程\n  {\n    sleep(1);\n    printf(\"father exit\\n\");\n  }\n  return 0;\n}\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_19-05-32.png)\n\n# 进程优先级\n\n## 基础概念\n+ cpu资源分配的先后顺序，就是指进程的优先权（priority）。\n+ 优先权高的进程有优先执行权利。配置进程优先权对多任务环境的linux很有用，可以改善系统性能。\n+ 还可以把进程运行到指定的CPU上，这样一来，把不重要的进程安排到某个CPU，可以大大改善系统整体性能\n\n## 查看优先级\n*首先写一个常驻进程*\n```C\nint main()\n{\n  while(1)sleep(1);\n  return 0;\n}\n```\n\n然后使用`ps -la`查看进程信息\n```\n./mycmd\nps -la\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_19-59-12.png)\n\n其中的`PRI`和`NI`与进程优先级有关,`PRI`就是进程的优先级，跟排队摇号一样，此值`越小`，被执行的优先级越高,而`NI`就是nice值，用于修正原`PRI`值\n\n### PRI值的计算\n首先在看到的`PRI`值之外，还有个隐藏的基准值，本文用`PRI0`指代，这个`PRI0`是固定的，当`NI`值为`0`时，`PRI == PRI0`,而\n无论怎么修改多少次`NI`,`PRI`的值减去`NI`值都相等，所以大可以推断在本系统(Linux)中,`PRI`值有如下计算公式\n\n`PRI = PRI0 + NI`\n\n### 修改NI值\n因为修改`NI`值要管理员权限，所以要么`root`用户用`top`，要么信任用户用`sudo top`打开界面，然后按`r`,输入待修改进程的`PID`,按下回车后再输入新的`NI`值(有效范围`-20~19`)\n\n*此处可以用`ps -la`查看进程的PID,或调用`getpid()`*\n\n*再写一个例子*\n```C\nint main()\n{\n  while(1)\n  {\n    printf(\"mypid: %d\\n\",getpid());\n    sleep(1);\n  }\n  return 0;\n}\n```\n`sudo top`然后按`r`\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-14-38.png)\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-15-50.png)\n\n`ps -la`可以看到被修改后的进程优先级\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-17-02.png)\n\n# 其它概念\n\n+ 竞争性: 系统进程数目众多，而CPU资源只有少量，甚至1个，所以进程之间是具有竞争属性的。为了高效完成任务，更合理竞争相关资源，便具有了优先级\n+ 独立性: 多进程运行，需要独享各种资源，多进程运行期间**互不干扰**\n+ 并行: 多个进程在**多个CPU**下分别，同时进行运行，这称之为并行\n+ 并发: 多个进程在**一个CPU**下采用进程切换的方式，在一段时间之内，让多个进程都得以推进，称之为并发\n\n*下一章*[环境变量](https://www.supdriver.top/2024/07/06/evn/)\n","slug":"progress","published":1,"updated":"2024-07-07T15:42:57.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvf001lv8p560fq721p","content":"<hr>\n<p>操作系统平台:Linux<br>服务器系统: CentOS 7</p>\n<hr>\n<h1 id=\"概念抽象\"><a href=\"#概念抽象\" class=\"headerlink\" title=\"概念抽象\"></a>概念抽象</h1><h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><p><code>程序</code> &#x3D; <code>代码</code> + <code>数据</code></p>\n<p>程序是储存在硬盘上的可执行文件</p>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><p>将<code>程序</code>加载到<code>内存</code>后，就在<code>内存</code>中程序的就是进程。也就是说一个正在运行的程序就能叫做进程</p>\n<p><em>结构关系如下</em></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_13-55-08.png\"></p>\n<p>如图，操作系统为了<strong>管理</strong>内存中的进程,使用了<code>PCB</code>结构体来描述进程,通过管理<code>PCB</code>来管理进程,依然是<em>先描述再组织</em></p>\n<p><code>PCB</code>:进程控制块的数据结构(process control block)</p>\n<p>所以实际上:<code>进程</code>&#x3D;<code>PCB</code>+<code>代码和数据</code></p>\n<p>对于<code>代码和数据</code>没什么好说的，接下来主要讨论<code>PCB</code></p>\n<h2 id=\"task-struct\"><a href=\"#task-struct\" class=\"headerlink\" title=\"task_struct\"></a>task_struct</h2><p><code>Linux</code>平台下的<code>PCB</code>叫做<code>task_struct</code></p>\n<blockquote>\n<p><code>task_struct</code>内容分类:</p>\n</blockquote>\n<ul>\n<li><strong>标示符</strong>: 描述本进程的唯一标示符，用来区别其他进程。</li>\n<li><strong>状态</strong>: 任务状态，退出代码，退出信号等。</li>\n<li><strong>优先级</strong>: 相对于其他进程的优先级。</li>\n<li>程序计数器: 程序中即将被执行的下一条指令的地址。</li>\n<li>内存指针: 包括程序代码和进程相关数据的指针，还有和其他进程共享的内存块的指针</li>\n<li>上下文数据: 进程执行时处理器的寄存器中的数据。</li>\n<li>I／O状态信息: 包括显示的I&#x2F;O请求,分配给进程的I／O设备和被进程使用的文件列表。</li>\n<li>记账信息: 可能包括处理器时间总和，使用的时钟数总和，时间限制，记账号等。</li>\n<li>其他信息</li>\n</ul>\n<p><em>加粗部分会详细介绍</em></p>\n<h1 id=\"查看进程\"><a href=\"#查看进程\" class=\"headerlink\" title=\"查看进程\"></a>查看进程</h1><p>进程的信息可以通过&#x2F;proc 系统文件夹查看,其中文件夹的名字就是进程的<code>PID</code></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_21-53-59.png\"></p>\n<p>大多数进程信息同样可以使用top和ps这些用户级工具来获取</p>\n<blockquote>\n<p>以我自己编写的一个程序为例</p>\n</blockquote>\n<p><em>Makefile</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mycmd:mycmd.c</span><br><span class=\"line\">\tgcc -o $@ $^</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY:clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">\trm -rf mycmd</span><br></pre></td></tr></table></figure>\n\n<p><strong>注</strong>： 后面的程序都是这三个头文件，仅修改<code>main()</code>函数体即可<br><em>mycmd.c</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) sleep(<span class=\"number\">1</span>);<span class=\"comment\">//死循环使该进程常驻内存</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后编译并运行程序<br><em>命令行</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">./mycmd</span><br><span class=\"line\">ps aux | grep mycmd | grep -v grep</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_22-56-05.png\"></p>\n<h2 id=\"进程标示符-PID-PPID\"><a href=\"#进程标示符-PID-PPID\" class=\"headerlink\" title=\"进程标示符(PID PPID)\"></a>进程标示符(PID PPID)</h2><p>可以通过系统接口获取进程标示符</p>\n<ul>\n<li>进程id (pid)    使用<code>getpid()</code></li>\n<li>父进程id (ppid) 使用<code>getppid()</code></li>\n</ul>\n<p><em>来修改一下代码</em><br><em>mycmd.c</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pid: %d\\n&quot;</span>,getpid());<span class=\"comment\">//打印pid (该进程id)</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ppid: %d\\n&quot;</span>,getppid());<span class=\"comment\">//打印ppid (父进程id)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>命令行</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make clean</span><br><span class=\"line\">make</span><br><span class=\"line\">./mycmd</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_23-28-35.png\"></p>\n<h2 id=\"利用fork-创建子进程\"><a href=\"#利用fork-创建子进程\" class=\"headerlink\" title=\"利用fork()创建子进程\"></a>利用<code>fork()</code>创建子进程</h2><p><em>mycmd.c</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)<span class=\"comment\">//子进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child pid: %d\\n&quot;</span>,getpid());<span class=\"comment\">//打印pid (该进程id)</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child ppid: %d\\n&quot;</span>,getppid());<span class=\"comment\">//打印ppid (父进程id)</span></span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span><span class=\"comment\">//父进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father pid: %d\\n&quot;</span>,getpid());<span class=\"comment\">//打印pid (该进程id)</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father ppid: %d\\n&quot;</span>,getppid());<span class=\"comment\">//打印ppid (父进程id)</span></span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_10-56-48.png\"></p>\n<p>如图，<code>fork()</code>创建了子进程，且子进程的<code>PPID</code>和父进程<code>PID</code>相同</p>\n<h3 id=\"fork-的返回值\"><a href=\"#fork-的返回值\" class=\"headerlink\" title=\"fork()的返回值\"></a>fork()的返回值</h3><p>父子进程中<code>fork()</code>函数的返回值(此处用变量<code>id</code>储存)是不同的:</p>\n<p><strong>父进程</strong>里<code>id</code>的值为子进程的<code>PID</code>,其值<code>&gt;0</code>;<strong>子进程</strong>里<code>id</code>值固定为<code>0</code></p>\n<ul>\n<li><code>id &gt; 0</code> 父进程</li>\n<li><code>id == 0</code> 子进程</li>\n<li><code>id &lt; 0</code> fork()失败</li>\n</ul>\n<h3 id=\"父子进程分流\"><a href=\"#父子进程分流\" class=\"headerlink\" title=\"父子进程分流\"></a>父子进程分流</h3><p>利用<code>fork()</code>返回值不同的特性可以做到分流操作，利用<code>if...else...</code>让父子进程执行不同的代码</p>\n<p><a href=\"https://www.supdriver.top/2024/07/07/fork/\">戳我去fork的详细介绍</a></p>\n<h1 id=\"进程状态\"><a href=\"#进程状态\" class=\"headerlink\" title=\"进程状态\"></a>进程状态</h1><p><em>状态在kernel源代码里定义</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> * <span class=\"type\">const</span> task_state_array[] = &#123;</span><br><span class=\"line\"><span class=\"string\">&quot;R (running)&quot;</span>, <span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;S (sleeping)&quot;</span>, <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;D (disk sleep)&quot;</span>, <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;T (stopped)&quot;</span>, <span class=\"comment\">/* 4 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;t (tracing stop)&quot;</span>, <span class=\"comment\">/* 8 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;X (dead)&quot;</span>, <span class=\"comment\">/* 16 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;Z (zombie)&quot;</span>, <span class=\"comment\">/* 32 */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"R-运行状态-running\"><a href=\"#R-运行状态-running\" class=\"headerlink\" title=\"R 运行状态(running)\"></a>R 运行状态(running)</h2><p>R状态并不一定正在运行，而是<code>正在运行</code>和<code>处于运行队列</code>中的一种</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-14-49.png\"></p>\n<h2 id=\"S-睡眠状态-sleeping\"><a href=\"#S-睡眠状态-sleeping\" class=\"headerlink\" title=\"S 睡眠状态(sleeping)\"></a>S 睡眠状态(sleeping)</h2><p>S 意味着进程在<strong>等待</strong>运行完成</p>\n<p>(<em>这里的睡眠有时也可叫做可中断睡眠 interruptible sleep</em>)</p>\n<p><em>下面展示两种S状态的进程</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  sleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-45-14.png\"></p>\n<p>直接使用<code>sleep()</code>系列的函数直接使进程休眠</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter the num: &quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-47-33.png\"></p>\n<p>像<code>scanf()</code>这种需要等待外设(键盘)的接口，在<strong>阻塞等待</strong>资源的过程中会使进程进入<code>S</code>状态</p>\n<h2 id=\"D-磁盘休眠状态（Disk-sleep）\"><a href=\"#D-磁盘休眠状态（Disk-sleep）\" class=\"headerlink\" title=\"D 磁盘休眠状态（Disk sleep）\"></a>D 磁盘休眠状态（Disk sleep）</h2><p>有时候也叫不可中断睡眠状态（uninterruptible sleep），在这个状态的进程通常会等待<code>IO</code>的结束。</p>\n<h2 id=\"T-停止状态（stopped）\"><a href=\"#T-停止状态（stopped）\" class=\"headerlink\" title=\"T 停止状态（stopped）\"></a>T 停止状态（stopped）</h2><p>可以通过(<em>kill等命令</em>)发送 <code>SIGSTOP</code> 信号给进程来停止（T）进程。这个被暂停的进程可以通过发送 <code>SIGCONT </code>信号让进程继续运行。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行前先<strong>复制</strong>ssh渠道，其中一个窗口用于执行进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make clean</span><br><span class=\"line\">make</span><br><span class=\"line\">./mycmd</span><br></pre></td></tr></table></figure>\n<p>另一个进程用于输入命令</p>\n<p>先查看该进程的<code>PID</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps ajx | head -1 &amp;&amp; ps ajx | grep mycmd | grep -v grep</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-04-51.png\"></p>\n<p>如图，这次的<code>PID</code>是<code>20275</code></p>\n<p>然后用<code>kill</code>发送<code>SIGSTOP</code>,对应参数为<code>-19</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -19 20275</span><br><span class=\"line\">ps ajx | head -1 &amp;&amp; ps ajx | grep mycmd | grep -v grep</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-06-38.png\"></p>\n<p>可以看到它已经由<code>S</code>状态改为<code>T</code>状态了</p>\n<p>接下来发送<code>SIGCONT</code>,对应参数<code>-18</code>,使进程恢复</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -18 20275</span><br><span class=\"line\">ps ajx | head -1 &amp;&amp; ps ajx | grep mycmd | grep -v grep</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-08-45.png\"></p>\n<p>可以看到已经由<code>T</code>变为原本的<code>S</code>状态了</p>\n<h2 id=\"X-死亡状态（dead）\"><a href=\"#X-死亡状态（dead）\" class=\"headerlink\" title=\"X 死亡状态（dead）\"></a>X 死亡状态（dead）</h2><p>这个状态只是一个返回状态，你不会在任务列表里看到这个状态。</p>\n<h2 id=\"Z-僵尸进程-zombie\"><a href=\"#Z-僵尸进程-zombie\" class=\"headerlink\" title=\"Z 僵尸进程(zombie)\"></a>Z 僵尸进程(zombie)</h2><p>这个详细讨论下</p>\n<h3 id=\"产生\"><a href=\"#产生\" class=\"headerlink\" title=\"产生\"></a>产生</h3><p>当该进程退出后，父进程尚未使用<code>wait()</code>之类的接口获取该进程的<code>退出码</code>,且父进程<strong>没有结束</strong>时，该进程会变成僵尸进程</p>\n<p><em>父进程比子进程先退出时，子进程的父进程会改变为PID为1的进程，由新进程托管</em></p>\n<p><em>下面创建一个例子</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)<span class=\"comment\">//子进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child exit\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span><span class=\"comment\">//父进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">30</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father exit\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行程序后的<code>30秒</code>内查看进程状态，可以看到子进程进入了<code>Z</code>状态</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_16-27-27.png\"></p>\n<h3 id=\"行为\"><a href=\"#行为\" class=\"headerlink\" title=\"行为\"></a>行为</h3><p>僵尸进程会以终止状态保持在进程表中，等待父进程读取退出状态代码</p>\n<h3 id=\"危害\"><a href=\"#危害\" class=\"headerlink\" title=\"危害\"></a>危害</h3><ul>\n<li>父进程一直<strong>未获取</strong>子进程的退出码,僵尸状态就会一直保持</li>\n<li>保持<code>Z</code>状态的进程的<code>PCB</code>仍然要一直维护，占用资源</li>\n<li>未退出<code>Z</code>状态的子进程可能造成内存泄漏</li>\n</ul>\n<h2 id=\"孤儿进程\"><a href=\"#孤儿进程\" class=\"headerlink\" title=\"孤儿进程\"></a>孤儿进程</h2><p>当父进程比子进程<strong>先</strong>退出后,这个子进程便成了<code>孤儿进程</code></p>\n<p>既然原本的父进程没了，谁来托管子进程呢？答案是<code>PID</code>为<code>1</code>的那个进程</p>\n<p><em>例子如下</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)<span class=\"comment\">//子进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">30</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child exit\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span><span class=\"comment\">//父进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father exit\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_19-05-32.png\"></p>\n<h1 id=\"进程优先级\"><a href=\"#进程优先级\" class=\"headerlink\" title=\"进程优先级\"></a>进程优先级</h1><h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><ul>\n<li>cpu资源分配的先后顺序，就是指进程的优先权（priority）。</li>\n<li>优先权高的进程有优先执行权利。配置进程优先权对多任务环境的linux很有用，可以改善系统性能。</li>\n<li>还可以把进程运行到指定的CPU上，这样一来，把不重要的进程安排到某个CPU，可以大大改善系统整体性能</li>\n</ul>\n<h2 id=\"查看优先级\"><a href=\"#查看优先级\" class=\"headerlink\" title=\"查看优先级\"></a>查看优先级</h2><p><em>首先写一个常驻进程</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后使用<code>ps -la</code>查看进程信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mycmd</span><br><span class=\"line\">ps -la</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_19-59-12.png\"></p>\n<p>其中的<code>PRI</code>和<code>NI</code>与进程优先级有关,<code>PRI</code>就是进程的优先级，跟排队摇号一样，此值<code>越小</code>，被执行的优先级越高,而<code>NI</code>就是nice值，用于修正原<code>PRI</code>值</p>\n<h3 id=\"PRI值的计算\"><a href=\"#PRI值的计算\" class=\"headerlink\" title=\"PRI值的计算\"></a>PRI值的计算</h3><p>首先在看到的<code>PRI</code>值之外，还有个隐藏的基准值，本文用<code>PRI0</code>指代，这个<code>PRI0</code>是固定的，当<code>NI</code>值为<code>0</code>时，<code>PRI == PRI0</code>,而<br>无论怎么修改多少次<code>NI</code>,<code>PRI</code>的值减去<code>NI</code>值都相等，所以大可以推断在本系统(Linux)中,<code>PRI</code>值有如下计算公式</p>\n<p><code>PRI = PRI0 + NI</code></p>\n<h3 id=\"修改NI值\"><a href=\"#修改NI值\" class=\"headerlink\" title=\"修改NI值\"></a>修改NI值</h3><p>因为修改<code>NI</code>值要管理员权限，所以要么<code>root</code>用户用<code>top</code>，要么信任用户用<code>sudo top</code>打开界面，然后按<code>r</code>,输入待修改进程的<code>PID</code>,按下回车后再输入新的<code>NI</code>值(有效范围<code>-20~19</code>)</p>\n<p><em>此处可以用<code>ps -la</code>查看进程的PID,或调用<code>getpid()</code></em></p>\n<p><em>再写一个例子</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;mypid: %d\\n&quot;</span>,getpid());</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>sudo top</code>然后按<code>r</code></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-14-38.png\"></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-15-50.png\"></p>\n<p><code>ps -la</code>可以看到被修改后的进程优先级</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-17-02.png\"></p>\n<h1 id=\"其它概念\"><a href=\"#其它概念\" class=\"headerlink\" title=\"其它概念\"></a>其它概念</h1><ul>\n<li>竞争性: 系统进程数目众多，而CPU资源只有少量，甚至1个，所以进程之间是具有竞争属性的。为了高效完成任务，更合理竞争相关资源，便具有了优先级</li>\n<li>独立性: 多进程运行，需要独享各种资源，多进程运行期间<strong>互不干扰</strong></li>\n<li>并行: 多个进程在<strong>多个CPU</strong>下分别，同时进行运行，这称之为并行</li>\n<li>并发: 多个进程在<strong>一个CPU</strong>下采用进程切换的方式，在一段时间之内，让多个进程都得以推进，称之为并发</li>\n</ul>\n<p><em>下一章</em><a href=\"https://www.supdriver.top/2024/07/06/evn/\">环境变量</a></p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<hr>\n<p>操作系统平台:Linux<br>服务器系统: CentOS 7</p>\n<hr>\n<h1 id=\"概念抽象\"><a href=\"#概念抽象\" class=\"headerlink\" title=\"概念抽象\"></a>概念抽象</h1><h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><p><code>程序</code> &#x3D; <code>代码</code> + <code>数据</code></p>\n<p>程序是储存在硬盘上的可执行文件</p>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><p>将<code>程序</code>加载到<code>内存</code>后，就在<code>内存</code>中程序的就是进程。也就是说一个正在运行的程序就能叫做进程</p>\n<p><em>结构关系如下</em></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_13-55-08.png\"></p>\n<p>如图，操作系统为了<strong>管理</strong>内存中的进程,使用了<code>PCB</code>结构体来描述进程,通过管理<code>PCB</code>来管理进程,依然是<em>先描述再组织</em></p>\n<p><code>PCB</code>:进程控制块的数据结构(process control block)</p>\n<p>所以实际上:<code>进程</code>&#x3D;<code>PCB</code>+<code>代码和数据</code></p>\n<p>对于<code>代码和数据</code>没什么好说的，接下来主要讨论<code>PCB</code></p>\n<h2 id=\"task-struct\"><a href=\"#task-struct\" class=\"headerlink\" title=\"task_struct\"></a>task_struct</h2><p><code>Linux</code>平台下的<code>PCB</code>叫做<code>task_struct</code></p>\n<blockquote>\n<p><code>task_struct</code>内容分类:</p>\n</blockquote>\n<ul>\n<li><strong>标示符</strong>: 描述本进程的唯一标示符，用来区别其他进程。</li>\n<li><strong>状态</strong>: 任务状态，退出代码，退出信号等。</li>\n<li><strong>优先级</strong>: 相对于其他进程的优先级。</li>\n<li>程序计数器: 程序中即将被执行的下一条指令的地址。</li>\n<li>内存指针: 包括程序代码和进程相关数据的指针，还有和其他进程共享的内存块的指针</li>\n<li>上下文数据: 进程执行时处理器的寄存器中的数据。</li>\n<li>I／O状态信息: 包括显示的I&#x2F;O请求,分配给进程的I／O设备和被进程使用的文件列表。</li>\n<li>记账信息: 可能包括处理器时间总和，使用的时钟数总和，时间限制，记账号等。</li>\n<li>其他信息</li>\n</ul>\n<p><em>加粗部分会详细介绍</em></p>\n<h1 id=\"查看进程\"><a href=\"#查看进程\" class=\"headerlink\" title=\"查看进程\"></a>查看进程</h1><p>进程的信息可以通过&#x2F;proc 系统文件夹查看,其中文件夹的名字就是进程的<code>PID</code></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_21-53-59.png\"></p>\n<p>大多数进程信息同样可以使用top和ps这些用户级工具来获取</p>\n<blockquote>\n<p>以我自己编写的一个程序为例</p>\n</blockquote>\n<p><em>Makefile</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mycmd:mycmd.c</span><br><span class=\"line\">\tgcc -o $@ $^</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY:clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">\trm -rf mycmd</span><br></pre></td></tr></table></figure>\n\n<p><strong>注</strong>： 后面的程序都是这三个头文件，仅修改<code>main()</code>函数体即可<br><em>mycmd.c</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) sleep(<span class=\"number\">1</span>);<span class=\"comment\">//死循环使该进程常驻内存</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后编译并运行程序<br><em>命令行</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">./mycmd</span><br><span class=\"line\">ps aux | grep mycmd | grep -v grep</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_22-56-05.png\"></p>\n<h2 id=\"进程标示符-PID-PPID\"><a href=\"#进程标示符-PID-PPID\" class=\"headerlink\" title=\"进程标示符(PID PPID)\"></a>进程标示符(PID PPID)</h2><p>可以通过系统接口获取进程标示符</p>\n<ul>\n<li>进程id (pid)    使用<code>getpid()</code></li>\n<li>父进程id (ppid) 使用<code>getppid()</code></li>\n</ul>\n<p><em>来修改一下代码</em><br><em>mycmd.c</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pid: %d\\n&quot;</span>,getpid());<span class=\"comment\">//打印pid (该进程id)</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ppid: %d\\n&quot;</span>,getppid());<span class=\"comment\">//打印ppid (父进程id)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>命令行</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make clean</span><br><span class=\"line\">make</span><br><span class=\"line\">./mycmd</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-06_23-28-35.png\"></p>\n<h2 id=\"利用fork-创建子进程\"><a href=\"#利用fork-创建子进程\" class=\"headerlink\" title=\"利用fork()创建子进程\"></a>利用<code>fork()</code>创建子进程</h2><p><em>mycmd.c</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)<span class=\"comment\">//子进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child pid: %d\\n&quot;</span>,getpid());<span class=\"comment\">//打印pid (该进程id)</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child ppid: %d\\n&quot;</span>,getppid());<span class=\"comment\">//打印ppid (父进程id)</span></span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span><span class=\"comment\">//父进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father pid: %d\\n&quot;</span>,getpid());<span class=\"comment\">//打印pid (该进程id)</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father ppid: %d\\n&quot;</span>,getppid());<span class=\"comment\">//打印ppid (父进程id)</span></span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_10-56-48.png\"></p>\n<p>如图，<code>fork()</code>创建了子进程，且子进程的<code>PPID</code>和父进程<code>PID</code>相同</p>\n<h3 id=\"fork-的返回值\"><a href=\"#fork-的返回值\" class=\"headerlink\" title=\"fork()的返回值\"></a>fork()的返回值</h3><p>父子进程中<code>fork()</code>函数的返回值(此处用变量<code>id</code>储存)是不同的:</p>\n<p><strong>父进程</strong>里<code>id</code>的值为子进程的<code>PID</code>,其值<code>&gt;0</code>;<strong>子进程</strong>里<code>id</code>值固定为<code>0</code></p>\n<ul>\n<li><code>id &gt; 0</code> 父进程</li>\n<li><code>id == 0</code> 子进程</li>\n<li><code>id &lt; 0</code> fork()失败</li>\n</ul>\n<h3 id=\"父子进程分流\"><a href=\"#父子进程分流\" class=\"headerlink\" title=\"父子进程分流\"></a>父子进程分流</h3><p>利用<code>fork()</code>返回值不同的特性可以做到分流操作，利用<code>if...else...</code>让父子进程执行不同的代码</p>\n<p><a href=\"https://www.supdriver.top/2024/07/07/fork/\">戳我去fork的详细介绍</a></p>\n<h1 id=\"进程状态\"><a href=\"#进程状态\" class=\"headerlink\" title=\"进程状态\"></a>进程状态</h1><p><em>状态在kernel源代码里定义</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> * <span class=\"type\">const</span> task_state_array[] = &#123;</span><br><span class=\"line\"><span class=\"string\">&quot;R (running)&quot;</span>, <span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;S (sleeping)&quot;</span>, <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;D (disk sleep)&quot;</span>, <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;T (stopped)&quot;</span>, <span class=\"comment\">/* 4 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;t (tracing stop)&quot;</span>, <span class=\"comment\">/* 8 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;X (dead)&quot;</span>, <span class=\"comment\">/* 16 */</span></span><br><span class=\"line\"><span class=\"string\">&quot;Z (zombie)&quot;</span>, <span class=\"comment\">/* 32 */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"R-运行状态-running\"><a href=\"#R-运行状态-running\" class=\"headerlink\" title=\"R 运行状态(running)\"></a>R 运行状态(running)</h2><p>R状态并不一定正在运行，而是<code>正在运行</code>和<code>处于运行队列</code>中的一种</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-14-49.png\"></p>\n<h2 id=\"S-睡眠状态-sleeping\"><a href=\"#S-睡眠状态-sleeping\" class=\"headerlink\" title=\"S 睡眠状态(sleeping)\"></a>S 睡眠状态(sleeping)</h2><p>S 意味着进程在<strong>等待</strong>运行完成</p>\n<p>(<em>这里的睡眠有时也可叫做可中断睡眠 interruptible sleep</em>)</p>\n<p><em>下面展示两种S状态的进程</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  sleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-45-14.png\"></p>\n<p>直接使用<code>sleep()</code>系列的函数直接使进程休眠</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter the num: &quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_13-47-33.png\"></p>\n<p>像<code>scanf()</code>这种需要等待外设(键盘)的接口，在<strong>阻塞等待</strong>资源的过程中会使进程进入<code>S</code>状态</p>\n<h2 id=\"D-磁盘休眠状态（Disk-sleep）\"><a href=\"#D-磁盘休眠状态（Disk-sleep）\" class=\"headerlink\" title=\"D 磁盘休眠状态（Disk sleep）\"></a>D 磁盘休眠状态（Disk sleep）</h2><p>有时候也叫不可中断睡眠状态（uninterruptible sleep），在这个状态的进程通常会等待<code>IO</code>的结束。</p>\n<h2 id=\"T-停止状态（stopped）\"><a href=\"#T-停止状态（stopped）\" class=\"headerlink\" title=\"T 停止状态（stopped）\"></a>T 停止状态（stopped）</h2><p>可以通过(<em>kill等命令</em>)发送 <code>SIGSTOP</code> 信号给进程来停止（T）进程。这个被暂停的进程可以通过发送 <code>SIGCONT </code>信号让进程继续运行。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行前先<strong>复制</strong>ssh渠道，其中一个窗口用于执行进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make clean</span><br><span class=\"line\">make</span><br><span class=\"line\">./mycmd</span><br></pre></td></tr></table></figure>\n<p>另一个进程用于输入命令</p>\n<p>先查看该进程的<code>PID</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps ajx | head -1 &amp;&amp; ps ajx | grep mycmd | grep -v grep</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-04-51.png\"></p>\n<p>如图，这次的<code>PID</code>是<code>20275</code></p>\n<p>然后用<code>kill</code>发送<code>SIGSTOP</code>,对应参数为<code>-19</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -19 20275</span><br><span class=\"line\">ps ajx | head -1 &amp;&amp; ps ajx | grep mycmd | grep -v grep</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-06-38.png\"></p>\n<p>可以看到它已经由<code>S</code>状态改为<code>T</code>状态了</p>\n<p>接下来发送<code>SIGCONT</code>,对应参数<code>-18</code>,使进程恢复</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -18 20275</span><br><span class=\"line\">ps ajx | head -1 &amp;&amp; ps ajx | grep mycmd | grep -v grep</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_15-08-45.png\"></p>\n<p>可以看到已经由<code>T</code>变为原本的<code>S</code>状态了</p>\n<h2 id=\"X-死亡状态（dead）\"><a href=\"#X-死亡状态（dead）\" class=\"headerlink\" title=\"X 死亡状态（dead）\"></a>X 死亡状态（dead）</h2><p>这个状态只是一个返回状态，你不会在任务列表里看到这个状态。</p>\n<h2 id=\"Z-僵尸进程-zombie\"><a href=\"#Z-僵尸进程-zombie\" class=\"headerlink\" title=\"Z 僵尸进程(zombie)\"></a>Z 僵尸进程(zombie)</h2><p>这个详细讨论下</p>\n<h3 id=\"产生\"><a href=\"#产生\" class=\"headerlink\" title=\"产生\"></a>产生</h3><p>当该进程退出后，父进程尚未使用<code>wait()</code>之类的接口获取该进程的<code>退出码</code>,且父进程<strong>没有结束</strong>时，该进程会变成僵尸进程</p>\n<p><em>父进程比子进程先退出时，子进程的父进程会改变为PID为1的进程，由新进程托管</em></p>\n<p><em>下面创建一个例子</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)<span class=\"comment\">//子进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child exit\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span><span class=\"comment\">//父进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">30</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father exit\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行程序后的<code>30秒</code>内查看进程状态，可以看到子进程进入了<code>Z</code>状态</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_16-27-27.png\"></p>\n<h3 id=\"行为\"><a href=\"#行为\" class=\"headerlink\" title=\"行为\"></a>行为</h3><p>僵尸进程会以终止状态保持在进程表中，等待父进程读取退出状态代码</p>\n<h3 id=\"危害\"><a href=\"#危害\" class=\"headerlink\" title=\"危害\"></a>危害</h3><ul>\n<li>父进程一直<strong>未获取</strong>子进程的退出码,僵尸状态就会一直保持</li>\n<li>保持<code>Z</code>状态的进程的<code>PCB</code>仍然要一直维护，占用资源</li>\n<li>未退出<code>Z</code>状态的子进程可能造成内存泄漏</li>\n</ul>\n<h2 id=\"孤儿进程\"><a href=\"#孤儿进程\" class=\"headerlink\" title=\"孤儿进程\"></a>孤儿进程</h2><p>当父进程比子进程<strong>先</strong>退出后,这个子进程便成了<code>孤儿进程</code></p>\n<p>既然原本的父进程没了，谁来托管子进程呢？答案是<code>PID</code>为<code>1</code>的那个进程</p>\n<p><em>例子如下</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">pid_t</span> id = fork();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>)<span class=\"comment\">//子进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">30</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child exit\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span><span class=\"comment\">//父进程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;father exit\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_19-05-32.png\"></p>\n<h1 id=\"进程优先级\"><a href=\"#进程优先级\" class=\"headerlink\" title=\"进程优先级\"></a>进程优先级</h1><h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><ul>\n<li>cpu资源分配的先后顺序，就是指进程的优先权（priority）。</li>\n<li>优先权高的进程有优先执行权利。配置进程优先权对多任务环境的linux很有用，可以改善系统性能。</li>\n<li>还可以把进程运行到指定的CPU上，这样一来，把不重要的进程安排到某个CPU，可以大大改善系统整体性能</li>\n</ul>\n<h2 id=\"查看优先级\"><a href=\"#查看优先级\" class=\"headerlink\" title=\"查看优先级\"></a>查看优先级</h2><p><em>首先写一个常驻进程</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后使用<code>ps -la</code>查看进程信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mycmd</span><br><span class=\"line\">ps -la</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_19-59-12.png\"></p>\n<p>其中的<code>PRI</code>和<code>NI</code>与进程优先级有关,<code>PRI</code>就是进程的优先级，跟排队摇号一样，此值<code>越小</code>，被执行的优先级越高,而<code>NI</code>就是nice值，用于修正原<code>PRI</code>值</p>\n<h3 id=\"PRI值的计算\"><a href=\"#PRI值的计算\" class=\"headerlink\" title=\"PRI值的计算\"></a>PRI值的计算</h3><p>首先在看到的<code>PRI</code>值之外，还有个隐藏的基准值，本文用<code>PRI0</code>指代，这个<code>PRI0</code>是固定的，当<code>NI</code>值为<code>0</code>时，<code>PRI == PRI0</code>,而<br>无论怎么修改多少次<code>NI</code>,<code>PRI</code>的值减去<code>NI</code>值都相等，所以大可以推断在本系统(Linux)中,<code>PRI</code>值有如下计算公式</p>\n<p><code>PRI = PRI0 + NI</code></p>\n<h3 id=\"修改NI值\"><a href=\"#修改NI值\" class=\"headerlink\" title=\"修改NI值\"></a>修改NI值</h3><p>因为修改<code>NI</code>值要管理员权限，所以要么<code>root</code>用户用<code>top</code>，要么信任用户用<code>sudo top</code>打开界面，然后按<code>r</code>,输入待修改进程的<code>PID</code>,按下回车后再输入新的<code>NI</code>值(有效范围<code>-20~19</code>)</p>\n<p><em>此处可以用<code>ps -la</code>查看进程的PID,或调用<code>getpid()</code></em></p>\n<p><em>再写一个例子</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;mypid: %d\\n&quot;</span>,getpid());</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>sudo top</code>然后按<code>r</code></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-14-38.png\"></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-15-50.png\"></p>\n<p><code>ps -la</code>可以看到被修改后的进程优先级</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-07_21-17-02.png\"></p>\n<h1 id=\"其它概念\"><a href=\"#其它概念\" class=\"headerlink\" title=\"其它概念\"></a>其它概念</h1><ul>\n<li>竞争性: 系统进程数目众多，而CPU资源只有少量，甚至1个，所以进程之间是具有竞争属性的。为了高效完成任务，更合理竞争相关资源，便具有了优先级</li>\n<li>独立性: 多进程运行，需要独享各种资源，多进程运行期间<strong>互不干扰</strong></li>\n<li>并行: 多个进程在<strong>多个CPU</strong>下分别，同时进行运行，这称之为并行</li>\n<li>并发: 多个进程在<strong>一个CPU</strong>下采用进程切换的方式，在一段时间之内，让多个进程都得以推进，称之为并发</li>\n</ul>\n<p><em>下一章</em><a href=\"https://www.supdriver.top/2024/07/06/evn/\">环境变量</a></p>\n"},{"title":"=C入门=深入研究 字符串与字符数组","date":"2023-11-08T13:11:51.000Z","_content":"# 什么是字符串 #\n## 初见字符串 #\n我们最先遇到的字符串,一般是`hello_world`程序中用到的`\"hello world\"`,也就是**两个双引号括起来的一串字符**,输出时的占位符是`%s`,可以直接拿去传值，代码如下\n```C\nprintf(\"%s\",\"hello world\");\n```\n## 声明字符串变量 #\n有时我们想要先把字符串存起来，再进行操作，那么就使用**字符数组**，并在**初始化**的时候把字符串传给它,这样在**创建数组**时会编译器会自动分配内存给它，代码如下\n\n```C\nchar str[] = \"abcdef\";\n```\n\n此时我们也可以开启VS的**调试**，并打开**内存**和**监视**窗口观察字符串是如何在内存中储存的,如下图\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_10-06-06.jpg)\n\n通过观察可以发现，C语⾔字符串的字符串有个`规定`(特点)，就是以字符`\\0`结尾，无论是初始化数组时，还是在分配内存时，都有`\\0`的位置。\n\n### strlen()函数 #\n依据以`\\0`为字符串结尾的规则，`strlen`函数就可以计算字符串的长度，它会从字符串的第一个字符向后扫描，直到遇到`\\0`结束,且`\\0`不进入计数，最后返回字符串的长度,代码如下\n```C\n#include <string.h> //需要引对应的头文件\n\nint len = strlen(\"abcdef\");//len的值为6\nint sz = sizeof(\"abcdef\");//sz的大小为7(\\0被计入总数)\n```\n\n### 验证字符串的结尾 #\n\n#### 正向验证 #\n我们做在字符数组里插入一个`\\0`,来看看函数`printf`和`strlen`找到的结尾在哪里,如下图\n\n```C\nchar str[] = {'a','b','c','\\0','d','e','f','\\0'};\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_11-01-35.jpg)\n\n可以看到字符数组似乎被“截断”了，`printf`只输出了`\\0`前面的内容, `strlen`算出来的长度也只有`3`,可见插入的`\\0`被作为了**字符串**的结尾，字符串提前中指,而没到达**字符数组**的结尾\n\n\n\n#### 反向验证 #\n\n我们来**反向**验证一下，`\\0`是字符串结尾的标志,如下图，我们声明一个**没有**`\\0`结尾的字符数组，看看函数`printf`和`strlen`还找不找得到我们“认为”的结尾\n```C\nchar str[] = {'a','b','c','d','e','f'};\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_14-02-07.jpg)\n\n可以看到函数对字符串的判断出现了严重**失误**，所以**字符数组**里没有`\\0`标记结尾是非常严重的问题，不光是找不到字符串的结尾，而且会**越界访问**！危险操作，写代码的时候一定要注意\n\n---\n\n## 从字符串到字符数组 #\n虽然上面已经用到了字符数组，但主要还是为了方便讨论**字符串**,接下来着重研究字符数组。\n\n### 先整清楚几个概念 #\n`什么是数组`：数组是⼀组相同类型元素的集合,会在内存中开辟一段连续的空间，将元素储存在那段内存中\n\n`什么是数组元素`：存放在数组的值被称为数组的元素，数组在创建的时候可以指定数组的⼤⼩和数组的元素类型。\n\n所以`字符数组`是一组`字符`的集合，字符数组里的`元素`都是`字符`!,访问到的字符数组里的**元素**都是**字符**，像`'a'`,`'b'`,`'c'`这种的单个的字符,别和`字符串`混为一谈！\n\n```C\nchar str = \"abc\";\nint sz = sizeof(str);//这里str代表了整个数组,所以包括\\0\n,sz的值为4\n\n```\n\n### 字符数组的声明 #\n字符数组的声明和其他类型的数组差不多，有**初始化**，**不完全初始化**，**声明长度**，**不声明长度**\n\n*正确的声明代码如下*\n```C\nchar str1[] = \"abc\";//初始化,不声明长度\n\nchar str2[] = {'a','b','c','\\0'};//这也是初始化，且不声明长度\n\nchar str3[10] = { 0 };//初始化，用值0(等价于`\\0`)填充\n\nchar str4[10] = \"abc\";//不完全初始化，存入字符串\"abc\",后面都用'\\0'填充\n\nchar str5[10] = {'a','b','c','d'};//不完全初始化,从下标为0开始，依次往后填充字符 a,b,c,\\0\n\n```\n*错误的声明代码*\n```C\nchar str1[3] = \"abc\";//数组声明短了，放不下结尾的\\0,编译过不了\n\nchar str2[3] = {'a','b','c','d'};//同上,放不下\n\nchar str3[] = { 0 };//能声明，但是字符数组长度为1，这个数组大概率是用不了的/会被拿去错误使用的\n\n```\n### 来看看这些声明方式在内存中的表现 #\n\n#### 不初始化的声明(极度不推荐) #\n```C\nchar str[];//这个不加长度，直接编译失败（如下图）\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_11-39-10.jpg)\n\n```C\nchar str[10];//语法没有问题，来看看此时数组里存了什么\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_11-46-49.jpg)\n可以看到全都存了`-52`,对应的中文字符是`烫`，这样**不好**，请在声明字符数组的时候**初始化数组**\n#### 不声明长度的数组声明\n```C\nchar str1[] = \"abc\";\n\nchar str2[] = {'a','b','c','\\0'};\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_14-59-34.jpg)\n\n如上图，不声明长度时，编译器自动给字符数组分配内存，既不给多，也不给少，初始化给的`字符串`或者`{...}`多长，创建的数组就多长。\n\n**注意红框**，再强调一遍，字符串以`\\0`结尾,看到双引号括起来的字符串，要记得最后隐藏了一个`\\0`,用字符数组储存的时候一定要留足空间\n\n#### 声明长度的数组声明 #\n```C\nchar str3[10] = { 0 };\n\nchar str4[10] = \"abc\";\n\nchar str5[10] = {'a','b','c','d'};\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_15-25-54.jpg)\n\n可以看到，在声明的长度**足够长**时，你初始化的时候给它多少字符，它就从`下标0`处开始**按顺序**存进去多少,剩下的部分**自动**用`'\\0'`填充,\n\n所以实际上上面代码中的`str5`因为长度`10`>初始化给的`4`个字符，后面六个元素用`\\0`填充了，所以`str5`里存了有**结尾**的完整字符串\n\n#### 错误声明 #\n```C\nchar str1[3] = \"abc\";\nchar str2[3] = { 'a','b','c','d' };\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_07-44-57.jpg)\n\n可以看到上面两种错误的声明方式，甚至直接**编译失败**,所以声明字符数组的时候一定要**留足空间**\n\n```C\nchar str3[] = { 0 };\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_07-51-55.jpg)\n\n如上图，可以看到这样写还是编译成功了，但是在监视查看**数组长度**的时候，发现长度为`1`,里面存了一个`\\0`,这么**短**的数组能用吗？只能**用一点点**，甚至还不如直接声明一个`char`类型的字符变量\n\n## 当字符数组加上const #\n```C\nconst char str[5] = \"abc\";\n```\n### 一些性质 #\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_18-55-52.jpg)\n\n可以看到，声明时加了`const`之后，字符数组`str`在声明时的**初始化**之后便不可更改了，只能**访问**其元素,而**不能通过访问元素来改变数组内容**\n\n那么`scanf`还能写入内容吗？答案是**可以**!*(如下图)*\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-10-43.jpg)\n\n那它能拿来初始化别的数组吗？很遗憾，**不能**\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-05-15.jpg)\n\n### 对应的指针类型 #\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-15-32.jpg)\n\n可以看到，这里得用`const char*`来储存字符数组的地址，而使用`char*`就会报错\n\n那么用`双引号括起来的字符串`，是否也有地址，能用指针储存它的地址呢？\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-21-10.jpg)\n\n如图，可以看到,字符串`\"abc\"`是属于`const char`类型的数组，对应的指针是`const char*`,不能通过访问元素来改变内部的值，也不能用`char*`来储存地址\n\n#### 在内存中的表现 #\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/const_str.gif)\n\n可以看到哪怕是字符串`\"abc\"`,也是在内存中开辟了一段空间，并把字符**储存在内存中**了的\n\n但是，**不要**试图用`scanf`去改变字符串的值\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/const_strrrr.gif)\n\n---\n\n## 如何向字符数组里添加内容 #\n添加的方法多种多样，搞不好可能还会出错，所以把字符数组**学明白**很重要！\n\n以下使用的数组样例声明如下\n```C\nchar str[10] = { 0 };\n```\n\n### 初始化 #\n在初始化的时候就把值传进去，有哪些初始化方式**上面**已经介绍过了，这里不多赘述\n\n### 访问数组元素 #\n通过`[]`可以访问数组元素，并对没有`const`修饰的数组，修改其元素,例如:\n\n```C\nstr[0] = 'A';//将数组的第一个元素改成字符A\n```\n\n我们也可以通过循环的方式，将数组的所有元素填充为某个字符\n\n```C\nchar place_holder = 'A';\nfor(int i = 0; i < 10 ; i++)//这里使用左闭右开区间，10为数组的大小\n{\n    str[i] = place_holder;\n}\n```\n\n### 使用`scanf`函数 #\n由上面的探究已知：对于已声明的字符数组，**无论**有没有`const`修饰，都可已用`scanf`修改内容,那么`scanf`怎么用，又具体怎么工作的，我们接着往下探究\n\n#### 使用示例 #\n```C\nchar str[10] = { 0 };\nscanf(\"%s\",str);//占位符是 %s ,右边的参数是 str ,也就是数组名\n//或者 scanf(\"%s\",&str)\n```\n**注意**！这边的数组名`str`储存的是**数组首元素的地址**，而`&str`储存的是`整个数组的地址`，值是一样的，两者皆可用于传参，但**指针类型不一样**，要做好区分\n\n#### `scanf`都做了什么 #\n先来看看它分别对用`{ 0 }`**初始化**和**不初始化**的数组做了什么\n```C\nchar str1[10] = { 0 };\nscanf(\"%s\",str1);\nchar str2[10];\nscanf(\"%s\",str2);\n```\n*两个数组的输入均为abc*\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-11_19-09-50.jpg)\n\n可以看到，对`str1`,字符非常正常地填充进去了，因为整个数组原本是用`\\0`填充的,看不出什么端倪\n\n而对于`str2`,观察发现，除了输入进去的字符`a`,`b`,`c`,它还自动在结尾补了一个`\\0`,使`str2`里储存了一个完整的字符串。**但是**，剩下的部分还是用**值**`-52`填充，即未初始化的状态，所以依然**不提倡**声明的时候没有初始化\n\n然后是在字符数组内已有内容的情况下，再次使用`scanf`的情况\n```C\nchar str1[5] = \"abc\";\nchar str2[5] = \"abc\";\n\nscanf(\"%s %s\",str1,str2);\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-12_09-33-02.jpg)\n\n如图，`scanf`做的是把输入的字符串`覆盖`式存入字符数组，比原来长，就完全覆盖，比原来短，就部分覆盖，未覆盖的部分无改动\n\n#### 关于`scanf`的危险操作 #\n由于`scanf`无法预测**字符数组**能否存下输入的**字符串**，如果**字符数组**声明的长度不够，就可能出现**越界访问**,随之而来的便是奇奇怪怪的`bug`\n\n```C\nchar str[4] = { 0 };//先声明一个长度为4的数组\nscanf(\"%s\",str);//这次输入abcdef试试\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-12_09-47-00.jpg)\n\n可以看到，确实**越界访问**了，所以声明字符数组的时候，建议比预计最大输入，在多些长度，防止越界访问。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/str-arr.md","raw":"---\ntitle: =C入门=深入研究 字符串与字符数组\ndate: 2023-11-08 21:11:51\ntags: C语言 字符串 数组\n---\n# 什么是字符串 #\n## 初见字符串 #\n我们最先遇到的字符串,一般是`hello_world`程序中用到的`\"hello world\"`,也就是**两个双引号括起来的一串字符**,输出时的占位符是`%s`,可以直接拿去传值，代码如下\n```C\nprintf(\"%s\",\"hello world\");\n```\n## 声明字符串变量 #\n有时我们想要先把字符串存起来，再进行操作，那么就使用**字符数组**，并在**初始化**的时候把字符串传给它,这样在**创建数组**时会编译器会自动分配内存给它，代码如下\n\n```C\nchar str[] = \"abcdef\";\n```\n\n此时我们也可以开启VS的**调试**，并打开**内存**和**监视**窗口观察字符串是如何在内存中储存的,如下图\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_10-06-06.jpg)\n\n通过观察可以发现，C语⾔字符串的字符串有个`规定`(特点)，就是以字符`\\0`结尾，无论是初始化数组时，还是在分配内存时，都有`\\0`的位置。\n\n### strlen()函数 #\n依据以`\\0`为字符串结尾的规则，`strlen`函数就可以计算字符串的长度，它会从字符串的第一个字符向后扫描，直到遇到`\\0`结束,且`\\0`不进入计数，最后返回字符串的长度,代码如下\n```C\n#include <string.h> //需要引对应的头文件\n\nint len = strlen(\"abcdef\");//len的值为6\nint sz = sizeof(\"abcdef\");//sz的大小为7(\\0被计入总数)\n```\n\n### 验证字符串的结尾 #\n\n#### 正向验证 #\n我们做在字符数组里插入一个`\\0`,来看看函数`printf`和`strlen`找到的结尾在哪里,如下图\n\n```C\nchar str[] = {'a','b','c','\\0','d','e','f','\\0'};\n```\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_11-01-35.jpg)\n\n可以看到字符数组似乎被“截断”了，`printf`只输出了`\\0`前面的内容, `strlen`算出来的长度也只有`3`,可见插入的`\\0`被作为了**字符串**的结尾，字符串提前中指,而没到达**字符数组**的结尾\n\n\n\n#### 反向验证 #\n\n我们来**反向**验证一下，`\\0`是字符串结尾的标志,如下图，我们声明一个**没有**`\\0`结尾的字符数组，看看函数`printf`和`strlen`还找不找得到我们“认为”的结尾\n```C\nchar str[] = {'a','b','c','d','e','f'};\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_14-02-07.jpg)\n\n可以看到函数对字符串的判断出现了严重**失误**，所以**字符数组**里没有`\\0`标记结尾是非常严重的问题，不光是找不到字符串的结尾，而且会**越界访问**！危险操作，写代码的时候一定要注意\n\n---\n\n## 从字符串到字符数组 #\n虽然上面已经用到了字符数组，但主要还是为了方便讨论**字符串**,接下来着重研究字符数组。\n\n### 先整清楚几个概念 #\n`什么是数组`：数组是⼀组相同类型元素的集合,会在内存中开辟一段连续的空间，将元素储存在那段内存中\n\n`什么是数组元素`：存放在数组的值被称为数组的元素，数组在创建的时候可以指定数组的⼤⼩和数组的元素类型。\n\n所以`字符数组`是一组`字符`的集合，字符数组里的`元素`都是`字符`!,访问到的字符数组里的**元素**都是**字符**，像`'a'`,`'b'`,`'c'`这种的单个的字符,别和`字符串`混为一谈！\n\n```C\nchar str = \"abc\";\nint sz = sizeof(str);//这里str代表了整个数组,所以包括\\0\n,sz的值为4\n\n```\n\n### 字符数组的声明 #\n字符数组的声明和其他类型的数组差不多，有**初始化**，**不完全初始化**，**声明长度**，**不声明长度**\n\n*正确的声明代码如下*\n```C\nchar str1[] = \"abc\";//初始化,不声明长度\n\nchar str2[] = {'a','b','c','\\0'};//这也是初始化，且不声明长度\n\nchar str3[10] = { 0 };//初始化，用值0(等价于`\\0`)填充\n\nchar str4[10] = \"abc\";//不完全初始化，存入字符串\"abc\",后面都用'\\0'填充\n\nchar str5[10] = {'a','b','c','d'};//不完全初始化,从下标为0开始，依次往后填充字符 a,b,c,\\0\n\n```\n*错误的声明代码*\n```C\nchar str1[3] = \"abc\";//数组声明短了，放不下结尾的\\0,编译过不了\n\nchar str2[3] = {'a','b','c','d'};//同上,放不下\n\nchar str3[] = { 0 };//能声明，但是字符数组长度为1，这个数组大概率是用不了的/会被拿去错误使用的\n\n```\n### 来看看这些声明方式在内存中的表现 #\n\n#### 不初始化的声明(极度不推荐) #\n```C\nchar str[];//这个不加长度，直接编译失败（如下图）\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_11-39-10.jpg)\n\n```C\nchar str[10];//语法没有问题，来看看此时数组里存了什么\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_11-46-49.jpg)\n可以看到全都存了`-52`,对应的中文字符是`烫`，这样**不好**，请在声明字符数组的时候**初始化数组**\n#### 不声明长度的数组声明\n```C\nchar str1[] = \"abc\";\n\nchar str2[] = {'a','b','c','\\0'};\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_14-59-34.jpg)\n\n如上图，不声明长度时，编译器自动给字符数组分配内存，既不给多，也不给少，初始化给的`字符串`或者`{...}`多长，创建的数组就多长。\n\n**注意红框**，再强调一遍，字符串以`\\0`结尾,看到双引号括起来的字符串，要记得最后隐藏了一个`\\0`,用字符数组储存的时候一定要留足空间\n\n#### 声明长度的数组声明 #\n```C\nchar str3[10] = { 0 };\n\nchar str4[10] = \"abc\";\n\nchar str5[10] = {'a','b','c','d'};\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_15-25-54.jpg)\n\n可以看到，在声明的长度**足够长**时，你初始化的时候给它多少字符，它就从`下标0`处开始**按顺序**存进去多少,剩下的部分**自动**用`'\\0'`填充,\n\n所以实际上上面代码中的`str5`因为长度`10`>初始化给的`4`个字符，后面六个元素用`\\0`填充了，所以`str5`里存了有**结尾**的完整字符串\n\n#### 错误声明 #\n```C\nchar str1[3] = \"abc\";\nchar str2[3] = { 'a','b','c','d' };\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_07-44-57.jpg)\n\n可以看到上面两种错误的声明方式，甚至直接**编译失败**,所以声明字符数组的时候一定要**留足空间**\n\n```C\nchar str3[] = { 0 };\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_07-51-55.jpg)\n\n如上图，可以看到这样写还是编译成功了，但是在监视查看**数组长度**的时候，发现长度为`1`,里面存了一个`\\0`,这么**短**的数组能用吗？只能**用一点点**，甚至还不如直接声明一个`char`类型的字符变量\n\n## 当字符数组加上const #\n```C\nconst char str[5] = \"abc\";\n```\n### 一些性质 #\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_18-55-52.jpg)\n\n可以看到，声明时加了`const`之后，字符数组`str`在声明时的**初始化**之后便不可更改了，只能**访问**其元素,而**不能通过访问元素来改变数组内容**\n\n那么`scanf`还能写入内容吗？答案是**可以**!*(如下图)*\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-10-43.jpg)\n\n那它能拿来初始化别的数组吗？很遗憾，**不能**\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-05-15.jpg)\n\n### 对应的指针类型 #\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-15-32.jpg)\n\n可以看到，这里得用`const char*`来储存字符数组的地址，而使用`char*`就会报错\n\n那么用`双引号括起来的字符串`，是否也有地址，能用指针储存它的地址呢？\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-21-10.jpg)\n\n如图，可以看到,字符串`\"abc\"`是属于`const char`类型的数组，对应的指针是`const char*`,不能通过访问元素来改变内部的值，也不能用`char*`来储存地址\n\n#### 在内存中的表现 #\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/const_str.gif)\n\n可以看到哪怕是字符串`\"abc\"`,也是在内存中开辟了一段空间，并把字符**储存在内存中**了的\n\n但是，**不要**试图用`scanf`去改变字符串的值\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/const_strrrr.gif)\n\n---\n\n## 如何向字符数组里添加内容 #\n添加的方法多种多样，搞不好可能还会出错，所以把字符数组**学明白**很重要！\n\n以下使用的数组样例声明如下\n```C\nchar str[10] = { 0 };\n```\n\n### 初始化 #\n在初始化的时候就把值传进去，有哪些初始化方式**上面**已经介绍过了，这里不多赘述\n\n### 访问数组元素 #\n通过`[]`可以访问数组元素，并对没有`const`修饰的数组，修改其元素,例如:\n\n```C\nstr[0] = 'A';//将数组的第一个元素改成字符A\n```\n\n我们也可以通过循环的方式，将数组的所有元素填充为某个字符\n\n```C\nchar place_holder = 'A';\nfor(int i = 0; i < 10 ; i++)//这里使用左闭右开区间，10为数组的大小\n{\n    str[i] = place_holder;\n}\n```\n\n### 使用`scanf`函数 #\n由上面的探究已知：对于已声明的字符数组，**无论**有没有`const`修饰，都可已用`scanf`修改内容,那么`scanf`怎么用，又具体怎么工作的，我们接着往下探究\n\n#### 使用示例 #\n```C\nchar str[10] = { 0 };\nscanf(\"%s\",str);//占位符是 %s ,右边的参数是 str ,也就是数组名\n//或者 scanf(\"%s\",&str)\n```\n**注意**！这边的数组名`str`储存的是**数组首元素的地址**，而`&str`储存的是`整个数组的地址`，值是一样的，两者皆可用于传参，但**指针类型不一样**，要做好区分\n\n#### `scanf`都做了什么 #\n先来看看它分别对用`{ 0 }`**初始化**和**不初始化**的数组做了什么\n```C\nchar str1[10] = { 0 };\nscanf(\"%s\",str1);\nchar str2[10];\nscanf(\"%s\",str2);\n```\n*两个数组的输入均为abc*\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-11_19-09-50.jpg)\n\n可以看到，对`str1`,字符非常正常地填充进去了，因为整个数组原本是用`\\0`填充的,看不出什么端倪\n\n而对于`str2`,观察发现，除了输入进去的字符`a`,`b`,`c`,它还自动在结尾补了一个`\\0`,使`str2`里储存了一个完整的字符串。**但是**，剩下的部分还是用**值**`-52`填充，即未初始化的状态，所以依然**不提倡**声明的时候没有初始化\n\n然后是在字符数组内已有内容的情况下，再次使用`scanf`的情况\n```C\nchar str1[5] = \"abc\";\nchar str2[5] = \"abc\";\n\nscanf(\"%s %s\",str1,str2);\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-12_09-33-02.jpg)\n\n如图，`scanf`做的是把输入的字符串`覆盖`式存入字符数组，比原来长，就完全覆盖，比原来短，就部分覆盖，未覆盖的部分无改动\n\n#### 关于`scanf`的危险操作 #\n由于`scanf`无法预测**字符数组**能否存下输入的**字符串**，如果**字符数组**声明的长度不够，就可能出现**越界访问**,随之而来的便是奇奇怪怪的`bug`\n\n```C\nchar str[4] = { 0 };//先声明一个长度为4的数组\nscanf(\"%s\",str);//这次输入abcdef试试\n```\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-12_09-47-00.jpg)\n\n可以看到，确实**越界访问**了，所以声明字符数组的时候，建议比预计最大输入，在多些长度，防止越界访问。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"str-arr","published":1,"updated":"2024-05-14T02:21:56.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvf001mv8p5g9bt7j72","content":"<h1 id=\"什么是字符串\"><a href=\"#什么是字符串\" class=\"headerlink\" title=\"什么是字符串\"></a>什么是字符串</h1><h2 id=\"初见字符串\"><a href=\"#初见字符串\" class=\"headerlink\" title=\"初见字符串\"></a>初见字符串</h2><p>我们最先遇到的字符串,一般是<code>hello_world</code>程序中用到的<code>&quot;hello world&quot;</code>,也就是<strong>两个双引号括起来的一串字符</strong>,输出时的占位符是<code>%s</code>,可以直接拿去传值，代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,<span class=\"string\">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明字符串变量\"><a href=\"#声明字符串变量\" class=\"headerlink\" title=\"声明字符串变量\"></a>声明字符串变量</h2><p>有时我们想要先把字符串存起来，再进行操作，那么就使用<strong>字符数组</strong>，并在<strong>初始化</strong>的时候把字符串传给它,这样在<strong>创建数组</strong>时会编译器会自动分配内存给它，代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = <span class=\"string\">&quot;abcdef&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>此时我们也可以开启VS的<strong>调试</strong>，并打开<strong>内存</strong>和<strong>监视</strong>窗口观察字符串是如何在内存中储存的,如下图</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_10-06-06.jpg\"></p>\n<p>通过观察可以发现，C语⾔字符串的字符串有个<code>规定</code>(特点)，就是以字符<code>\\0</code>结尾，无论是初始化数组时，还是在分配内存时，都有<code>\\0</code>的位置。</p>\n<h3 id=\"strlen-函数\"><a href=\"#strlen-函数\" class=\"headerlink\" title=\"strlen()函数\"></a>strlen()函数</h3><p>依据以<code>\\0</code>为字符串结尾的规则，<code>strlen</code>函数就可以计算字符串的长度，它会从字符串的第一个字符向后扫描，直到遇到<code>\\0</code>结束,且<code>\\0</code>不进入计数，最后返回字符串的长度,代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span> <span class=\"comment\">//需要引对应的头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(<span class=\"string\">&quot;abcdef&quot;</span>);<span class=\"comment\">//len的值为6</span></span><br><span class=\"line\"><span class=\"type\">int</span> sz = <span class=\"keyword\">sizeof</span>(<span class=\"string\">&quot;abcdef&quot;</span>);<span class=\"comment\">//sz的大小为7(\\0被计入总数)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证字符串的结尾\"><a href=\"#验证字符串的结尾\" class=\"headerlink\" title=\"验证字符串的结尾\"></a>验证字符串的结尾</h3><h4 id=\"正向验证\"><a href=\"#正向验证\" class=\"headerlink\" title=\"正向验证\"></a>正向验证</h4><p>我们做在字符数组里插入一个<code>\\0</code>,来看看函数<code>printf</code>和<code>strlen</code>找到的结尾在哪里,如下图</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;\\0&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;f&#x27;</span>,<span class=\"string\">&#x27;\\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_11-01-35.jpg\"></p>\n<p>可以看到字符数组似乎被“截断”了，<code>printf</code>只输出了<code>\\0</code>前面的内容, <code>strlen</code>算出来的长度也只有<code>3</code>,可见插入的<code>\\0</code>被作为了<strong>字符串</strong>的结尾，字符串提前中指,而没到达<strong>字符数组</strong>的结尾</p>\n<h4 id=\"反向验证\"><a href=\"#反向验证\" class=\"headerlink\" title=\"反向验证\"></a>反向验证</h4><p>我们来<strong>反向</strong>验证一下，<code>\\0</code>是字符串结尾的标志,如下图，我们声明一个<strong>没有</strong><code>\\0</code>结尾的字符数组，看看函数<code>printf</code>和<code>strlen</code>还找不找得到我们“认为”的结尾</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;f&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_14-02-07.jpg\"></p>\n<p>可以看到函数对字符串的判断出现了严重<strong>失误</strong>，所以<strong>字符数组</strong>里没有<code>\\0</code>标记结尾是非常严重的问题，不光是找不到字符串的结尾，而且会<strong>越界访问</strong>！危险操作，写代码的时候一定要注意</p>\n<hr>\n<h2 id=\"从字符串到字符数组\"><a href=\"#从字符串到字符数组\" class=\"headerlink\" title=\"从字符串到字符数组\"></a>从字符串到字符数组</h2><p>虽然上面已经用到了字符数组，但主要还是为了方便讨论<strong>字符串</strong>,接下来着重研究字符数组。</p>\n<h3 id=\"先整清楚几个概念\"><a href=\"#先整清楚几个概念\" class=\"headerlink\" title=\"先整清楚几个概念\"></a>先整清楚几个概念</h3><p><code>什么是数组</code>：数组是⼀组相同类型元素的集合,会在内存中开辟一段连续的空间，将元素储存在那段内存中</p>\n<p><code>什么是数组元素</code>：存放在数组的值被称为数组的元素，数组在创建的时候可以指定数组的⼤⼩和数组的元素类型。</p>\n<p>所以<code>字符数组</code>是一组<code>字符</code>的集合，字符数组里的<code>元素</code>都是<code>字符</code>!,访问到的字符数组里的<strong>元素</strong>都是<strong>字符</strong>，像<code>&#39;a&#39;</code>,<code>&#39;b&#39;</code>,<code>&#39;c&#39;</code>这种的单个的字符,别和<code>字符串</code>混为一谈！</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> sz = <span class=\"keyword\">sizeof</span>(str);<span class=\"comment\">//这里str代表了整个数组,所以包括\\0</span></span><br><span class=\"line\">,sz的值为<span class=\"number\">4</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符数组的声明\"><a href=\"#字符数组的声明\" class=\"headerlink\" title=\"字符数组的声明\"></a>字符数组的声明</h3><p>字符数组的声明和其他类型的数组差不多，有<strong>初始化</strong>，<strong>不完全初始化</strong>，<strong>声明长度</strong>，<strong>不声明长度</strong></p>\n<p><em>正确的声明代码如下</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[] = <span class=\"string\">&quot;abc&quot;</span>;<span class=\"comment\">//初始化,不声明长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str2[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;\\0&#x27;</span>&#125;;<span class=\"comment\">//这也是初始化，且不声明长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str3[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;<span class=\"comment\">//初始化，用值0(等价于`\\0`)填充</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str4[<span class=\"number\">10</span>] = <span class=\"string\">&quot;abc&quot;</span>;<span class=\"comment\">//不完全初始化，存入字符串&quot;abc&quot;,后面都用&#x27;\\0&#x27;填充</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str5[<span class=\"number\">10</span>] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>&#125;;<span class=\"comment\">//不完全初始化,从下标为0开始，依次往后填充字符 a,b,c,\\0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em>错误的声明代码</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[<span class=\"number\">3</span>] = <span class=\"string\">&quot;abc&quot;</span>;<span class=\"comment\">//数组声明短了，放不下结尾的\\0,编译过不了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str2[<span class=\"number\">3</span>] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>&#125;;<span class=\"comment\">//同上,放不下</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str3[] = &#123; <span class=\"number\">0</span> &#125;;<span class=\"comment\">//能声明，但是字符数组长度为1，这个数组大概率是用不了的/会被拿去错误使用的</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"来看看这些声明方式在内存中的表现\"><a href=\"#来看看这些声明方式在内存中的表现\" class=\"headerlink\" title=\"来看看这些声明方式在内存中的表现\"></a>来看看这些声明方式在内存中的表现</h3><h4 id=\"不初始化的声明-极度不推荐\"><a href=\"#不初始化的声明-极度不推荐\" class=\"headerlink\" title=\"不初始化的声明(极度不推荐)\"></a>不初始化的声明(极度不推荐)</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[];<span class=\"comment\">//这个不加长度，直接编译失败（如下图）</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_11-39-10.jpg\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[<span class=\"number\">10</span>];<span class=\"comment\">//语法没有问题，来看看此时数组里存了什么</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_11-46-49.jpg\"><br>可以看到全都存了<code>-52</code>,对应的中文字符是<code>烫</code>，这样<strong>不好</strong>，请在声明字符数组的时候<strong>初始化数组</strong></p>\n<h4 id=\"不声明长度的数组声明\"><a href=\"#不声明长度的数组声明\" class=\"headerlink\" title=\"不声明长度的数组声明\"></a>不声明长度的数组声明</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[] = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str2[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;\\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_14-59-34.jpg\"></p>\n<p>如上图，不声明长度时，编译器自动给字符数组分配内存，既不给多，也不给少，初始化给的<code>字符串</code>或者<code>&#123;...&#125;</code>多长，创建的数组就多长。</p>\n<p><strong>注意红框</strong>，再强调一遍，字符串以<code>\\0</code>结尾,看到双引号括起来的字符串，要记得最后隐藏了一个<code>\\0</code>,用字符数组储存的时候一定要留足空间</p>\n<h4 id=\"声明长度的数组声明\"><a href=\"#声明长度的数组声明\" class=\"headerlink\" title=\"声明长度的数组声明\"></a>声明长度的数组声明</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str3[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str4[<span class=\"number\">10</span>] = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str5[<span class=\"number\">10</span>] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_15-25-54.jpg\"></p>\n<p>可以看到，在声明的长度<strong>足够长</strong>时，你初始化的时候给它多少字符，它就从<code>下标0</code>处开始<strong>按顺序</strong>存进去多少,剩下的部分<strong>自动</strong>用<code>&#39;\\0&#39;</code>填充,</p>\n<p>所以实际上上面代码中的<code>str5</code>因为长度<code>10</code>&gt;初始化给的<code>4</code>个字符，后面六个元素用<code>\\0</code>填充了，所以<code>str5</code>里存了有<strong>结尾</strong>的完整字符串</p>\n<h4 id=\"错误声明\"><a href=\"#错误声明\" class=\"headerlink\" title=\"错误声明\"></a>错误声明</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[<span class=\"number\">3</span>] = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> str2[<span class=\"number\">3</span>] = &#123; <span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_07-44-57.jpg\"></p>\n<p>可以看到上面两种错误的声明方式，甚至直接<strong>编译失败</strong>,所以声明字符数组的时候一定要<strong>留足空间</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str3[] = &#123; <span class=\"number\">0</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_07-51-55.jpg\"></p>\n<p>如上图，可以看到这样写还是编译成功了，但是在监视查看<strong>数组长度</strong>的时候，发现长度为<code>1</code>,里面存了一个<code>\\0</code>,这么<strong>短</strong>的数组能用吗？只能<strong>用一点点</strong>，甚至还不如直接声明一个<code>char</code>类型的字符变量</p>\n<h2 id=\"当字符数组加上const\"><a href=\"#当字符数组加上const\" class=\"headerlink\" title=\"当字符数组加上const\"></a>当字符数组加上const</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> str[<span class=\"number\">5</span>] = <span class=\"string\">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些性质\"><a href=\"#一些性质\" class=\"headerlink\" title=\"一些性质\"></a>一些性质</h3><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_18-55-52.jpg\"></p>\n<p>可以看到，声明时加了<code>const</code>之后，字符数组<code>str</code>在声明时的<strong>初始化</strong>之后便不可更改了，只能<strong>访问</strong>其元素,而<strong>不能通过访问元素来改变数组内容</strong></p>\n<p>那么<code>scanf</code>还能写入内容吗？答案是<strong>可以</strong>!<em>(如下图)</em></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-10-43.jpg\"></p>\n<p>那它能拿来初始化别的数组吗？很遗憾，<strong>不能</strong><br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-05-15.jpg\"></p>\n<h3 id=\"对应的指针类型\"><a href=\"#对应的指针类型\" class=\"headerlink\" title=\"对应的指针类型\"></a>对应的指针类型</h3><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-15-32.jpg\"></p>\n<p>可以看到，这里得用<code>const char*</code>来储存字符数组的地址，而使用<code>char*</code>就会报错</p>\n<p>那么用<code>双引号括起来的字符串</code>，是否也有地址，能用指针储存它的地址呢？</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-21-10.jpg\"></p>\n<p>如图，可以看到,字符串<code>&quot;abc&quot;</code>是属于<code>const char</code>类型的数组，对应的指针是<code>const char*</code>,不能通过访问元素来改变内部的值，也不能用<code>char*</code>来储存地址</p>\n<h4 id=\"在内存中的表现\"><a href=\"#在内存中的表现\" class=\"headerlink\" title=\"在内存中的表现\"></a>在内存中的表现</h4><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/const_str.gif\"></p>\n<p>可以看到哪怕是字符串<code>&quot;abc&quot;</code>,也是在内存中开辟了一段空间，并把字符<strong>储存在内存中</strong>了的</p>\n<p>但是，<strong>不要</strong>试图用<code>scanf</code>去改变字符串的值<br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/const_strrrr.gif\"></p>\n<hr>\n<h2 id=\"如何向字符数组里添加内容\"><a href=\"#如何向字符数组里添加内容\" class=\"headerlink\" title=\"如何向字符数组里添加内容\"></a>如何向字符数组里添加内容</h2><p>添加的方法多种多样，搞不好可能还会出错，所以把字符数组<strong>学明白</strong>很重要！</p>\n<p>以下使用的数组样例声明如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>在初始化的时候就把值传进去，有哪些初始化方式<strong>上面</strong>已经介绍过了，这里不多赘述</p>\n<h3 id=\"访问数组元素\"><a href=\"#访问数组元素\" class=\"headerlink\" title=\"访问数组元素\"></a>访问数组元素</h3><p>通过<code>[]</code>可以访问数组元素，并对没有<code>const</code>修饰的数组，修改其元素,例如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//将数组的第一个元素改成字符A</span></span><br></pre></td></tr></table></figure>\n\n<p>我们也可以通过循环的方式，将数组的所有元素填充为某个字符</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> place_holder = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span> ; i++)<span class=\"comment\">//这里使用左闭右开区间，10为数组的大小</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    str[i] = place_holder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用scanf函数\"><a href=\"#使用scanf函数\" class=\"headerlink\" title=\"使用scanf函数\"></a>使用<code>scanf</code>函数</h3><p>由上面的探究已知：对于已声明的字符数组，<strong>无论</strong>有没有<code>const</code>修饰，都可已用<code>scanf</code>修改内容,那么<code>scanf</code>怎么用，又具体怎么工作的，我们接着往下探究</p>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);<span class=\"comment\">//占位符是 %s ,右边的参数是 str ,也就是数组名</span></span><br><span class=\"line\"><span class=\"comment\">//或者 scanf(&quot;%s&quot;,&amp;str)</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>！这边的数组名<code>str</code>储存的是<strong>数组首元素的地址</strong>，而<code>&amp;str</code>储存的是<code>整个数组的地址</code>，值是一样的，两者皆可用于传参，但<strong>指针类型不一样</strong>，要做好区分</p>\n<h4 id=\"scanf都做了什么\"><a href=\"#scanf都做了什么\" class=\"headerlink\" title=\"scanf都做了什么\"></a><code>scanf</code>都做了什么</h4><p>先来看看它分别对用<code>&#123; 0 &#125;</code><strong>初始化</strong>和<strong>不初始化</strong>的数组做了什么</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str1);</span><br><span class=\"line\"><span class=\"type\">char</span> str2[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str2);</span><br></pre></td></tr></table></figure>\n<p><em>两个数组的输入均为abc</em><br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-11_19-09-50.jpg\"></p>\n<p>可以看到，对<code>str1</code>,字符非常正常地填充进去了，因为整个数组原本是用<code>\\0</code>填充的,看不出什么端倪</p>\n<p>而对于<code>str2</code>,观察发现，除了输入进去的字符<code>a</code>,<code>b</code>,<code>c</code>,它还自动在结尾补了一个<code>\\0</code>,使<code>str2</code>里储存了一个完整的字符串。<strong>但是</strong>，剩下的部分还是用<strong>值</strong><code>-52</code>填充，即未初始化的状态，所以依然<strong>不提倡</strong>声明的时候没有初始化</p>\n<p>然后是在字符数组内已有内容的情况下，再次使用<code>scanf</code>的情况</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[<span class=\"number\">5</span>] = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> str2[<span class=\"number\">5</span>] = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %s&quot;</span>,str1,str2);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-12_09-33-02.jpg\"></p>\n<p>如图，<code>scanf</code>做的是把输入的字符串<code>覆盖</code>式存入字符数组，比原来长，就完全覆盖，比原来短，就部分覆盖，未覆盖的部分无改动</p>\n<h4 id=\"关于scanf的危险操作\"><a href=\"#关于scanf的危险操作\" class=\"headerlink\" title=\"关于scanf的危险操作\"></a>关于<code>scanf</code>的危险操作</h4><p>由于<code>scanf</code>无法预测<strong>字符数组</strong>能否存下输入的<strong>字符串</strong>，如果<strong>字符数组</strong>声明的长度不够，就可能出现<strong>越界访问</strong>,随之而来的便是奇奇怪怪的<code>bug</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[<span class=\"number\">4</span>] = &#123; <span class=\"number\">0</span> &#125;;<span class=\"comment\">//先声明一个长度为4的数组</span></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);<span class=\"comment\">//这次输入abcdef试试</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-12_09-47-00.jpg\"></p>\n<p>可以看到，确实<strong>越界访问</strong>了，所以声明字符数组的时候，建议比预计最大输入，在多些长度，防止越界访问。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"什么是字符串\"><a href=\"#什么是字符串\" class=\"headerlink\" title=\"什么是字符串\"></a>什么是字符串</h1><h2 id=\"初见字符串\"><a href=\"#初见字符串\" class=\"headerlink\" title=\"初见字符串\"></a>初见字符串</h2><p>我们最先遇到的字符串,一般是<code>hello_world</code>程序中用到的<code>&quot;hello world&quot;</code>,也就是<strong>两个双引号括起来的一串字符</strong>,输出时的占位符是<code>%s</code>,可以直接拿去传值，代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,<span class=\"string\">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明字符串变量\"><a href=\"#声明字符串变量\" class=\"headerlink\" title=\"声明字符串变量\"></a>声明字符串变量</h2><p>有时我们想要先把字符串存起来，再进行操作，那么就使用<strong>字符数组</strong>，并在<strong>初始化</strong>的时候把字符串传给它,这样在<strong>创建数组</strong>时会编译器会自动分配内存给它，代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = <span class=\"string\">&quot;abcdef&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>此时我们也可以开启VS的<strong>调试</strong>，并打开<strong>内存</strong>和<strong>监视</strong>窗口观察字符串是如何在内存中储存的,如下图</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_10-06-06.jpg\"></p>\n<p>通过观察可以发现，C语⾔字符串的字符串有个<code>规定</code>(特点)，就是以字符<code>\\0</code>结尾，无论是初始化数组时，还是在分配内存时，都有<code>\\0</code>的位置。</p>\n<h3 id=\"strlen-函数\"><a href=\"#strlen-函数\" class=\"headerlink\" title=\"strlen()函数\"></a>strlen()函数</h3><p>依据以<code>\\0</code>为字符串结尾的规则，<code>strlen</code>函数就可以计算字符串的长度，它会从字符串的第一个字符向后扫描，直到遇到<code>\\0</code>结束,且<code>\\0</code>不进入计数，最后返回字符串的长度,代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span> <span class=\"comment\">//需要引对应的头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(<span class=\"string\">&quot;abcdef&quot;</span>);<span class=\"comment\">//len的值为6</span></span><br><span class=\"line\"><span class=\"type\">int</span> sz = <span class=\"keyword\">sizeof</span>(<span class=\"string\">&quot;abcdef&quot;</span>);<span class=\"comment\">//sz的大小为7(\\0被计入总数)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证字符串的结尾\"><a href=\"#验证字符串的结尾\" class=\"headerlink\" title=\"验证字符串的结尾\"></a>验证字符串的结尾</h3><h4 id=\"正向验证\"><a href=\"#正向验证\" class=\"headerlink\" title=\"正向验证\"></a>正向验证</h4><p>我们做在字符数组里插入一个<code>\\0</code>,来看看函数<code>printf</code>和<code>strlen</code>找到的结尾在哪里,如下图</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;\\0&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;f&#x27;</span>,<span class=\"string\">&#x27;\\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_11-01-35.jpg\"></p>\n<p>可以看到字符数组似乎被“截断”了，<code>printf</code>只输出了<code>\\0</code>前面的内容, <code>strlen</code>算出来的长度也只有<code>3</code>,可见插入的<code>\\0</code>被作为了<strong>字符串</strong>的结尾，字符串提前中指,而没到达<strong>字符数组</strong>的结尾</p>\n<h4 id=\"反向验证\"><a href=\"#反向验证\" class=\"headerlink\" title=\"反向验证\"></a>反向验证</h4><p>我们来<strong>反向</strong>验证一下，<code>\\0</code>是字符串结尾的标志,如下图，我们声明一个<strong>没有</strong><code>\\0</code>结尾的字符数组，看看函数<code>printf</code>和<code>strlen</code>还找不找得到我们“认为”的结尾</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;f&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_14-02-07.jpg\"></p>\n<p>可以看到函数对字符串的判断出现了严重<strong>失误</strong>，所以<strong>字符数组</strong>里没有<code>\\0</code>标记结尾是非常严重的问题，不光是找不到字符串的结尾，而且会<strong>越界访问</strong>！危险操作，写代码的时候一定要注意</p>\n<hr>\n<h2 id=\"从字符串到字符数组\"><a href=\"#从字符串到字符数组\" class=\"headerlink\" title=\"从字符串到字符数组\"></a>从字符串到字符数组</h2><p>虽然上面已经用到了字符数组，但主要还是为了方便讨论<strong>字符串</strong>,接下来着重研究字符数组。</p>\n<h3 id=\"先整清楚几个概念\"><a href=\"#先整清楚几个概念\" class=\"headerlink\" title=\"先整清楚几个概念\"></a>先整清楚几个概念</h3><p><code>什么是数组</code>：数组是⼀组相同类型元素的集合,会在内存中开辟一段连续的空间，将元素储存在那段内存中</p>\n<p><code>什么是数组元素</code>：存放在数组的值被称为数组的元素，数组在创建的时候可以指定数组的⼤⼩和数组的元素类型。</p>\n<p>所以<code>字符数组</code>是一组<code>字符</code>的集合，字符数组里的<code>元素</code>都是<code>字符</code>!,访问到的字符数组里的<strong>元素</strong>都是<strong>字符</strong>，像<code>&#39;a&#39;</code>,<code>&#39;b&#39;</code>,<code>&#39;c&#39;</code>这种的单个的字符,别和<code>字符串</code>混为一谈！</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> sz = <span class=\"keyword\">sizeof</span>(str);<span class=\"comment\">//这里str代表了整个数组,所以包括\\0</span></span><br><span class=\"line\">,sz的值为<span class=\"number\">4</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符数组的声明\"><a href=\"#字符数组的声明\" class=\"headerlink\" title=\"字符数组的声明\"></a>字符数组的声明</h3><p>字符数组的声明和其他类型的数组差不多，有<strong>初始化</strong>，<strong>不完全初始化</strong>，<strong>声明长度</strong>，<strong>不声明长度</strong></p>\n<p><em>正确的声明代码如下</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[] = <span class=\"string\">&quot;abc&quot;</span>;<span class=\"comment\">//初始化,不声明长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str2[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;\\0&#x27;</span>&#125;;<span class=\"comment\">//这也是初始化，且不声明长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str3[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;<span class=\"comment\">//初始化，用值0(等价于`\\0`)填充</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str4[<span class=\"number\">10</span>] = <span class=\"string\">&quot;abc&quot;</span>;<span class=\"comment\">//不完全初始化，存入字符串&quot;abc&quot;,后面都用&#x27;\\0&#x27;填充</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str5[<span class=\"number\">10</span>] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>&#125;;<span class=\"comment\">//不完全初始化,从下标为0开始，依次往后填充字符 a,b,c,\\0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em>错误的声明代码</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[<span class=\"number\">3</span>] = <span class=\"string\">&quot;abc&quot;</span>;<span class=\"comment\">//数组声明短了，放不下结尾的\\0,编译过不了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str2[<span class=\"number\">3</span>] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>&#125;;<span class=\"comment\">//同上,放不下</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str3[] = &#123; <span class=\"number\">0</span> &#125;;<span class=\"comment\">//能声明，但是字符数组长度为1，这个数组大概率是用不了的/会被拿去错误使用的</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"来看看这些声明方式在内存中的表现\"><a href=\"#来看看这些声明方式在内存中的表现\" class=\"headerlink\" title=\"来看看这些声明方式在内存中的表现\"></a>来看看这些声明方式在内存中的表现</h3><h4 id=\"不初始化的声明-极度不推荐\"><a href=\"#不初始化的声明-极度不推荐\" class=\"headerlink\" title=\"不初始化的声明(极度不推荐)\"></a>不初始化的声明(极度不推荐)</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[];<span class=\"comment\">//这个不加长度，直接编译失败（如下图）</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_11-39-10.jpg\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[<span class=\"number\">10</span>];<span class=\"comment\">//语法没有问题，来看看此时数组里存了什么</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_11-46-49.jpg\"><br>可以看到全都存了<code>-52</code>,对应的中文字符是<code>烫</code>，这样<strong>不好</strong>，请在声明字符数组的时候<strong>初始化数组</strong></p>\n<h4 id=\"不声明长度的数组声明\"><a href=\"#不声明长度的数组声明\" class=\"headerlink\" title=\"不声明长度的数组声明\"></a>不声明长度的数组声明</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[] = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str2[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;\\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_14-59-34.jpg\"></p>\n<p>如上图，不声明长度时，编译器自动给字符数组分配内存，既不给多，也不给少，初始化给的<code>字符串</code>或者<code>&#123;...&#125;</code>多长，创建的数组就多长。</p>\n<p><strong>注意红框</strong>，再强调一遍，字符串以<code>\\0</code>结尾,看到双引号括起来的字符串，要记得最后隐藏了一个<code>\\0</code>,用字符数组储存的时候一定要留足空间</p>\n<h4 id=\"声明长度的数组声明\"><a href=\"#声明长度的数组声明\" class=\"headerlink\" title=\"声明长度的数组声明\"></a>声明长度的数组声明</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str3[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str4[<span class=\"number\">10</span>] = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str5[<span class=\"number\">10</span>] = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-09_15-25-54.jpg\"></p>\n<p>可以看到，在声明的长度<strong>足够长</strong>时，你初始化的时候给它多少字符，它就从<code>下标0</code>处开始<strong>按顺序</strong>存进去多少,剩下的部分<strong>自动</strong>用<code>&#39;\\0&#39;</code>填充,</p>\n<p>所以实际上上面代码中的<code>str5</code>因为长度<code>10</code>&gt;初始化给的<code>4</code>个字符，后面六个元素用<code>\\0</code>填充了，所以<code>str5</code>里存了有<strong>结尾</strong>的完整字符串</p>\n<h4 id=\"错误声明\"><a href=\"#错误声明\" class=\"headerlink\" title=\"错误声明\"></a>错误声明</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[<span class=\"number\">3</span>] = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> str2[<span class=\"number\">3</span>] = &#123; <span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_07-44-57.jpg\"></p>\n<p>可以看到上面两种错误的声明方式，甚至直接<strong>编译失败</strong>,所以声明字符数组的时候一定要<strong>留足空间</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str3[] = &#123; <span class=\"number\">0</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_07-51-55.jpg\"></p>\n<p>如上图，可以看到这样写还是编译成功了，但是在监视查看<strong>数组长度</strong>的时候，发现长度为<code>1</code>,里面存了一个<code>\\0</code>,这么<strong>短</strong>的数组能用吗？只能<strong>用一点点</strong>，甚至还不如直接声明一个<code>char</code>类型的字符变量</p>\n<h2 id=\"当字符数组加上const\"><a href=\"#当字符数组加上const\" class=\"headerlink\" title=\"当字符数组加上const\"></a>当字符数组加上const</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> str[<span class=\"number\">5</span>] = <span class=\"string\">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些性质\"><a href=\"#一些性质\" class=\"headerlink\" title=\"一些性质\"></a>一些性质</h3><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_18-55-52.jpg\"></p>\n<p>可以看到，声明时加了<code>const</code>之后，字符数组<code>str</code>在声明时的<strong>初始化</strong>之后便不可更改了，只能<strong>访问</strong>其元素,而<strong>不能通过访问元素来改变数组内容</strong></p>\n<p>那么<code>scanf</code>还能写入内容吗？答案是<strong>可以</strong>!<em>(如下图)</em></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-10-43.jpg\"></p>\n<p>那它能拿来初始化别的数组吗？很遗憾，<strong>不能</strong><br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-05-15.jpg\"></p>\n<h3 id=\"对应的指针类型\"><a href=\"#对应的指针类型\" class=\"headerlink\" title=\"对应的指针类型\"></a>对应的指针类型</h3><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-15-32.jpg\"></p>\n<p>可以看到，这里得用<code>const char*</code>来储存字符数组的地址，而使用<code>char*</code>就会报错</p>\n<p>那么用<code>双引号括起来的字符串</code>，是否也有地址，能用指针储存它的地址呢？</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-10_19-21-10.jpg\"></p>\n<p>如图，可以看到,字符串<code>&quot;abc&quot;</code>是属于<code>const char</code>类型的数组，对应的指针是<code>const char*</code>,不能通过访问元素来改变内部的值，也不能用<code>char*</code>来储存地址</p>\n<h4 id=\"在内存中的表现\"><a href=\"#在内存中的表现\" class=\"headerlink\" title=\"在内存中的表现\"></a>在内存中的表现</h4><p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/const_str.gif\"></p>\n<p>可以看到哪怕是字符串<code>&quot;abc&quot;</code>,也是在内存中开辟了一段空间，并把字符<strong>储存在内存中</strong>了的</p>\n<p>但是，<strong>不要</strong>试图用<code>scanf</code>去改变字符串的值<br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/const_strrrr.gif\"></p>\n<hr>\n<h2 id=\"如何向字符数组里添加内容\"><a href=\"#如何向字符数组里添加内容\" class=\"headerlink\" title=\"如何向字符数组里添加内容\"></a>如何向字符数组里添加内容</h2><p>添加的方法多种多样，搞不好可能还会出错，所以把字符数组<strong>学明白</strong>很重要！</p>\n<p>以下使用的数组样例声明如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>在初始化的时候就把值传进去，有哪些初始化方式<strong>上面</strong>已经介绍过了，这里不多赘述</p>\n<h3 id=\"访问数组元素\"><a href=\"#访问数组元素\" class=\"headerlink\" title=\"访问数组元素\"></a>访问数组元素</h3><p>通过<code>[]</code>可以访问数组元素，并对没有<code>const</code>修饰的数组，修改其元素,例如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//将数组的第一个元素改成字符A</span></span><br></pre></td></tr></table></figure>\n\n<p>我们也可以通过循环的方式，将数组的所有元素填充为某个字符</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> place_holder = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span> ; i++)<span class=\"comment\">//这里使用左闭右开区间，10为数组的大小</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    str[i] = place_holder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用scanf函数\"><a href=\"#使用scanf函数\" class=\"headerlink\" title=\"使用scanf函数\"></a>使用<code>scanf</code>函数</h3><p>由上面的探究已知：对于已声明的字符数组，<strong>无论</strong>有没有<code>const</code>修饰，都可已用<code>scanf</code>修改内容,那么<code>scanf</code>怎么用，又具体怎么工作的，我们接着往下探究</p>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);<span class=\"comment\">//占位符是 %s ,右边的参数是 str ,也就是数组名</span></span><br><span class=\"line\"><span class=\"comment\">//或者 scanf(&quot;%s&quot;,&amp;str)</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>！这边的数组名<code>str</code>储存的是<strong>数组首元素的地址</strong>，而<code>&amp;str</code>储存的是<code>整个数组的地址</code>，值是一样的，两者皆可用于传参，但<strong>指针类型不一样</strong>，要做好区分</p>\n<h4 id=\"scanf都做了什么\"><a href=\"#scanf都做了什么\" class=\"headerlink\" title=\"scanf都做了什么\"></a><code>scanf</code>都做了什么</h4><p>先来看看它分别对用<code>&#123; 0 &#125;</code><strong>初始化</strong>和<strong>不初始化</strong>的数组做了什么</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str1);</span><br><span class=\"line\"><span class=\"type\">char</span> str2[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str2);</span><br></pre></td></tr></table></figure>\n<p><em>两个数组的输入均为abc</em><br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-11_19-09-50.jpg\"></p>\n<p>可以看到，对<code>str1</code>,字符非常正常地填充进去了，因为整个数组原本是用<code>\\0</code>填充的,看不出什么端倪</p>\n<p>而对于<code>str2</code>,观察发现，除了输入进去的字符<code>a</code>,<code>b</code>,<code>c</code>,它还自动在结尾补了一个<code>\\0</code>,使<code>str2</code>里储存了一个完整的字符串。<strong>但是</strong>，剩下的部分还是用<strong>值</strong><code>-52</code>填充，即未初始化的状态，所以依然<strong>不提倡</strong>声明的时候没有初始化</p>\n<p>然后是在字符数组内已有内容的情况下，再次使用<code>scanf</code>的情况</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[<span class=\"number\">5</span>] = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> str2[<span class=\"number\">5</span>] = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %s&quot;</span>,str1,str2);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-12_09-33-02.jpg\"></p>\n<p>如图，<code>scanf</code>做的是把输入的字符串<code>覆盖</code>式存入字符数组，比原来长，就完全覆盖，比原来短，就部分覆盖，未覆盖的部分无改动</p>\n<h4 id=\"关于scanf的危险操作\"><a href=\"#关于scanf的危险操作\" class=\"headerlink\" title=\"关于scanf的危险操作\"></a>关于<code>scanf</code>的危险操作</h4><p>由于<code>scanf</code>无法预测<strong>字符数组</strong>能否存下输入的<strong>字符串</strong>，如果<strong>字符数组</strong>声明的长度不够，就可能出现<strong>越界访问</strong>,随之而来的便是奇奇怪怪的<code>bug</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[<span class=\"number\">4</span>] = &#123; <span class=\"number\">0</span> &#125;;<span class=\"comment\">//先声明一个长度为4的数组</span></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);<span class=\"comment\">//这次输入abcdef试试</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-12_09-47-00.jpg\"></p>\n<p>可以看到，确实<strong>越界访问</strong>了，所以声明字符数组的时候，建议比预计最大输入，在多些长度，防止越界访问。</p>\n"},{"title":"进程间通信","date":"2024-08-02T13:46:55.000Z","_content":"\n本篇博客更偏向于总括和导航,部分概念更细致的介绍将内嵌链接在文章中\n\n**重点内容**\n+ 初识进程间通信\n+ 管道\n+ 消息队列\n+ 共享内存\n+ 信号量\n\n# 进程间通信的目的\n+ 数据传输： 一个进程需要将它的数据**发送**给另一个进程\n+ 资源共享： 多个进程之间**共享**同样的资源\n+ 通知事件：一个进程需要向另一个或一组进程**发送消息**，**通知**它（它们）发生了某种事件（如子进程终止时要通知父进程）\n+ 进程控制： 有些进程希望**完全控制**另一个进程的执行（如Debug进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变\n\n# 进程间通信的主要方式\n+ 管道\n+ System V进程间通信\n+ POSIX进程间通信\n\n# 进程间通信的分类\n\n## 管道\n+ 匿名管道\n+ 命名管道\n\n## System V IPC\n+ System V 消息队列\n+ SysTem V 共享内存\n+ System V 信号量\n\n## POSIX IPC\n+ 消息队列\n+ 共享内存\n+ 信号量\n+ 互斥量\n+ 条件变量\n+ 读写锁\n\n# 管道","source":"_posts/progressMSG.md","raw":"---\ntitle: 进程间通信\ndate: 2024-08-02 21:46:55\ntags:\n---\n\n本篇博客更偏向于总括和导航,部分概念更细致的介绍将内嵌链接在文章中\n\n**重点内容**\n+ 初识进程间通信\n+ 管道\n+ 消息队列\n+ 共享内存\n+ 信号量\n\n# 进程间通信的目的\n+ 数据传输： 一个进程需要将它的数据**发送**给另一个进程\n+ 资源共享： 多个进程之间**共享**同样的资源\n+ 通知事件：一个进程需要向另一个或一组进程**发送消息**，**通知**它（它们）发生了某种事件（如子进程终止时要通知父进程）\n+ 进程控制： 有些进程希望**完全控制**另一个进程的执行（如Debug进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变\n\n# 进程间通信的主要方式\n+ 管道\n+ System V进程间通信\n+ POSIX进程间通信\n\n# 进程间通信的分类\n\n## 管道\n+ 匿名管道\n+ 命名管道\n\n## System V IPC\n+ System V 消息队列\n+ SysTem V 共享内存\n+ System V 信号量\n\n## POSIX IPC\n+ 消息队列\n+ 共享内存\n+ 信号量\n+ 互斥量\n+ 条件变量\n+ 读写锁\n\n# 管道","slug":"progressMSG","published":1,"updated":"2024-08-03T05:29:15.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvg001ov8p5dlwafxzi","content":"<p>本篇博客更偏向于总括和导航,部分概念更细致的介绍将内嵌链接在文章中</p>\n<p><strong>重点内容</strong></p>\n<ul>\n<li>初识进程间通信</li>\n<li>管道</li>\n<li>消息队列</li>\n<li>共享内存</li>\n<li>信号量</li>\n</ul>\n<h1 id=\"进程间通信的目的\"><a href=\"#进程间通信的目的\" class=\"headerlink\" title=\"进程间通信的目的\"></a>进程间通信的目的</h1><ul>\n<li>数据传输： 一个进程需要将它的数据<strong>发送</strong>给另一个进程</li>\n<li>资源共享： 多个进程之间<strong>共享</strong>同样的资源</li>\n<li>通知事件：一个进程需要向另一个或一组进程<strong>发送消息</strong>，<strong>通知</strong>它（它们）发生了某种事件（如子进程终止时要通知父进程）</li>\n<li>进程控制： 有些进程希望<strong>完全控制</strong>另一个进程的执行（如Debug进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变</li>\n</ul>\n<h1 id=\"进程间通信的主要方式\"><a href=\"#进程间通信的主要方式\" class=\"headerlink\" title=\"进程间通信的主要方式\"></a>进程间通信的主要方式</h1><ul>\n<li>管道</li>\n<li>System V进程间通信</li>\n<li>POSIX进程间通信</li>\n</ul>\n<h1 id=\"进程间通信的分类\"><a href=\"#进程间通信的分类\" class=\"headerlink\" title=\"进程间通信的分类\"></a>进程间通信的分类</h1><h2 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h2><ul>\n<li>匿名管道</li>\n<li>命名管道</li>\n</ul>\n<h2 id=\"System-V-IPC\"><a href=\"#System-V-IPC\" class=\"headerlink\" title=\"System V IPC\"></a>System V IPC</h2><ul>\n<li>System V 消息队列</li>\n<li>SysTem V 共享内存</li>\n<li>System V 信号量</li>\n</ul>\n<h2 id=\"POSIX-IPC\"><a href=\"#POSIX-IPC\" class=\"headerlink\" title=\"POSIX IPC\"></a>POSIX IPC</h2><ul>\n<li>消息队列</li>\n<li>共享内存</li>\n<li>信号量</li>\n<li>互斥量</li>\n<li>条件变量</li>\n<li>读写锁</li>\n</ul>\n<h1 id=\"管道-1\"><a href=\"#管道-1\" class=\"headerlink\" title=\"管道\"></a>管道</h1>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":"<p>本篇博客更偏向于总括和导航,部分概念更细致的介绍将内嵌链接在文章中</p>\n<p><strong>重点内容</strong></p>\n<ul>\n<li>初识进程间通信</li>\n<li>管道</li>\n<li>消息队列</li>\n<li>共享内存</li>\n<li>信号量</li>\n</ul>\n<h1 id=\"进程间通信的目的\"><a href=\"#进程间通信的目的\" class=\"headerlink\" title=\"进程间通信的目的\"></a>进程间通信的目的</h1><ul>\n<li>数据传输： 一个进程需要将它的数据<strong>发送</strong>给另一个进程</li>\n<li>资源共享： 多个进程之间<strong>共享</strong>同样的资源</li>\n<li>通知事件：一个进程需要向另一个或一组进程<strong>发送消息</strong>，<strong>通知</strong>它（它们）发生了某种事件（如子进程终止时要通知父进程）</li>\n<li>进程控制： 有些进程希望<strong>完全控制</strong>另一个进程的执行（如Debug进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变</li>\n</ul>\n<h1 id=\"进程间通信的主要方式\"><a href=\"#进程间通信的主要方式\" class=\"headerlink\" title=\"进程间通信的主要方式\"></a>进程间通信的主要方式</h1><ul>\n<li>管道</li>\n<li>System V进程间通信</li>\n<li>POSIX进程间通信</li>\n</ul>\n<h1 id=\"进程间通信的分类\"><a href=\"#进程间通信的分类\" class=\"headerlink\" title=\"进程间通信的分类\"></a>进程间通信的分类</h1><h2 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h2><ul>\n<li>匿名管道</li>\n<li>命名管道</li>\n</ul>\n<h2 id=\"System-V-IPC\"><a href=\"#System-V-IPC\" class=\"headerlink\" title=\"System V IPC\"></a>System V IPC</h2><ul>\n<li>System V 消息队列</li>\n<li>SysTem V 共享内存</li>\n<li>System V 信号量</li>\n</ul>\n<h2 id=\"POSIX-IPC\"><a href=\"#POSIX-IPC\" class=\"headerlink\" title=\"POSIX IPC\"></a>POSIX IPC</h2><ul>\n<li>消息队列</li>\n<li>共享内存</li>\n<li>信号量</li>\n<li>互斥量</li>\n<li>条件变量</li>\n<li>读写锁</li>\n</ul>\n<h1 id=\"管道-1\"><a href=\"#管道-1\" class=\"headerlink\" title=\"管道\"></a>管道</h1>"},{"title":"C/C++ static关键字的使用","date":"2024-06-30T10:21:50.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/static.png","_content":"\n因为`static`的用法又多又杂，值得单出一篇博客用以汇总\n\n# C/C++ 通用用法\n\n## 局部变量->全局属性\n当对原本声明在函数栈帧里的`变量`使用`static`修饰时,该`变量`的存储空间会改变到`静态区`，不会随着函数栈帧的销毁而销毁。\n\n初始化：初次调用声明语句时会执行声明操作，而之后再执行到该语句处时会自动跳过。\n\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_10-51-24.png)\n\n作用范围：与不加`static`时的作用范围相同，还是局部可用\n\n销毁：和全局变量一样在`main`函数的栈帧销毁时一并销毁\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_11-09-04.png)\n\n## 全局变量->限制访问\n原本同级文件夹下的源文件可以用`extern`关键字互相获取全局变量,但如果用`static`修饰本地全局变量，那么这个全局变量只能在本文件调用，而其它文件看不到它\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_11-56-27.png)\n\n## 全局函数->限制访问\n原本同级文件夹下的源文件可以用`extern`关键字声明函数，然后去其它源文件的全局函数中寻找`实现方式`,但如果用`static`修饰本地全局函数，那么这个全局函数的实现只能在本文件调用，而其它文件看不到它\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_12-02-16.png)\n\n# C++类和对象\n\n## 成员变量->静态成员 (全局变量)\n原本声明的成员变量在实例化后，属于由`类`实例化出来的`对象`，生命周期与所属对象相同，但在加了`static`后，该变量属于该类域中的全局变量，不再属于某个**具体**的`对象`\n\n**初始化**: 因为已经不属于某一个对象，初始化也不能在类的接口中完成了，因此在类中声明`static`成员变量后，**必须**在全局区初始化`类域`中的成员变量。  #*在main函数等非全局域中无法初始化*\n\n常见应用：引用计数\n\n```C++\nclass A\n{\npublic:\n\tA()\n\t{\n\t\tcnt++;\n\t}\n\nprivate:\n\tstatic int cnt;\n};\n\nint A::cnt = 0;\n```\n\n## 成员函数->静态成员函数 (不含this指针)\n一般声明在类中的成员函数的参数列表隐藏`this`指针，要调用函数时得用类实例化出的`对象`来调用，由这个对象提供`this`指针\n\n而使用`static`修饰后的静态成员函数不含`this`指针，该函数属于整个类域，调用时使用类域调用\n\n```C++\nclass A\n{\npublic:\n\tA()\n\t{\n\t\tcnt++;\n\t}\n\nstatic int getCNT()\n{\n    return cnt;\n}\n\nprivate:\n\tstatic int cnt;\n};\n\nint A::cnt = 0;\n\nint main()\n{\n    A a,b,c;\n    cout<<A::getCNT();//此时输出3\n    return 0;\n}\n``` ","source":"_posts/usestatic.md","raw":"---\ntitle: C/C++ static关键字的使用\ndate: 2024-06-30 18:21:50\ntags:\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/static.png\n---\n\n因为`static`的用法又多又杂，值得单出一篇博客用以汇总\n\n# C/C++ 通用用法\n\n## 局部变量->全局属性\n当对原本声明在函数栈帧里的`变量`使用`static`修饰时,该`变量`的存储空间会改变到`静态区`，不会随着函数栈帧的销毁而销毁。\n\n初始化：初次调用声明语句时会执行声明操作，而之后再执行到该语句处时会自动跳过。\n\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_10-51-24.png)\n\n作用范围：与不加`static`时的作用范围相同，还是局部可用\n\n销毁：和全局变量一样在`main`函数的栈帧销毁时一并销毁\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_11-09-04.png)\n\n## 全局变量->限制访问\n原本同级文件夹下的源文件可以用`extern`关键字互相获取全局变量,但如果用`static`修饰本地全局变量，那么这个全局变量只能在本文件调用，而其它文件看不到它\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_11-56-27.png)\n\n## 全局函数->限制访问\n原本同级文件夹下的源文件可以用`extern`关键字声明函数，然后去其它源文件的全局函数中寻找`实现方式`,但如果用`static`修饰本地全局函数，那么这个全局函数的实现只能在本文件调用，而其它文件看不到它\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_12-02-16.png)\n\n# C++类和对象\n\n## 成员变量->静态成员 (全局变量)\n原本声明的成员变量在实例化后，属于由`类`实例化出来的`对象`，生命周期与所属对象相同，但在加了`static`后，该变量属于该类域中的全局变量，不再属于某个**具体**的`对象`\n\n**初始化**: 因为已经不属于某一个对象，初始化也不能在类的接口中完成了，因此在类中声明`static`成员变量后，**必须**在全局区初始化`类域`中的成员变量。  #*在main函数等非全局域中无法初始化*\n\n常见应用：引用计数\n\n```C++\nclass A\n{\npublic:\n\tA()\n\t{\n\t\tcnt++;\n\t}\n\nprivate:\n\tstatic int cnt;\n};\n\nint A::cnt = 0;\n```\n\n## 成员函数->静态成员函数 (不含this指针)\n一般声明在类中的成员函数的参数列表隐藏`this`指针，要调用函数时得用类实例化出的`对象`来调用，由这个对象提供`this`指针\n\n而使用`static`修饰后的静态成员函数不含`this`指针，该函数属于整个类域，调用时使用类域调用\n\n```C++\nclass A\n{\npublic:\n\tA()\n\t{\n\t\tcnt++;\n\t}\n\nstatic int getCNT()\n{\n    return cnt;\n}\n\nprivate:\n\tstatic int cnt;\n};\n\nint A::cnt = 0;\n\nint main()\n{\n    A a,b,c;\n    cout<<A::getCNT();//此时输出3\n    return 0;\n}\n``` ","slug":"usestatic","published":1,"updated":"2024-07-03T08:01:05.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvh001pv8p5ai9heka4","content":"<p>因为<code>static</code>的用法又多又杂，值得单出一篇博客用以汇总</p>\n<h1 id=\"C-C-通用用法\"><a href=\"#C-C-通用用法\" class=\"headerlink\" title=\"C&#x2F;C++ 通用用法\"></a>C&#x2F;C++ 通用用法</h1><h2 id=\"局部变量-全局属性\"><a href=\"#局部变量-全局属性\" class=\"headerlink\" title=\"局部变量-&gt;全局属性\"></a>局部变量-&gt;全局属性</h2><p>当对原本声明在函数栈帧里的<code>变量</code>使用<code>static</code>修饰时,该<code>变量</code>的存储空间会改变到<code>静态区</code>，不会随着函数栈帧的销毁而销毁。</p>\n<p>初始化：初次调用声明语句时会执行声明操作，而之后再执行到该语句处时会自动跳过。</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_10-51-24.png\"></p>\n<p>作用范围：与不加<code>static</code>时的作用范围相同，还是局部可用</p>\n<p>销毁：和全局变量一样在<code>main</code>函数的栈帧销毁时一并销毁</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_11-09-04.png\"></p>\n<h2 id=\"全局变量-限制访问\"><a href=\"#全局变量-限制访问\" class=\"headerlink\" title=\"全局变量-&gt;限制访问\"></a>全局变量-&gt;限制访问</h2><p>原本同级文件夹下的源文件可以用<code>extern</code>关键字互相获取全局变量,但如果用<code>static</code>修饰本地全局变量，那么这个全局变量只能在本文件调用，而其它文件看不到它</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_11-56-27.png\"></p>\n<h2 id=\"全局函数-限制访问\"><a href=\"#全局函数-限制访问\" class=\"headerlink\" title=\"全局函数-&gt;限制访问\"></a>全局函数-&gt;限制访问</h2><p>原本同级文件夹下的源文件可以用<code>extern</code>关键字声明函数，然后去其它源文件的全局函数中寻找<code>实现方式</code>,但如果用<code>static</code>修饰本地全局函数，那么这个全局函数的实现只能在本文件调用，而其它文件看不到它</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_12-02-16.png\"></p>\n<h1 id=\"C-类和对象\"><a href=\"#C-类和对象\" class=\"headerlink\" title=\"C++类和对象\"></a>C++类和对象</h1><h2 id=\"成员变量-静态成员-全局变量\"><a href=\"#成员变量-静态成员-全局变量\" class=\"headerlink\" title=\"成员变量-&gt;静态成员 (全局变量)\"></a>成员变量-&gt;静态成员 (全局变量)</h2><p>原本声明的成员变量在实例化后，属于由<code>类</code>实例化出来的<code>对象</code>，生命周期与所属对象相同，但在加了<code>static</code>后，该变量属于该类域中的全局变量，不再属于某个<strong>具体</strong>的<code>对象</code></p>\n<p><strong>初始化</strong>: 因为已经不属于某一个对象，初始化也不能在类的接口中完成了，因此在类中声明<code>static</code>成员变量后，<strong>必须</strong>在全局区初始化<code>类域</code>中的成员变量。  #<em>在main函数等非全局域中无法初始化</em></p>\n<p>常见应用：引用计数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcnt++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> A::cnt = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"成员函数-静态成员函数-不含this指针\"><a href=\"#成员函数-静态成员函数-不含this指针\" class=\"headerlink\" title=\"成员函数-&gt;静态成员函数 (不含this指针)\"></a>成员函数-&gt;静态成员函数 (不含this指针)</h2><p>一般声明在类中的成员函数的参数列表隐藏<code>this</code>指针，要调用函数时得用类实例化出的<code>对象</code>来调用，由这个对象提供<code>this</code>指针</p>\n<p>而使用<code>static</code>修饰后的静态成员函数不含<code>this</code>指针，该函数属于整个类域，调用时使用类域调用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcnt++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getCNT</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> A::cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a,b,c;</span><br><span class=\"line\">    cout&lt;&lt;A::<span class=\"built_in\">getCNT</span>();<span class=\"comment\">//此时输出3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<p>因为<code>static</code>的用法又多又杂，值得单出一篇博客用以汇总</p>\n<h1 id=\"C-C-通用用法\"><a href=\"#C-C-通用用法\" class=\"headerlink\" title=\"C&#x2F;C++ 通用用法\"></a>C&#x2F;C++ 通用用法</h1><h2 id=\"局部变量-全局属性\"><a href=\"#局部变量-全局属性\" class=\"headerlink\" title=\"局部变量-&gt;全局属性\"></a>局部变量-&gt;全局属性</h2><p>当对原本声明在函数栈帧里的<code>变量</code>使用<code>static</code>修饰时,该<code>变量</code>的存储空间会改变到<code>静态区</code>，不会随着函数栈帧的销毁而销毁。</p>\n<p>初始化：初次调用声明语句时会执行声明操作，而之后再执行到该语句处时会自动跳过。</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_10-51-24.png\"></p>\n<p>作用范围：与不加<code>static</code>时的作用范围相同，还是局部可用</p>\n<p>销毁：和全局变量一样在<code>main</code>函数的栈帧销毁时一并销毁</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_11-09-04.png\"></p>\n<h2 id=\"全局变量-限制访问\"><a href=\"#全局变量-限制访问\" class=\"headerlink\" title=\"全局变量-&gt;限制访问\"></a>全局变量-&gt;限制访问</h2><p>原本同级文件夹下的源文件可以用<code>extern</code>关键字互相获取全局变量,但如果用<code>static</code>修饰本地全局变量，那么这个全局变量只能在本文件调用，而其它文件看不到它</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_11-56-27.png\"></p>\n<h2 id=\"全局函数-限制访问\"><a href=\"#全局函数-限制访问\" class=\"headerlink\" title=\"全局函数-&gt;限制访问\"></a>全局函数-&gt;限制访问</h2><p>原本同级文件夹下的源文件可以用<code>extern</code>关键字声明函数，然后去其它源文件的全局函数中寻找<code>实现方式</code>,但如果用<code>static</code>修饰本地全局函数，那么这个全局函数的实现只能在本文件调用，而其它文件看不到它</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2024-07-03_12-02-16.png\"></p>\n<h1 id=\"C-类和对象\"><a href=\"#C-类和对象\" class=\"headerlink\" title=\"C++类和对象\"></a>C++类和对象</h1><h2 id=\"成员变量-静态成员-全局变量\"><a href=\"#成员变量-静态成员-全局变量\" class=\"headerlink\" title=\"成员变量-&gt;静态成员 (全局变量)\"></a>成员变量-&gt;静态成员 (全局变量)</h2><p>原本声明的成员变量在实例化后，属于由<code>类</code>实例化出来的<code>对象</code>，生命周期与所属对象相同，但在加了<code>static</code>后，该变量属于该类域中的全局变量，不再属于某个<strong>具体</strong>的<code>对象</code></p>\n<p><strong>初始化</strong>: 因为已经不属于某一个对象，初始化也不能在类的接口中完成了，因此在类中声明<code>static</code>成员变量后，<strong>必须</strong>在全局区初始化<code>类域</code>中的成员变量。  #<em>在main函数等非全局域中无法初始化</em></p>\n<p>常见应用：引用计数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcnt++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> A::cnt = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"成员函数-静态成员函数-不含this指针\"><a href=\"#成员函数-静态成员函数-不含this指针\" class=\"headerlink\" title=\"成员函数-&gt;静态成员函数 (不含this指针)\"></a>成员函数-&gt;静态成员函数 (不含this指针)</h2><p>一般声明在类中的成员函数的参数列表隐藏<code>this</code>指针，要调用函数时得用类实例化出的<code>对象</code>来调用，由这个对象提供<code>this</code>指针</p>\n<p>而使用<code>static</code>修饰后的静态成员函数不含<code>this</code>指针，该函数属于整个类域，调用时使用类域调用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcnt++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getCNT</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> A::cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a,b,c;</span><br><span class=\"line\">    cout&lt;&lt;A::<span class=\"built_in\">getCNT</span>();<span class=\"comment\">//此时输出3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"如何在VS里使用scanf","date":"2023-10-05T14:37:32.000Z","_content":"# VS里怎么连scanf都用不了？ #\n不少刚接触[Visual Studio](https://visualstudio.microsoft.com/zh-hans/free-developer-offers/)的可能发现使用scanf会报错(如下)\n\n![报错图片](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/VS_scanf.jpg)\n\nvs告诉你说`scanf`不安全，然后你会发现vs给你提供了`scanf_s`去代替`scanf`,**但是**,只有vs能编译`scanf_s`,**可移植性**太差了，所以我们要用回`scanf`,所以要怎么不让它报错呢？**可以在源文件开头添加一行宏定义(如下)**\n\n`#define  _CRT_SECURE_NO_WARNINGS 1`\n\n这样就能**关闭报错**了,但请先**别急着走**,每次都要复制粘贴一句宏定义太麻烦了，想**一劳永逸**的请往下看。\n\n# 修改newc++file.cpp来自动添加宏定义 #\n**先来看怎么做：**首先搜索找到电脑中叫做`newc++file.cpp`的文件。（这里推荐使用[everything](https://www.voidtools.com/zh-cn/downloads/)）\n\n---\n\n*后半段路径应与图片一致，注意不是快捷方式*\n\n![c++文件的位置](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/newcppfile.jpg)\n\n---\n\n**注意**：由于权限原因，**无法**直接修改此文件\n\n所以先将这个文件复制粘贴到别处，例如桌面，下文用`副本`代称。\n\n用记事本类软件(记事本就行)打开`副本`,在第一行输入上文提到的宏定义代码`#define  _CRT_SECURE_NO_WARNINGS 1`,然后`ctrl+s`保存。\n\n**关闭编辑窗口**，将该`副本`移动到原始文件所在文件夹，弹出如下窗口，然后选择**替换文件**\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-08_12-28-18.jpg)\n\n接着弹出下一个提示，点**接续**\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-08_12-28-33.jpg)\n\n等待它替换完成，然后**大功告成！**。之后新建的每一个`.c`或`.cpp` 文件都会自带那段宏定义，于是`scanf`从此任君使用。~~当然平时删代码的时候记得别把那段宏定义删了~~\n\n## 原理 #\nVS所新建的`.c`和`.cpp`文件都源自于对上文`newc++file.cpp`文件的拷贝，通过修改它就能改变`VS新建文件`的初始内容","source":"_posts/useScanf.md","raw":"---\ntitle: 如何在VS里使用scanf\ndate: 2023-10-05 22:37:32\ntags: C语言\n---\n# VS里怎么连scanf都用不了？ #\n不少刚接触[Visual Studio](https://visualstudio.microsoft.com/zh-hans/free-developer-offers/)的可能发现使用scanf会报错(如下)\n\n![报错图片](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/VS_scanf.jpg)\n\nvs告诉你说`scanf`不安全，然后你会发现vs给你提供了`scanf_s`去代替`scanf`,**但是**,只有vs能编译`scanf_s`,**可移植性**太差了，所以我们要用回`scanf`,所以要怎么不让它报错呢？**可以在源文件开头添加一行宏定义(如下)**\n\n`#define  _CRT_SECURE_NO_WARNINGS 1`\n\n这样就能**关闭报错**了,但请先**别急着走**,每次都要复制粘贴一句宏定义太麻烦了，想**一劳永逸**的请往下看。\n\n# 修改newc++file.cpp来自动添加宏定义 #\n**先来看怎么做：**首先搜索找到电脑中叫做`newc++file.cpp`的文件。（这里推荐使用[everything](https://www.voidtools.com/zh-cn/downloads/)）\n\n---\n\n*后半段路径应与图片一致，注意不是快捷方式*\n\n![c++文件的位置](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/newcppfile.jpg)\n\n---\n\n**注意**：由于权限原因，**无法**直接修改此文件\n\n所以先将这个文件复制粘贴到别处，例如桌面，下文用`副本`代称。\n\n用记事本类软件(记事本就行)打开`副本`,在第一行输入上文提到的宏定义代码`#define  _CRT_SECURE_NO_WARNINGS 1`,然后`ctrl+s`保存。\n\n**关闭编辑窗口**，将该`副本`移动到原始文件所在文件夹，弹出如下窗口，然后选择**替换文件**\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-08_12-28-18.jpg)\n\n接着弹出下一个提示，点**接续**\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-08_12-28-33.jpg)\n\n等待它替换完成，然后**大功告成！**。之后新建的每一个`.c`或`.cpp` 文件都会自带那段宏定义，于是`scanf`从此任君使用。~~当然平时删代码的时候记得别把那段宏定义删了~~\n\n## 原理 #\nVS所新建的`.c`和`.cpp`文件都源自于对上文`newc++file.cpp`文件的拷贝，通过修改它就能改变`VS新建文件`的初始内容","slug":"useScanf","published":1,"updated":"2024-05-14T02:21:45.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvi001qv8p5675c887p","content":"<h1 id=\"VS里怎么连scanf都用不了？\"><a href=\"#VS里怎么连scanf都用不了？\" class=\"headerlink\" title=\"VS里怎么连scanf都用不了？\"></a>VS里怎么连scanf都用不了？</h1><p>不少刚接触<a href=\"https://visualstudio.microsoft.com/zh-hans/free-developer-offers/\">Visual Studio</a>的可能发现使用scanf会报错(如下)</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/VS_scanf.jpg\" alt=\"报错图片\"></p>\n<p>vs告诉你说<code>scanf</code>不安全，然后你会发现vs给你提供了<code>scanf_s</code>去代替<code>scanf</code>,<strong>但是</strong>,只有vs能编译<code>scanf_s</code>,<strong>可移植性</strong>太差了，所以我们要用回<code>scanf</code>,所以要怎么不让它报错呢？<strong>可以在源文件开头添加一行宏定义(如下)</strong></p>\n<p><code>#define  _CRT_SECURE_NO_WARNINGS 1</code></p>\n<p>这样就能<strong>关闭报错</strong>了,但请先<strong>别急着走</strong>,每次都要复制粘贴一句宏定义太麻烦了，想<strong>一劳永逸</strong>的请往下看。</p>\n<h1 id=\"修改newc-file-cpp来自动添加宏定义\"><a href=\"#修改newc-file-cpp来自动添加宏定义\" class=\"headerlink\" title=\"修改newc++file.cpp来自动添加宏定义\"></a>修改newc++file.cpp来自动添加宏定义</h1><p><strong>先来看怎么做：</strong>首先搜索找到电脑中叫做<code>newc++file.cpp</code>的文件。（这里推荐使用<a href=\"https://www.voidtools.com/zh-cn/downloads/\">everything</a>）</p>\n<hr>\n<p><em>后半段路径应与图片一致，注意不是快捷方式</em></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/newcppfile.jpg\" alt=\"c++文件的位置\"></p>\n<hr>\n<p><strong>注意</strong>：由于权限原因，<strong>无法</strong>直接修改此文件</p>\n<p>所以先将这个文件复制粘贴到别处，例如桌面，下文用<code>副本</code>代称。</p>\n<p>用记事本类软件(记事本就行)打开<code>副本</code>,在第一行输入上文提到的宏定义代码<code>#define  _CRT_SECURE_NO_WARNINGS 1</code>,然后<code>ctrl+s</code>保存。</p>\n<p><strong>关闭编辑窗口</strong>，将该<code>副本</code>移动到原始文件所在文件夹，弹出如下窗口，然后选择<strong>替换文件</strong></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-08_12-28-18.jpg\"></p>\n<p>接着弹出下一个提示，点<strong>接续</strong></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-08_12-28-33.jpg\"></p>\n<p>等待它替换完成，然后<strong>大功告成！</strong>。之后新建的每一个<code>.c</code>或<code>.cpp</code> 文件都会自带那段宏定义，于是<code>scanf</code>从此任君使用。<del>当然平时删代码的时候记得别把那段宏定义删了</del></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>VS所新建的<code>.c</code>和<code>.cpp</code>文件都源自于对上文<code>newc++file.cpp</code>文件的拷贝，通过修改它就能改变<code>VS新建文件</code>的初始内容</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":"<h1 id=\"VS里怎么连scanf都用不了？\"><a href=\"#VS里怎么连scanf都用不了？\" class=\"headerlink\" title=\"VS里怎么连scanf都用不了？\"></a>VS里怎么连scanf都用不了？</h1><p>不少刚接触<a href=\"https://visualstudio.microsoft.com/zh-hans/free-developer-offers/\">Visual Studio</a>的可能发现使用scanf会报错(如下)</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/VS_scanf.jpg\" alt=\"报错图片\"></p>\n<p>vs告诉你说<code>scanf</code>不安全，然后你会发现vs给你提供了<code>scanf_s</code>去代替<code>scanf</code>,<strong>但是</strong>,只有vs能编译<code>scanf_s</code>,<strong>可移植性</strong>太差了，所以我们要用回<code>scanf</code>,所以要怎么不让它报错呢？<strong>可以在源文件开头添加一行宏定义(如下)</strong></p>\n<p><code>#define  _CRT_SECURE_NO_WARNINGS 1</code></p>\n<p>这样就能<strong>关闭报错</strong>了,但请先<strong>别急着走</strong>,每次都要复制粘贴一句宏定义太麻烦了，想<strong>一劳永逸</strong>的请往下看。</p>\n<h1 id=\"修改newc-file-cpp来自动添加宏定义\"><a href=\"#修改newc-file-cpp来自动添加宏定义\" class=\"headerlink\" title=\"修改newc++file.cpp来自动添加宏定义\"></a>修改newc++file.cpp来自动添加宏定义</h1><p><strong>先来看怎么做：</strong>首先搜索找到电脑中叫做<code>newc++file.cpp</code>的文件。（这里推荐使用<a href=\"https://www.voidtools.com/zh-cn/downloads/\">everything</a>）</p>\n<hr>\n<p><em>后半段路径应与图片一致，注意不是快捷方式</em></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/newcppfile.jpg\" alt=\"c++文件的位置\"></p>\n<hr>\n<p><strong>注意</strong>：由于权限原因，<strong>无法</strong>直接修改此文件</p>\n<p>所以先将这个文件复制粘贴到别处，例如桌面，下文用<code>副本</code>代称。</p>\n<p>用记事本类软件(记事本就行)打开<code>副本</code>,在第一行输入上文提到的宏定义代码<code>#define  _CRT_SECURE_NO_WARNINGS 1</code>,然后<code>ctrl+s</code>保存。</p>\n<p><strong>关闭编辑窗口</strong>，将该<code>副本</code>移动到原始文件所在文件夹，弹出如下窗口，然后选择<strong>替换文件</strong></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-08_12-28-18.jpg\"></p>\n<p>接着弹出下一个提示，点<strong>接续</strong></p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-10-08_12-28-33.jpg\"></p>\n<p>等待它替换完成，然后<strong>大功告成！</strong>。之后新建的每一个<code>.c</code>或<code>.cpp</code> 文件都会自带那段宏定义，于是<code>scanf</code>从此任君使用。<del>当然平时删代码的时候记得别把那段宏定义删了</del></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>VS所新建的<code>.c</code>和<code>.cpp</code>文件都源自于对上文<code>newc++file.cpp</code>文件的拷贝，通过修改它就能改变<code>VS新建文件</code>的初始内容</p>\n"},{"title":"vim基础指令集","date":"2023-12-10T23:41:57.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/terminalpng.png","_content":"`Vim`是一款文本编辑器,下面介绍在vim界面中的常用指令\n\n**三种模式**:`命令模式(Command Mode)` `插入模式（Insert Mode` `命令行模式（Command-Line Mode）`（这里称命令行模式为`底行模式`）\n\n三者关系如下图\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2023-12-11_10-39-04.png)\n\n# 命令模式\n`vim`界面中多摁几次`ESC`就能退出其它模式回到`命令模式`，在这个模式下可以使用一系列vim[快捷键](https://linux.cn/article-8144-1.html)\n\n# 底行模式 #\n`tips`:不管目前是什么模式,先狂按`ESC`,回到`命令模式`,然后输入`:`进入`底行模式`,准备开始输命令\n\n`命令组成`\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2023-12-11_12-48-54.png)\n\n+ 保存`:w`->强制保存`!w`\n+ 退出`:q`->强制退出`:!q`\n+ 保存并退出`:wq`-.强制保存并退出`:!wq`\n+ 对比`:vs `+`(源文件路径)`\n\n\n# 插入模式\n在`命令模式`下按键盘`i`进入`插入模式`，执行正常的文本编辑功能","source":"_posts/vim-cmd.md","raw":"---\ntitle: vim基础指令集\ndate: 2023-12-11 07:41:57\ntags: Linux vim\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/terminalpng.png\n---\n`Vim`是一款文本编辑器,下面介绍在vim界面中的常用指令\n\n**三种模式**:`命令模式(Command Mode)` `插入模式（Insert Mode` `命令行模式（Command-Line Mode）`（这里称命令行模式为`底行模式`）\n\n三者关系如下图\n\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2023-12-11_10-39-04.png)\n\n# 命令模式\n`vim`界面中多摁几次`ESC`就能退出其它模式回到`命令模式`，在这个模式下可以使用一系列vim[快捷键](https://linux.cn/article-8144-1.html)\n\n# 底行模式 #\n`tips`:不管目前是什么模式,先狂按`ESC`,回到`命令模式`,然后输入`:`进入`底行模式`,准备开始输命令\n\n`命令组成`\n![](https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2023-12-11_12-48-54.png)\n\n+ 保存`:w`->强制保存`!w`\n+ 退出`:q`->强制退出`:!q`\n+ 保存并退出`:wq`-.强制保存并退出`:!wq`\n+ 对比`:vs `+`(源文件路径)`\n\n\n# 插入模式\n在`命令模式`下按键盘`i`进入`插入模式`，执行正常的文本编辑功能","slug":"vim-cmd","published":1,"updated":"2024-07-03T10:03:53.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvi001tv8p52tg67boq","content":"<p><code>Vim</code>是一款文本编辑器,下面介绍在vim界面中的常用指令</p>\n<p><strong>三种模式</strong>:<code>命令模式(Command Mode)</code> <code>插入模式（Insert Mode</code> <code>命令行模式（Command-Line Mode）</code>（这里称命令行模式为<code>底行模式</code>）</p>\n<p>三者关系如下图</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2023-12-11_10-39-04.png\"></p>\n<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><p><code>vim</code>界面中多摁几次<code>ESC</code>就能退出其它模式回到<code>命令模式</code>，在这个模式下可以使用一系列vim<a href=\"https://linux.cn/article-8144-1.html\">快捷键</a></p>\n<h1 id=\"底行模式\"><a href=\"#底行模式\" class=\"headerlink\" title=\"底行模式\"></a>底行模式</h1><p><code>tips</code>:不管目前是什么模式,先狂按<code>ESC</code>,回到<code>命令模式</code>,然后输入<code>:</code>进入<code>底行模式</code>,准备开始输命令</p>\n<p><code>命令组成</code><br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2023-12-11_12-48-54.png\"></p>\n<ul>\n<li>保存<code>:w</code>-&gt;强制保存<code>!w</code></li>\n<li>退出<code>:q</code>-&gt;强制退出<code>:!q</code></li>\n<li>保存并退出<code>:wq</code>-.强制保存并退出<code>:!wq</code></li>\n<li>对比<code>:vs </code>+<code>(源文件路径)</code></li>\n</ul>\n<h1 id=\"插入模式\"><a href=\"#插入模式\" class=\"headerlink\" title=\"插入模式\"></a>插入模式</h1><p>在<code>命令模式</code>下按键盘<code>i</code>进入<code>插入模式</code>，执行正常的文本编辑功能</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<p><code>Vim</code>是一款文本编辑器,下面介绍在vim界面中的常用指令</p>\n<p><strong>三种模式</strong>:<code>命令模式(Command Mode)</code> <code>插入模式（Insert Mode</code> <code>命令行模式（Command-Line Mode）</code>（这里称命令行模式为<code>底行模式</code>）</p>\n<p>三者关系如下图</p>\n<p><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2023-12-11_10-39-04.png\"></p>\n<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><p><code>vim</code>界面中多摁几次<code>ESC</code>就能退出其它模式回到<code>命令模式</code>，在这个模式下可以使用一系列vim<a href=\"https://linux.cn/article-8144-1.html\">快捷键</a></p>\n<h1 id=\"底行模式\"><a href=\"#底行模式\" class=\"headerlink\" title=\"底行模式\"></a>底行模式</h1><p><code>tips</code>:不管目前是什么模式,先狂按<code>ESC</code>,回到<code>命令模式</code>,然后输入<code>:</code>进入<code>底行模式</code>,准备开始输命令</p>\n<p><code>命令组成</code><br><img src=\"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/PixPin_2023-12-11_12-48-54.png\"></p>\n<ul>\n<li>保存<code>:w</code>-&gt;强制保存<code>!w</code></li>\n<li>退出<code>:q</code>-&gt;强制退出<code>:!q</code></li>\n<li>保存并退出<code>:wq</code>-.强制保存并退出<code>:!wq</code></li>\n<li>对比<code>:vs </code>+<code>(源文件路径)</code></li>\n</ul>\n<h1 id=\"插入模式\"><a href=\"#插入模式\" class=\"headerlink\" title=\"插入模式\"></a>插入模式</h1><p>在<code>命令模式</code>下按键盘<code>i</code>进入<code>插入模式</code>，执行正常的文本编辑功能</p>\n"},{"title":"=回顾-前端=从简陋的html到单网页再到全栈开发","date":"2023-09-23T01:58:24.000Z","_content":"[👉点我去作业一](https://picbed.supdriver.top/html/prj_basis++/index.html)\n\n[👉点我去作业二](https://picbed.supdriver.top/html/adc_v2/index.html)\n\n[👉点我去作业三](http://localhost:5173/)(抱歉，还没部署到服务器里，这个只能在我自己的电脑里用)\n\n[👉点我去作业四](https://picbed.supdriver.top/video/never.mp4)\n\n~~其实这依然是个博客~~\n\n---\n# 粗糙的作业一 #\n当时只学过html,css,js的快速入门，对盒子`<div>`的玩法还不太熟，还只会用浮动盒子`float`和绝对定位,结局就是写两句html就得清除浮动~~233~~,甚至`<lenged>`也不认识，结果手动用css给实现了。总之就挺简陋的\n\n# 精致~~(并不)~~作业二 #\n用vscode写作业二的时候，写一半发现鼠标悬停在`tag`时，它会给出去往[*MDN*](https://developer.mozilla.org/zh-CN/)对应参考页的连接,然后就开始一边写一边阅读MDN,结果一发不可收拾，开始读的时间比写的时间还长。最后成功学到神器~~bushi~~`flex`**弹性盒子模型。**。\n\n但还没完，除了参阅文档，我还多次在B站首页和MC百度百科首页打开`F12`,查看，学习他们是如何布局盒子的，别说，学成品也挺有用的，对盒子的排版，嵌套的想法成熟多了\n\n结合二者，照着图片做一个网页便没什么问题了。那个作业二我甚至直接弃掉了初版（已经把顶部做好了）version2基本完全采用`flex盒子`。比较遗憾的是，虽然每个菜单按钮都加了超链接，但是对应的网页并没有做出来（创作力有限）。但至少是个合格的花瓶，嘿嘿\n\n# 速成作业三 #\n因为作业三没部署到服务器上，只能文字描述了（悲）\n\n作业三我选的是用`vue`搭建个人博客，我先是自学了几天vue,结果发现光学vue就做不了个人博客，于是在B站上找了个时长6小时的全栈开发，用`js`写的服务端，数据库用`sqlite`,前端框架是`vue`.\n\n好家伙，5天爆肝项目（包括但不限于*抄代码*,*找bug*,*找bug*,*找bug*），成功把博客的基本功能写完了。除了`Naive UI`的代码是复制**组件库**里的，剩下的代码基本都是我**手打**的，可以说忙得不亦乐乎，而且当时我并不太懂`js语法`，体验可以说是相当刺激了。\n\n但**回报不小**，就算不能说入门吧，到时候自己加功能，照葫芦画瓢，自己写`js`的能力还是有了滴。而且这也是我首次**接触数据库**,混个脸熟，嘿嘿。而且**最重要**的一点，我成功增加了一个**高自由度的个人博客**，~~讲真hexo的各自魔改我不太玩的懂~~。\n\n## 尾声 #\n作业三部曲之后，我大概就不太去碰前端了，至少一周爆肝一个全栈开发项目这种疯狂的行为不会再有了，权当是一次挑战罢，一次冒险，一次对边界的探索罢。重心很明确，对前端顶多写写像这篇博客一样的感悟，技术博客主要还是在后端语言，算法，数据结构之类\n","source":"_posts/vueTheRoad.md","raw":"---\ntitle: =回顾-前端=从简陋的html到单网页再到全栈开发\ndate: 2023-09-23 09:58:24\ntags: 回顾\n---\n[👉点我去作业一](https://picbed.supdriver.top/html/prj_basis++/index.html)\n\n[👉点我去作业二](https://picbed.supdriver.top/html/adc_v2/index.html)\n\n[👉点我去作业三](http://localhost:5173/)(抱歉，还没部署到服务器里，这个只能在我自己的电脑里用)\n\n[👉点我去作业四](https://picbed.supdriver.top/video/never.mp4)\n\n~~其实这依然是个博客~~\n\n---\n# 粗糙的作业一 #\n当时只学过html,css,js的快速入门，对盒子`<div>`的玩法还不太熟，还只会用浮动盒子`float`和绝对定位,结局就是写两句html就得清除浮动~~233~~,甚至`<lenged>`也不认识，结果手动用css给实现了。总之就挺简陋的\n\n# 精致~~(并不)~~作业二 #\n用vscode写作业二的时候，写一半发现鼠标悬停在`tag`时，它会给出去往[*MDN*](https://developer.mozilla.org/zh-CN/)对应参考页的连接,然后就开始一边写一边阅读MDN,结果一发不可收拾，开始读的时间比写的时间还长。最后成功学到神器~~bushi~~`flex`**弹性盒子模型。**。\n\n但还没完，除了参阅文档，我还多次在B站首页和MC百度百科首页打开`F12`,查看，学习他们是如何布局盒子的，别说，学成品也挺有用的，对盒子的排版，嵌套的想法成熟多了\n\n结合二者，照着图片做一个网页便没什么问题了。那个作业二我甚至直接弃掉了初版（已经把顶部做好了）version2基本完全采用`flex盒子`。比较遗憾的是，虽然每个菜单按钮都加了超链接，但是对应的网页并没有做出来（创作力有限）。但至少是个合格的花瓶，嘿嘿\n\n# 速成作业三 #\n因为作业三没部署到服务器上，只能文字描述了（悲）\n\n作业三我选的是用`vue`搭建个人博客，我先是自学了几天vue,结果发现光学vue就做不了个人博客，于是在B站上找了个时长6小时的全栈开发，用`js`写的服务端，数据库用`sqlite`,前端框架是`vue`.\n\n好家伙，5天爆肝项目（包括但不限于*抄代码*,*找bug*,*找bug*,*找bug*），成功把博客的基本功能写完了。除了`Naive UI`的代码是复制**组件库**里的，剩下的代码基本都是我**手打**的，可以说忙得不亦乐乎，而且当时我并不太懂`js语法`，体验可以说是相当刺激了。\n\n但**回报不小**，就算不能说入门吧，到时候自己加功能，照葫芦画瓢，自己写`js`的能力还是有了滴。而且这也是我首次**接触数据库**,混个脸熟，嘿嘿。而且**最重要**的一点，我成功增加了一个**高自由度的个人博客**，~~讲真hexo的各自魔改我不太玩的懂~~。\n\n## 尾声 #\n作业三部曲之后，我大概就不太去碰前端了，至少一周爆肝一个全栈开发项目这种疯狂的行为不会再有了，权当是一次挑战罢，一次冒险，一次对边界的探索罢。重心很明确，对前端顶多写写像这篇博客一样的感悟，技术博客主要还是在后端语言，算法，数据结构之类\n","slug":"vueTheRoad","published":1,"updated":"2024-05-14T02:22:12.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvi001vv8p58y6i43og","content":"<p><a href=\"https://picbed.supdriver.top/html/prj_basis++/index.html\">👉点我去作业一</a></p>\n<p><a href=\"https://picbed.supdriver.top/html/adc_v2/index.html\">👉点我去作业二</a></p>\n<p><a href=\"http://localhost:5173/\">👉点我去作业三</a>(抱歉，还没部署到服务器里，这个只能在我自己的电脑里用)</p>\n<p><a href=\"https://picbed.supdriver.top/video/never.mp4\">👉点我去作业四</a></p>\n<p><del>其实这依然是个博客</del></p>\n<hr>\n<h1 id=\"粗糙的作业一\"><a href=\"#粗糙的作业一\" class=\"headerlink\" title=\"粗糙的作业一\"></a>粗糙的作业一</h1><p>当时只学过html,css,js的快速入门，对盒子<code>&lt;div&gt;</code>的玩法还不太熟，还只会用浮动盒子<code>float</code>和绝对定位,结局就是写两句html就得清除浮动<del>233</del>,甚至<code>&lt;lenged&gt;</code>也不认识，结果手动用css给实现了。总之就挺简陋的</p>\n<h1 id=\"精致-并不-作业二\"><a href=\"#精致-并不-作业二\" class=\"headerlink\" title=\"精致(并不)作业二\"></a>精致<del>(并不)</del>作业二</h1><p>用vscode写作业二的时候，写一半发现鼠标悬停在<code>tag</code>时，它会给出去往<a href=\"https://developer.mozilla.org/zh-CN/\"><em>MDN</em></a>对应参考页的连接,然后就开始一边写一边阅读MDN,结果一发不可收拾，开始读的时间比写的时间还长。最后成功学到神器<del>bushi</del><code>flex</code><strong>弹性盒子模型。</strong>。</p>\n<p>但还没完，除了参阅文档，我还多次在B站首页和MC百度百科首页打开<code>F12</code>,查看，学习他们是如何布局盒子的，别说，学成品也挺有用的，对盒子的排版，嵌套的想法成熟多了</p>\n<p>结合二者，照着图片做一个网页便没什么问题了。那个作业二我甚至直接弃掉了初版（已经把顶部做好了）version2基本完全采用<code>flex盒子</code>。比较遗憾的是，虽然每个菜单按钮都加了超链接，但是对应的网页并没有做出来（创作力有限）。但至少是个合格的花瓶，嘿嘿</p>\n<h1 id=\"速成作业三\"><a href=\"#速成作业三\" class=\"headerlink\" title=\"速成作业三\"></a>速成作业三</h1><p>因为作业三没部署到服务器上，只能文字描述了（悲）</p>\n<p>作业三我选的是用<code>vue</code>搭建个人博客，我先是自学了几天vue,结果发现光学vue就做不了个人博客，于是在B站上找了个时长6小时的全栈开发，用<code>js</code>写的服务端，数据库用<code>sqlite</code>,前端框架是<code>vue</code>.</p>\n<p>好家伙，5天爆肝项目（包括但不限于<em>抄代码</em>,<em>找bug</em>,<em>找bug</em>,<em>找bug</em>），成功把博客的基本功能写完了。除了<code>Naive UI</code>的代码是复制<strong>组件库</strong>里的，剩下的代码基本都是我<strong>手打</strong>的，可以说忙得不亦乐乎，而且当时我并不太懂<code>js语法</code>，体验可以说是相当刺激了。</p>\n<p>但<strong>回报不小</strong>，就算不能说入门吧，到时候自己加功能，照葫芦画瓢，自己写<code>js</code>的能力还是有了滴。而且这也是我首次<strong>接触数据库</strong>,混个脸熟，嘿嘿。而且<strong>最重要</strong>的一点，我成功增加了一个<strong>高自由度的个人博客</strong>，<del>讲真hexo的各自魔改我不太玩的懂</del>。</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>作业三部曲之后，我大概就不太去碰前端了，至少一周爆肝一个全栈开发项目这种疯狂的行为不会再有了，权当是一次挑战罢，一次冒险，一次对边界的探索罢。重心很明确，对前端顶多写写像这篇博客一样的感悟，技术博客主要还是在后端语言，算法，数据结构之类</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://picbed.supdriver.top/img/avatar.png","cover_type":"img","excerpt":"","more":"<p><a href=\"https://picbed.supdriver.top/html/prj_basis++/index.html\">👉点我去作业一</a></p>\n<p><a href=\"https://picbed.supdriver.top/html/adc_v2/index.html\">👉点我去作业二</a></p>\n<p><a href=\"http://localhost:5173/\">👉点我去作业三</a>(抱歉，还没部署到服务器里，这个只能在我自己的电脑里用)</p>\n<p><a href=\"https://picbed.supdriver.top/video/never.mp4\">👉点我去作业四</a></p>\n<p><del>其实这依然是个博客</del></p>\n<hr>\n<h1 id=\"粗糙的作业一\"><a href=\"#粗糙的作业一\" class=\"headerlink\" title=\"粗糙的作业一\"></a>粗糙的作业一</h1><p>当时只学过html,css,js的快速入门，对盒子<code>&lt;div&gt;</code>的玩法还不太熟，还只会用浮动盒子<code>float</code>和绝对定位,结局就是写两句html就得清除浮动<del>233</del>,甚至<code>&lt;lenged&gt;</code>也不认识，结果手动用css给实现了。总之就挺简陋的</p>\n<h1 id=\"精致-并不-作业二\"><a href=\"#精致-并不-作业二\" class=\"headerlink\" title=\"精致(并不)作业二\"></a>精致<del>(并不)</del>作业二</h1><p>用vscode写作业二的时候，写一半发现鼠标悬停在<code>tag</code>时，它会给出去往<a href=\"https://developer.mozilla.org/zh-CN/\"><em>MDN</em></a>对应参考页的连接,然后就开始一边写一边阅读MDN,结果一发不可收拾，开始读的时间比写的时间还长。最后成功学到神器<del>bushi</del><code>flex</code><strong>弹性盒子模型。</strong>。</p>\n<p>但还没完，除了参阅文档，我还多次在B站首页和MC百度百科首页打开<code>F12</code>,查看，学习他们是如何布局盒子的，别说，学成品也挺有用的，对盒子的排版，嵌套的想法成熟多了</p>\n<p>结合二者，照着图片做一个网页便没什么问题了。那个作业二我甚至直接弃掉了初版（已经把顶部做好了）version2基本完全采用<code>flex盒子</code>。比较遗憾的是，虽然每个菜单按钮都加了超链接，但是对应的网页并没有做出来（创作力有限）。但至少是个合格的花瓶，嘿嘿</p>\n<h1 id=\"速成作业三\"><a href=\"#速成作业三\" class=\"headerlink\" title=\"速成作业三\"></a>速成作业三</h1><p>因为作业三没部署到服务器上，只能文字描述了（悲）</p>\n<p>作业三我选的是用<code>vue</code>搭建个人博客，我先是自学了几天vue,结果发现光学vue就做不了个人博客，于是在B站上找了个时长6小时的全栈开发，用<code>js</code>写的服务端，数据库用<code>sqlite</code>,前端框架是<code>vue</code>.</p>\n<p>好家伙，5天爆肝项目（包括但不限于<em>抄代码</em>,<em>找bug</em>,<em>找bug</em>,<em>找bug</em>），成功把博客的基本功能写完了。除了<code>Naive UI</code>的代码是复制<strong>组件库</strong>里的，剩下的代码基本都是我<strong>手打</strong>的，可以说忙得不亦乐乎，而且当时我并不太懂<code>js语法</code>，体验可以说是相当刺激了。</p>\n<p>但<strong>回报不小</strong>，就算不能说入门吧，到时候自己加功能，照葫芦画瓢，自己写<code>js</code>的能力还是有了滴。而且这也是我首次<strong>接触数据库</strong>,混个脸熟，嘿嘿。而且<strong>最重要</strong>的一点，我成功增加了一个<strong>高自由度的个人博客</strong>，<del>讲真hexo的各自魔改我不太玩的懂</del>。</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>作业三部曲之后，我大概就不太去碰前端了，至少一周爆肝一个全栈开发项目这种疯狂的行为不会再有了，权当是一次挑战罢，一次冒险，一次对边界的探索罢。重心很明确，对前端顶多写写像这篇博客一样的感悟，技术博客主要还是在后端语言，算法，数据结构之类</p>\n"},{"title":"=算法=按位异或^的种种玩法","date":"2023-09-03T23:05:48.000Z","_content":"## 什么是按位异或``^`` #\n首先将不同数制的数写成**二进制**,例如``9->0b1001``.\\\n然后最末位对齐，依次**按位异或**.\\\n规则:``0 ^ 0= 0 ; 1 ^ 1 = 0; 1 ^ 0 = 1``\\\n推论:任意整数``x``,都有``0^x = x``  ;   ``x ^ x = 0``\\\n***\n**来看看应用**\n## 寻找一个单身狗数 #\n像``[1,3,2,2,3]``这样除了某一个数``1``,剩下的数字都是成对的,也就是说遍历一次数组，把所有的元素**按位异或**在一起，结果便是落单的那个``1``\n```C\n//代码实现\nint arr[] = {1,3,2,2,3};\nint sz = sizeof(arr)/sizeof(arr[0]);//求数组大小\nint ret  = 0;\nfor (int i =0;i<sz;i++)\n{\n    ret^=arr[i];\n}\n\nreturn ret; //此时ret即为落单的那个数\n```\n**_变形_**\n## 消失的数 #\n已知一个由0\\~n(缺失一个数)填充的数组，例``[0,6,4,2,3,1]``,例中的数组少了一个``5``,而我们已知数组包含0\\~6中的5个数，就可以将数组元素与0~6**按位异或**到一起，将问题*消失的数*转化为问题*寻找单身狗*,消失的数变成剩下的那个单身狗\n```C\n//代码实现\nint missingNumber(int* nums, int numsSize)\n{\n    int ret = 0;\n    for(int i = 0;i<numsSize;i++>)\n    {\n        ret^=nums[i];//历遍nums的所有元素\n        ret^=i;//历遍0~numsSize-1\n    }\n    ret^=numsSize;//补上numsSize;\n    return ret;\n}\n```\n**_进阶_**\n## 找到两个单身狗 #\n数组再升级，单身狗变成了**两个**，导致不能粗暴地把所有元素按位异或来求出两个数,但我们仍可以将问题简化：能否将两个单身狗分到两个数组，使之转化为两个独立的*求单个单身狗问题*。于是难点来到了如何**分组**\n\n### 方案之一便是运用**按位异或**和**右移运算符** #\n因为两个不同的数，在二进制上作比较，就至少有一位是不同的，以那一位为``0``或``1``分成两组，便可将两个单身狗分开.而若要查找具体是哪一位，将列表中**所有元素**（就包括了两数）**按位异或**后再用**右移运算符**逐位检验是否为``1``,之后便可轻松分组，并直接**按位异或**得出结果\n\n```C\n//代码实现\nint* singleNumber(int* nums, int numsSize, int ret[2]){\n    int ret1 = 0;\n    int ret2 = 0;\n    int n = 0;//用于记录\"1\"在哪一位\n    int tmp = 0;\n    for(int i =0;i<numsSize;i++)\n    {\n        tmp^=nums[i];\n    }\n    while((tmp>>n) !=1 )\n    {\n        n++;\n    }\n    for(int i = 0; i<nums;i++>)//再次历遍\n    {\n        if((nums[i]>>n ==1))//分组1\n        {\n            ret1^=nums[i];\n        }\n        else  //分组2\n        {\n            ret2^=nums[i];\n        }\n    }\n    ret[0] = ret1;\n    ret[1] = ret2;\n    return ret;\n}\n\n```\n\n思考:3个，4个....N个单身狗时呢？","source":"_posts/算法_按位异或.md","raw":"---\ntitle: =算法=按位异或^的种种玩法\ndate: 2023-09-04 07:05:48\ntags: 算法\n---\n## 什么是按位异或``^`` #\n首先将不同数制的数写成**二进制**,例如``9->0b1001``.\\\n然后最末位对齐，依次**按位异或**.\\\n规则:``0 ^ 0= 0 ; 1 ^ 1 = 0; 1 ^ 0 = 1``\\\n推论:任意整数``x``,都有``0^x = x``  ;   ``x ^ x = 0``\\\n***\n**来看看应用**\n## 寻找一个单身狗数 #\n像``[1,3,2,2,3]``这样除了某一个数``1``,剩下的数字都是成对的,也就是说遍历一次数组，把所有的元素**按位异或**在一起，结果便是落单的那个``1``\n```C\n//代码实现\nint arr[] = {1,3,2,2,3};\nint sz = sizeof(arr)/sizeof(arr[0]);//求数组大小\nint ret  = 0;\nfor (int i =0;i<sz;i++)\n{\n    ret^=arr[i];\n}\n\nreturn ret; //此时ret即为落单的那个数\n```\n**_变形_**\n## 消失的数 #\n已知一个由0\\~n(缺失一个数)填充的数组，例``[0,6,4,2,3,1]``,例中的数组少了一个``5``,而我们已知数组包含0\\~6中的5个数，就可以将数组元素与0~6**按位异或**到一起，将问题*消失的数*转化为问题*寻找单身狗*,消失的数变成剩下的那个单身狗\n```C\n//代码实现\nint missingNumber(int* nums, int numsSize)\n{\n    int ret = 0;\n    for(int i = 0;i<numsSize;i++>)\n    {\n        ret^=nums[i];//历遍nums的所有元素\n        ret^=i;//历遍0~numsSize-1\n    }\n    ret^=numsSize;//补上numsSize;\n    return ret;\n}\n```\n**_进阶_**\n## 找到两个单身狗 #\n数组再升级，单身狗变成了**两个**，导致不能粗暴地把所有元素按位异或来求出两个数,但我们仍可以将问题简化：能否将两个单身狗分到两个数组，使之转化为两个独立的*求单个单身狗问题*。于是难点来到了如何**分组**\n\n### 方案之一便是运用**按位异或**和**右移运算符** #\n因为两个不同的数，在二进制上作比较，就至少有一位是不同的，以那一位为``0``或``1``分成两组，便可将两个单身狗分开.而若要查找具体是哪一位，将列表中**所有元素**（就包括了两数）**按位异或**后再用**右移运算符**逐位检验是否为``1``,之后便可轻松分组，并直接**按位异或**得出结果\n\n```C\n//代码实现\nint* singleNumber(int* nums, int numsSize, int ret[2]){\n    int ret1 = 0;\n    int ret2 = 0;\n    int n = 0;//用于记录\"1\"在哪一位\n    int tmp = 0;\n    for(int i =0;i<numsSize;i++)\n    {\n        tmp^=nums[i];\n    }\n    while((tmp>>n) !=1 )\n    {\n        n++;\n    }\n    for(int i = 0; i<nums;i++>)//再次历遍\n    {\n        if((nums[i]>>n ==1))//分组1\n        {\n            ret1^=nums[i];\n        }\n        else  //分组2\n        {\n            ret2^=nums[i];\n        }\n    }\n    ret[0] = ret1;\n    ret[1] = ret2;\n    return ret;\n}\n\n```\n\n思考:3个，4个....N个单身狗时呢？","slug":"算法_按位异或","published":1,"updated":"2023-11-14T00:32:03.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvj001xv8p52j8ye71h","content":"<h2 id=\"什么是按位异或\"><a href=\"#什么是按位异或\" class=\"headerlink\" title=\"什么是按位异或^\"></a>什么是按位异或<code>^</code></h2><p>首先将不同数制的数写成<strong>二进制</strong>,例如<code>9-&gt;0b1001</code>.<br>然后最末位对齐，依次<strong>按位异或</strong>.<br>规则:<code>0 ^ 0= 0 ; 1 ^ 1 = 0; 1 ^ 0 = 1</code><br>推论:任意整数<code>x</code>,都有<code>0^x = x</code>  ;   <code>x ^ x = 0</code>\\</p>\n<hr>\n<p><strong>来看看应用</strong></p>\n<h2 id=\"寻找一个单身狗数\"><a href=\"#寻找一个单身狗数\" class=\"headerlink\" title=\"寻找一个单身狗数\"></a>寻找一个单身狗数</h2><p>像<code>[1,3,2,2,3]</code>这样除了某一个数<code>1</code>,剩下的数字都是成对的,也就是说遍历一次数组，把所有的元素<strong>按位异或</strong>在一起，结果便是落单的那个<code>1</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> sz = <span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]);<span class=\"comment\">//求数组大小</span></span><br><span class=\"line\"><span class=\"type\">int</span> ret  = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;sz;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ret^=arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> ret; <span class=\"comment\">//此时ret即为落单的那个数</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>变形</em></strong></p>\n<h2 id=\"消失的数\"><a href=\"#消失的数\" class=\"headerlink\" title=\"消失的数\"></a>消失的数</h2><p>已知一个由0~n(缺失一个数)填充的数组，例<code>[0,6,4,2,3,1]</code>,例中的数组少了一个<code>5</code>,而我们已知数组包含0~6中的5个数，就可以将数组元素与0~6<strong>按位异或</strong>到一起，将问题<em>消失的数</em>转化为问题<em>寻找单身狗</em>,消失的数变成剩下的那个单身狗</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">missingNumber</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;numsSize;i++&gt;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret^=nums[i];<span class=\"comment\">//历遍nums的所有元素</span></span><br><span class=\"line\">        ret^=i;<span class=\"comment\">//历遍0~numsSize-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ret^=numsSize;<span class=\"comment\">//补上numsSize;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>进阶</em></strong></p>\n<h2 id=\"找到两个单身狗\"><a href=\"#找到两个单身狗\" class=\"headerlink\" title=\"找到两个单身狗\"></a>找到两个单身狗</h2><p>数组再升级，单身狗变成了<strong>两个</strong>，导致不能粗暴地把所有元素按位异或来求出两个数,但我们仍可以将问题简化：能否将两个单身狗分到两个数组，使之转化为两个独立的<em>求单个单身狗问题</em>。于是难点来到了如何<strong>分组</strong></p>\n<h3 id=\"方案之一便是运用按位异或和右移运算符\"><a href=\"#方案之一便是运用按位异或和右移运算符\" class=\"headerlink\" title=\"方案之一便是运用按位异或和右移运算符\"></a>方案之一便是运用<strong>按位异或</strong>和<strong>右移运算符</strong></h3><p>因为两个不同的数，在二进制上作比较，就至少有一位是不同的，以那一位为<code>0</code>或<code>1</code>分成两组，便可将两个单身狗分开.而若要查找具体是哪一位，将列表中<strong>所有元素</strong>（就包括了两数）<strong>按位异或</strong>后再用<strong>右移运算符</strong>逐位检验是否为<code>1</code>,之后便可轻松分组，并直接<strong>按位异或</strong>得出结果</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"type\">int</span>* <span class=\"title function_\">singleNumber</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize, <span class=\"type\">int</span> ret[<span class=\"number\">2</span>])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">0</span>;<span class=\"comment\">//用于记录&quot;1&quot;在哪一位</span></span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;numsSize;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp^=nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((tmp&gt;&gt;n) !=<span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;nums;i++&gt;)<span class=\"comment\">//再次历遍</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((nums[i]&gt;&gt;n ==<span class=\"number\">1</span>))<span class=\"comment\">//分组1</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ret1^=nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">//分组2</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ret2^=nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ret[<span class=\"number\">0</span>] = ret1;</span><br><span class=\"line\">    ret[<span class=\"number\">1</span>] = ret2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>思考:3个，4个….N个单身狗时呢？</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"什么是按位异或\"><a href=\"#什么是按位异或\" class=\"headerlink\" title=\"什么是按位异或^\"></a>什么是按位异或<code>^</code></h2><p>首先将不同数制的数写成<strong>二进制</strong>,例如<code>9-&gt;0b1001</code>.<br>然后最末位对齐，依次<strong>按位异或</strong>.<br>规则:<code>0 ^ 0= 0 ; 1 ^ 1 = 0; 1 ^ 0 = 1</code><br>推论:任意整数<code>x</code>,都有<code>0^x = x</code>  ;   <code>x ^ x = 0</code>\\</p>\n<hr>\n<p><strong>来看看应用</strong></p>\n<h2 id=\"寻找一个单身狗数\"><a href=\"#寻找一个单身狗数\" class=\"headerlink\" title=\"寻找一个单身狗数\"></a>寻找一个单身狗数</h2><p>像<code>[1,3,2,2,3]</code>这样除了某一个数<code>1</code>,剩下的数字都是成对的,也就是说遍历一次数组，把所有的元素<strong>按位异或</strong>在一起，结果便是落单的那个<code>1</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> sz = <span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]);<span class=\"comment\">//求数组大小</span></span><br><span class=\"line\"><span class=\"type\">int</span> ret  = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;sz;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ret^=arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> ret; <span class=\"comment\">//此时ret即为落单的那个数</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>变形</em></strong></p>\n<h2 id=\"消失的数\"><a href=\"#消失的数\" class=\"headerlink\" title=\"消失的数\"></a>消失的数</h2><p>已知一个由0~n(缺失一个数)填充的数组，例<code>[0,6,4,2,3,1]</code>,例中的数组少了一个<code>5</code>,而我们已知数组包含0~6中的5个数，就可以将数组元素与0~6<strong>按位异或</strong>到一起，将问题<em>消失的数</em>转化为问题<em>寻找单身狗</em>,消失的数变成剩下的那个单身狗</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">missingNumber</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;numsSize;i++&gt;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret^=nums[i];<span class=\"comment\">//历遍nums的所有元素</span></span><br><span class=\"line\">        ret^=i;<span class=\"comment\">//历遍0~numsSize-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ret^=numsSize;<span class=\"comment\">//补上numsSize;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>进阶</em></strong></p>\n<h2 id=\"找到两个单身狗\"><a href=\"#找到两个单身狗\" class=\"headerlink\" title=\"找到两个单身狗\"></a>找到两个单身狗</h2><p>数组再升级，单身狗变成了<strong>两个</strong>，导致不能粗暴地把所有元素按位异或来求出两个数,但我们仍可以将问题简化：能否将两个单身狗分到两个数组，使之转化为两个独立的<em>求单个单身狗问题</em>。于是难点来到了如何<strong>分组</strong></p>\n<h3 id=\"方案之一便是运用按位异或和右移运算符\"><a href=\"#方案之一便是运用按位异或和右移运算符\" class=\"headerlink\" title=\"方案之一便是运用按位异或和右移运算符\"></a>方案之一便是运用<strong>按位异或</strong>和<strong>右移运算符</strong></h3><p>因为两个不同的数，在二进制上作比较，就至少有一位是不同的，以那一位为<code>0</code>或<code>1</code>分成两组，便可将两个单身狗分开.而若要查找具体是哪一位，将列表中<strong>所有元素</strong>（就包括了两数）<strong>按位异或</strong>后再用<strong>右移运算符</strong>逐位检验是否为<code>1</code>,之后便可轻松分组，并直接<strong>按位异或</strong>得出结果</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"type\">int</span>* <span class=\"title function_\">singleNumber</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize, <span class=\"type\">int</span> ret[<span class=\"number\">2</span>])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">0</span>;<span class=\"comment\">//用于记录&quot;1&quot;在哪一位</span></span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;numsSize;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp^=nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((tmp&gt;&gt;n) !=<span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;nums;i++&gt;)<span class=\"comment\">//再次历遍</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((nums[i]&gt;&gt;n ==<span class=\"number\">1</span>))<span class=\"comment\">//分组1</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ret1^=nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">//分组2</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ret2^=nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ret[<span class=\"number\">0</span>] = ret1;</span><br><span class=\"line\">    ret[<span class=\"number\">1</span>] = ret2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>思考:3个，4个….N个单身狗时呢？</p>\n"},{"title":"=算法=双指针的种种应用(更新中)","date":"2023-09-12T10:40:44.000Z","cover":"https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-02_10-34-45.jpg","_content":"\n*注：本文写于C语言学习早期，双指针的用法较为基础且不全面。本文章将涉及C语言数组至数据结构的链表*\n\n## Q:为什么要用双指针? #\nA:因为\n通过使用双指针可以使算法的**时间复杂度降低**(或者降低遍历次数),有时也能**降低空间复杂度**\n\n## 分类 #\n根据双指针的用法，可分为**前后双指针**,**头尾双指针**,**快慢双指针**.....\n\n---\n# 以下为各种双指针的应用及介绍 #\n## 前后双指针 #\n\n#### 应用一 删除排序数组中的重复项 #\n**要求**:原地删除,并返回新数组的长度，不需要考虑数组中超出新长度后面的元素。\n\n**思路**:通过创建一前一后两个指针，**前指针**指向**上一个元素**，**后指针**向后历遍,一旦**找到**不同的元素,前指针指向**下一个位置，并视为空位**，通过**后指针**找到目标元素,并存入前指针目前所指向的**空位**。然后**后指针**接着遍历，直至遍历整个数组.\n\n```C\n//代码实现\nint removeDuplicates(int* nums, int numsSize){\n    int* left = nums;\n    int*right = nums+1;\n    int ret = 1;\n    //遍历数组\n    for (int i=0;i<numsSize-1;i++)\n    {\n        if(*left != *right)\n        {\n            left++;\n            *left = *right;\n            right++;\n            ret++;\n        }\n        else\n        {\n            right++;\n        }\n    }\n    return ret;\n}\n```\n**分析**:这个函数只遍历的一遍数组，没有复制数组,所以**时间复杂度**为``O(n)``,**空间复杂度**为``O(1)``;\n\n---\n## 头尾双指针 #\n#### 应用一 翻转数组/字符串 #\n关于翻转，首先想到的应该是创建一个**等长的空数组**，再同时顺序遍历**原数组**和逆序遍历**空数组**，逐位储存到空数组，然后再同时顺序遍历两个数组，将**已逆序**的数组拷贝至原数组\n\n**缺点**：需要**多次**遍历，且**空间复杂度**为O(n)\n\n**使用双指针优化**：整个数组的翻转可逐步拆解为：第一个和最后一个互换、第二个和倒数第二个互换、、、第N个数和倒数第N个数互换，直至中间。此处便可使用**双指针**，头尾指针各自一边**交换**所指向的内容，一边**向中间靠近**\n```C\n//代码实现-这里是翻转字符串\nvoid reverseString(char* s, int sSize){\n    int *left = s;//头指针\n    int *right = s + sSize-1;//尾指针\n    while(left<right)//尚未到达中间时\n    {\n        char tmp = *left;\n        *left = *right;\n        *right = tmp;\n        left++;\n        right--;\n    }\n}\n```\n\n---\n## 快慢双指针 #\n#### 应用一 删除链表倒数第K个节点  #\n**一般解法**：先遍历一遍链表获得链表总数N,再二次遍历到N-K处的节点，并执行删除\n\n**如何优化**：使用快慢双指针，仅需遍历一次，就能用慢指针定位目标节点\n\n```C\n//代码实现\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n){\n    //创建哨兵位解决头删问题\n    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));\n    dummy->val = 0;\n    dummy->next = head;\n\n    struct ListNode* slow = dummy;\n    struct ListNode* fast = dummy;\n    while (int i = 0;i<n+1;n++)//移动fast\n    {\n        fast = fast->next;\n    }\n    \n    while(fast != NULL)//同时遍历\n    {\n        fast= fast->next;\n        slow= slow->next;\n    }\n    //此时slow指向目标节点的前一个节点\n    struct ListNode* tmp = slow->next;\n    slow->next = slow->next->next;\n    free(tmp);\n    return dummy->next;\n}\n```\n\n\n#### 应用二 找出并返回链表中间的节点 #\n\n**注**:偶数个节点时删除**前一个**中间节点\n\n**一般解法**：依然是先遍历一遍链表，然后定位中间的节点,二次遍历\n\n**如何优化**：使用**慢指针**(一步走一个节点)和**快指针**(一步走两个节点)，二者同时遍历，直至**快指针**指向`NULL`或快指针指向`尾节点`\n\n当遍历结束时，慢指针指向目标中间节点\n\n```C\n//代码实现\nstruct ListNode* middleNode(struct ListNode* head){\n    struct ListNode *slow = head;\n    struct ListNode *fast = head;\n    while(fast && fast->next)\n    {\n        slow = slow->next;\n        fast = fast->next->next; \n    }\n\n    return slow;\n}\n```\n\n## 应用三 循环链表问题 #\n","source":"_posts/双指针.md","raw":"---\ntitle: =算法=双指针的种种应用(更新中)\ndate: 2023-09-12 18:40:44\ntags: 算法\ncover: https://picbed0521.oss-cn-shanghai.aliyuncs.com/blogpic/Snipaste_2023-11-02_10-34-45.jpg\n---\n\n*注：本文写于C语言学习早期，双指针的用法较为基础且不全面。本文章将涉及C语言数组至数据结构的链表*\n\n## Q:为什么要用双指针? #\nA:因为\n通过使用双指针可以使算法的**时间复杂度降低**(或者降低遍历次数),有时也能**降低空间复杂度**\n\n## 分类 #\n根据双指针的用法，可分为**前后双指针**,**头尾双指针**,**快慢双指针**.....\n\n---\n# 以下为各种双指针的应用及介绍 #\n## 前后双指针 #\n\n#### 应用一 删除排序数组中的重复项 #\n**要求**:原地删除,并返回新数组的长度，不需要考虑数组中超出新长度后面的元素。\n\n**思路**:通过创建一前一后两个指针，**前指针**指向**上一个元素**，**后指针**向后历遍,一旦**找到**不同的元素,前指针指向**下一个位置，并视为空位**，通过**后指针**找到目标元素,并存入前指针目前所指向的**空位**。然后**后指针**接着遍历，直至遍历整个数组.\n\n```C\n//代码实现\nint removeDuplicates(int* nums, int numsSize){\n    int* left = nums;\n    int*right = nums+1;\n    int ret = 1;\n    //遍历数组\n    for (int i=0;i<numsSize-1;i++)\n    {\n        if(*left != *right)\n        {\n            left++;\n            *left = *right;\n            right++;\n            ret++;\n        }\n        else\n        {\n            right++;\n        }\n    }\n    return ret;\n}\n```\n**分析**:这个函数只遍历的一遍数组，没有复制数组,所以**时间复杂度**为``O(n)``,**空间复杂度**为``O(1)``;\n\n---\n## 头尾双指针 #\n#### 应用一 翻转数组/字符串 #\n关于翻转，首先想到的应该是创建一个**等长的空数组**，再同时顺序遍历**原数组**和逆序遍历**空数组**，逐位储存到空数组，然后再同时顺序遍历两个数组，将**已逆序**的数组拷贝至原数组\n\n**缺点**：需要**多次**遍历，且**空间复杂度**为O(n)\n\n**使用双指针优化**：整个数组的翻转可逐步拆解为：第一个和最后一个互换、第二个和倒数第二个互换、、、第N个数和倒数第N个数互换，直至中间。此处便可使用**双指针**，头尾指针各自一边**交换**所指向的内容，一边**向中间靠近**\n```C\n//代码实现-这里是翻转字符串\nvoid reverseString(char* s, int sSize){\n    int *left = s;//头指针\n    int *right = s + sSize-1;//尾指针\n    while(left<right)//尚未到达中间时\n    {\n        char tmp = *left;\n        *left = *right;\n        *right = tmp;\n        left++;\n        right--;\n    }\n}\n```\n\n---\n## 快慢双指针 #\n#### 应用一 删除链表倒数第K个节点  #\n**一般解法**：先遍历一遍链表获得链表总数N,再二次遍历到N-K处的节点，并执行删除\n\n**如何优化**：使用快慢双指针，仅需遍历一次，就能用慢指针定位目标节点\n\n```C\n//代码实现\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n){\n    //创建哨兵位解决头删问题\n    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));\n    dummy->val = 0;\n    dummy->next = head;\n\n    struct ListNode* slow = dummy;\n    struct ListNode* fast = dummy;\n    while (int i = 0;i<n+1;n++)//移动fast\n    {\n        fast = fast->next;\n    }\n    \n    while(fast != NULL)//同时遍历\n    {\n        fast= fast->next;\n        slow= slow->next;\n    }\n    //此时slow指向目标节点的前一个节点\n    struct ListNode* tmp = slow->next;\n    slow->next = slow->next->next;\n    free(tmp);\n    return dummy->next;\n}\n```\n\n\n#### 应用二 找出并返回链表中间的节点 #\n\n**注**:偶数个节点时删除**前一个**中间节点\n\n**一般解法**：依然是先遍历一遍链表，然后定位中间的节点,二次遍历\n\n**如何优化**：使用**慢指针**(一步走一个节点)和**快指针**(一步走两个节点)，二者同时遍历，直至**快指针**指向`NULL`或快指针指向`尾节点`\n\n当遍历结束时，慢指针指向目标中间节点\n\n```C\n//代码实现\nstruct ListNode* middleNode(struct ListNode* head){\n    struct ListNode *slow = head;\n    struct ListNode *fast = head;\n    while(fast && fast->next)\n    {\n        slow = slow->next;\n        fast = fast->next->next; \n    }\n\n    return slow;\n}\n```\n\n## 应用三 循环链表问题 #\n","slug":"双指针","published":1,"updated":"2024-05-08T23:46:46.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzfbulvj001zv8p58kg98e98","content":"<p><em>注：本文写于C语言学习早期，双指针的用法较为基础且不全面。本文章将涉及C语言数组至数据结构的链表</em></p>\n<h2 id=\"Q-为什么要用双指针\"><a href=\"#Q-为什么要用双指针\" class=\"headerlink\" title=\"Q:为什么要用双指针?\"></a>Q:为什么要用双指针?</h2><p>A:因为<br>通过使用双指针可以使算法的<strong>时间复杂度降低</strong>(或者降低遍历次数),有时也能<strong>降低空间复杂度</strong></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><p>根据双指针的用法，可分为<strong>前后双指针</strong>,<strong>头尾双指针</strong>,<strong>快慢双指针</strong>…..</p>\n<hr>\n<h1 id=\"以下为各种双指针的应用及介绍\"><a href=\"#以下为各种双指针的应用及介绍\" class=\"headerlink\" title=\"以下为各种双指针的应用及介绍\"></a>以下为各种双指针的应用及介绍</h1><h2 id=\"前后双指针\"><a href=\"#前后双指针\" class=\"headerlink\" title=\"前后双指针\"></a>前后双指针</h2><h4 id=\"应用一-删除排序数组中的重复项\"><a href=\"#应用一-删除排序数组中的重复项\" class=\"headerlink\" title=\"应用一 删除排序数组中的重复项\"></a>应用一 删除排序数组中的重复项</h4><p><strong>要求</strong>:原地删除,并返回新数组的长度，不需要考虑数组中超出新长度后面的元素。</p>\n<p><strong>思路</strong>:通过创建一前一后两个指针，<strong>前指针</strong>指向<strong>上一个元素</strong>，<strong>后指针</strong>向后历遍,一旦<strong>找到</strong>不同的元素,前指针指向<strong>下一个位置，并视为空位</strong>，通过<strong>后指针</strong>找到目标元素,并存入前指针目前所指向的<strong>空位</strong>。然后<strong>后指针</strong>接着遍历，直至遍历整个数组.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">removeDuplicates</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* left = nums;</span><br><span class=\"line\">    <span class=\"type\">int</span>*right = nums+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;numsSize<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*left != *right)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            *left = *right;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">            ret++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析</strong>:这个函数只遍历的一遍数组，没有复制数组,所以<strong>时间复杂度</strong>为<code>O(n)</code>,<strong>空间复杂度</strong>为<code>O(1)</code>;</p>\n<hr>\n<h2 id=\"头尾双指针\"><a href=\"#头尾双指针\" class=\"headerlink\" title=\"头尾双指针\"></a>头尾双指针</h2><h4 id=\"应用一-翻转数组-字符串\"><a href=\"#应用一-翻转数组-字符串\" class=\"headerlink\" title=\"应用一 翻转数组&#x2F;字符串\"></a>应用一 翻转数组&#x2F;字符串</h4><p>关于翻转，首先想到的应该是创建一个<strong>等长的空数组</strong>，再同时顺序遍历<strong>原数组</strong>和逆序遍历<strong>空数组</strong>，逐位储存到空数组，然后再同时顺序遍历两个数组，将<strong>已逆序</strong>的数组拷贝至原数组</p>\n<p><strong>缺点</strong>：需要<strong>多次</strong>遍历，且<strong>空间复杂度</strong>为O(n)</p>\n<p><strong>使用双指针优化</strong>：整个数组的翻转可逐步拆解为：第一个和最后一个互换、第二个和倒数第二个互换、、、第N个数和倒数第N个数互换，直至中间。此处便可使用<strong>双指针</strong>，头尾指针各自一边<strong>交换</strong>所指向的内容，一边<strong>向中间靠近</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现-这里是翻转字符串</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">reverseString</span><span class=\"params\">(<span class=\"type\">char</span>* s, <span class=\"type\">int</span> sSize)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *left = s;<span class=\"comment\">//头指针</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *right = s + sSize<span class=\"number\">-1</span>;<span class=\"comment\">//尾指针</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;right)<span class=\"comment\">//尚未到达中间时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> tmp = *left;</span><br><span class=\"line\">        *left = *right;</span><br><span class=\"line\">        *right = tmp;</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"快慢双指针\"><a href=\"#快慢双指针\" class=\"headerlink\" title=\"快慢双指针\"></a>快慢双指针</h2><h4 id=\"应用一-删除链表倒数第K个节点\"><a href=\"#应用一-删除链表倒数第K个节点\" class=\"headerlink\" title=\"应用一 删除链表倒数第K个节点\"></a>应用一 删除链表倒数第K个节点</h4><p><strong>一般解法</strong>：先遍历一遍链表获得链表总数N,再二次遍历到N-K处的节点，并执行删除</p>\n<p><strong>如何优化</strong>：使用快慢双指针，仅需遍历一次，就能用慢指针定位目标节点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">removeNthFromEnd</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* head, <span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建哨兵位解决头删问题</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">dummy</span> =</span> (<span class=\"keyword\">struct</span> ListNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</span><br><span class=\"line\">    dummy-&gt;val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dummy-&gt;next = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">slow</span> =</span> dummy;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">fast</span> =</span> dummy;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;n+<span class=\"number\">1</span>;n++)<span class=\"comment\">//移动fast</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fast = fast-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"literal\">NULL</span>)<span class=\"comment\">//同时遍历</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fast= fast-&gt;next;</span><br><span class=\"line\">        slow= slow-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//此时slow指向目标节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">tmp</span> =</span> slow-&gt;next;</span><br><span class=\"line\">    slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(tmp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"应用二-找出并返回链表中间的节点\"><a href=\"#应用二-找出并返回链表中间的节点\" class=\"headerlink\" title=\"应用二 找出并返回链表中间的节点\"></a>应用二 找出并返回链表中间的节点</h4><p><strong>注</strong>:偶数个节点时删除<strong>前一个</strong>中间节点</p>\n<p><strong>一般解法</strong>：依然是先遍历一遍链表，然后定位中间的节点,二次遍历</p>\n<p><strong>如何优化</strong>：使用<strong>慢指针</strong>(一步走一个节点)和<strong>快指针</strong>(一步走两个节点)，二者同时遍历，直至<strong>快指针</strong>指向<code>NULL</code>或快指针指向<code>尾节点</code></p>\n<p>当遍历结束时，慢指针指向目标中间节点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">middleNode</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* head)</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> *<span class=\"title\">slow</span> =</span> head;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> *<span class=\"title\">fast</span> =</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast &amp;&amp; fast-&gt;next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">        fast = fast-&gt;next-&gt;next; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用三-循环链表问题\"><a href=\"#应用三-循环链表问题\" class=\"headerlink\" title=\"应用三 循环链表问题\"></a>应用三 循环链表问题</h2>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"},{"name":"Lwt","link":"https://www.lwt-server.cn/","avatar":"https://www.lwt-server.cn/images/avatar.jpg","descr":null,"siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<p><em>注：本文写于C语言学习早期，双指针的用法较为基础且不全面。本文章将涉及C语言数组至数据结构的链表</em></p>\n<h2 id=\"Q-为什么要用双指针\"><a href=\"#Q-为什么要用双指针\" class=\"headerlink\" title=\"Q:为什么要用双指针?\"></a>Q:为什么要用双指针?</h2><p>A:因为<br>通过使用双指针可以使算法的<strong>时间复杂度降低</strong>(或者降低遍历次数),有时也能<strong>降低空间复杂度</strong></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><p>根据双指针的用法，可分为<strong>前后双指针</strong>,<strong>头尾双指针</strong>,<strong>快慢双指针</strong>…..</p>\n<hr>\n<h1 id=\"以下为各种双指针的应用及介绍\"><a href=\"#以下为各种双指针的应用及介绍\" class=\"headerlink\" title=\"以下为各种双指针的应用及介绍\"></a>以下为各种双指针的应用及介绍</h1><h2 id=\"前后双指针\"><a href=\"#前后双指针\" class=\"headerlink\" title=\"前后双指针\"></a>前后双指针</h2><h4 id=\"应用一-删除排序数组中的重复项\"><a href=\"#应用一-删除排序数组中的重复项\" class=\"headerlink\" title=\"应用一 删除排序数组中的重复项\"></a>应用一 删除排序数组中的重复项</h4><p><strong>要求</strong>:原地删除,并返回新数组的长度，不需要考虑数组中超出新长度后面的元素。</p>\n<p><strong>思路</strong>:通过创建一前一后两个指针，<strong>前指针</strong>指向<strong>上一个元素</strong>，<strong>后指针</strong>向后历遍,一旦<strong>找到</strong>不同的元素,前指针指向<strong>下一个位置，并视为空位</strong>，通过<strong>后指针</strong>找到目标元素,并存入前指针目前所指向的<strong>空位</strong>。然后<strong>后指针</strong>接着遍历，直至遍历整个数组.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">removeDuplicates</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* left = nums;</span><br><span class=\"line\">    <span class=\"type\">int</span>*right = nums+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;numsSize<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*left != *right)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            *left = *right;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">            ret++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析</strong>:这个函数只遍历的一遍数组，没有复制数组,所以<strong>时间复杂度</strong>为<code>O(n)</code>,<strong>空间复杂度</strong>为<code>O(1)</code>;</p>\n<hr>\n<h2 id=\"头尾双指针\"><a href=\"#头尾双指针\" class=\"headerlink\" title=\"头尾双指针\"></a>头尾双指针</h2><h4 id=\"应用一-翻转数组-字符串\"><a href=\"#应用一-翻转数组-字符串\" class=\"headerlink\" title=\"应用一 翻转数组&#x2F;字符串\"></a>应用一 翻转数组&#x2F;字符串</h4><p>关于翻转，首先想到的应该是创建一个<strong>等长的空数组</strong>，再同时顺序遍历<strong>原数组</strong>和逆序遍历<strong>空数组</strong>，逐位储存到空数组，然后再同时顺序遍历两个数组，将<strong>已逆序</strong>的数组拷贝至原数组</p>\n<p><strong>缺点</strong>：需要<strong>多次</strong>遍历，且<strong>空间复杂度</strong>为O(n)</p>\n<p><strong>使用双指针优化</strong>：整个数组的翻转可逐步拆解为：第一个和最后一个互换、第二个和倒数第二个互换、、、第N个数和倒数第N个数互换，直至中间。此处便可使用<strong>双指针</strong>，头尾指针各自一边<strong>交换</strong>所指向的内容，一边<strong>向中间靠近</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现-这里是翻转字符串</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">reverseString</span><span class=\"params\">(<span class=\"type\">char</span>* s, <span class=\"type\">int</span> sSize)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *left = s;<span class=\"comment\">//头指针</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *right = s + sSize<span class=\"number\">-1</span>;<span class=\"comment\">//尾指针</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;right)<span class=\"comment\">//尚未到达中间时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> tmp = *left;</span><br><span class=\"line\">        *left = *right;</span><br><span class=\"line\">        *right = tmp;</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"快慢双指针\"><a href=\"#快慢双指针\" class=\"headerlink\" title=\"快慢双指针\"></a>快慢双指针</h2><h4 id=\"应用一-删除链表倒数第K个节点\"><a href=\"#应用一-删除链表倒数第K个节点\" class=\"headerlink\" title=\"应用一 删除链表倒数第K个节点\"></a>应用一 删除链表倒数第K个节点</h4><p><strong>一般解法</strong>：先遍历一遍链表获得链表总数N,再二次遍历到N-K处的节点，并执行删除</p>\n<p><strong>如何优化</strong>：使用快慢双指针，仅需遍历一次，就能用慢指针定位目标节点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">removeNthFromEnd</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* head, <span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建哨兵位解决头删问题</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">dummy</span> =</span> (<span class=\"keyword\">struct</span> ListNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</span><br><span class=\"line\">    dummy-&gt;val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dummy-&gt;next = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">slow</span> =</span> dummy;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">fast</span> =</span> dummy;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;n+<span class=\"number\">1</span>;n++)<span class=\"comment\">//移动fast</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fast = fast-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"literal\">NULL</span>)<span class=\"comment\">//同时遍历</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fast= fast-&gt;next;</span><br><span class=\"line\">        slow= slow-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//此时slow指向目标节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">tmp</span> =</span> slow-&gt;next;</span><br><span class=\"line\">    slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(tmp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"应用二-找出并返回链表中间的节点\"><a href=\"#应用二-找出并返回链表中间的节点\" class=\"headerlink\" title=\"应用二 找出并返回链表中间的节点\"></a>应用二 找出并返回链表中间的节点</h4><p><strong>注</strong>:偶数个节点时删除<strong>前一个</strong>中间节点</p>\n<p><strong>一般解法</strong>：依然是先遍历一遍链表，然后定位中间的节点,二次遍历</p>\n<p><strong>如何优化</strong>：使用<strong>慢指针</strong>(一步走一个节点)和<strong>快指针</strong>(一步走两个节点)，二者同时遍历，直至<strong>快指针</strong>指向<code>NULL</code>或快指针指向<code>尾节点</code></p>\n<p>当遍历结束时，慢指针指向目标中间节点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">middleNode</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* head)</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> *<span class=\"title\">slow</span> =</span> head;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> *<span class=\"title\">fast</span> =</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast &amp;&amp; fast-&gt;next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">        fast = fast-&gt;next-&gt;next; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用三-循环链表问题\"><a href=\"#应用三-循环链表问题\" class=\"headerlink\" title=\"应用三 循环链表问题\"></a>应用三 循环链表问题</h2>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clzfbuluz0001v8p55jfk5r8m","tag_id":"clzfbulv20004v8p5e1prf9mu","_id":"clzfbulv5000cv8p57fy5gcmk"},{"post_id":"clzfbulv30006v8p5h1ln53ys","tag_id":"clzfbulv5000bv8p57q9124rd","_id":"clzfbulv7000hv8p50gxldnjd"},{"post_id":"clzfbulv40008v8p59f3qdf2o","tag_id":"clzfbulv6000fv8p530h43vvd","_id":"clzfbulv8000lv8p5ggp780ri"},{"post_id":"clzfbulv5000dv8p5hrut3lxt","tag_id":"clzfbulv7000jv8p57aibhgiq","_id":"clzfbulv9000pv8p53b008r0v"},{"post_id":"clzfbulv8000mv8p57s7baoky","tag_id":"clzfbulv5000bv8p57q9124rd","_id":"clzfbulv9000rv8p531rzf72t"},{"post_id":"clzfbulv5000ev8p58qbobun9","tag_id":"clzfbulv8000nv8p5bq575ww9","_id":"clzfbulva000uv8p520y58bz7"},{"post_id":"clzfbulv7000iv8p54ach2pw5","tag_id":"clzfbulv8000nv8p5bq575ww9","_id":"clzfbulvb000yv8p5bwjhdbt5"},{"post_id":"clzfbulv7000kv8p5anw08n1h","tag_id":"clzfbulvb000xv8p52qqnhpey","_id":"clzfbulvc0013v8p531ihaw45"},{"post_id":"clzfbulvb0010v8p540wc9lkl","tag_id":"clzfbulv5000bv8p57q9124rd","_id":"clzfbulvc0015v8p5b0tvapnu"},{"post_id":"clzfbulv8000ov8p5dhjw0ikv","tag_id":"clzfbulvc0011v8p5ckq03vvw","_id":"clzfbulvd0017v8p51205gfpv"},{"post_id":"clzfbulv9000qv8p5erei19ri","tag_id":"clzfbulvc0016v8p58uxjd4ob","_id":"clzfbulvd0019v8p55t3o2323"},{"post_id":"clzfbulv9000sv8p56mkjgayi","tag_id":"clzfbulvd0018v8p5ch7fahjk","_id":"clzfbulvd001bv8p55iuvbnw0"},{"post_id":"clzfbulva000vv8p52em2bvbv","tag_id":"clzfbulvd001av8p521dyglom","_id":"clzfbulvd001dv8p5hnlggq6p"},{"post_id":"clzfbulvb000wv8p59yomc57z","tag_id":"clzfbulvd001cv8p58vrmad3s","_id":"clzfbulvd001fv8p5717jg053"},{"post_id":"clzfbulvb000zv8p5dlksbkba","tag_id":"clzfbulvd001ev8p56qyx9rpn","_id":"clzfbulve001hv8p5ahere7bh"},{"post_id":"clzfbulvc0012v8p57vsycqax","tag_id":"clzfbulvd001gv8p59v072ayo","_id":"clzfbulve001iv8p53vixa65t"},{"post_id":"clzfbulvf001lv8p560fq721p","tag_id":"clzfbulvg001nv8p5aqjyaiau","_id":"clzfbulvi001sv8p501rx2d0x"},{"post_id":"clzfbulvi001qv8p5675c887p","tag_id":"clzfbulv6000fv8p530h43vvd","_id":"clzfbulvi001uv8p5ayab61qb"},{"post_id":"clzfbulvf001mv8p5g9bt7j72","tag_id":"clzfbulvi001rv8p5bk1f3c37","_id":"clzfbulvj001yv8p51czgenl3"},{"post_id":"clzfbulvi001tv8p52tg67boq","tag_id":"clzfbulvj001wv8p57ipz0fgg","_id":"clzfbulvk0021v8p51zk95c9n"},{"post_id":"clzfbulvi001vv8p58y6i43og","tag_id":"clzfbulvj0020v8p58g53el7h","_id":"clzfbulvk0023v8p5bkepe73v"},{"post_id":"clzfbulvj001xv8p52j8ye71h","tag_id":"clzfbulvk0022v8p5cmzs2nm1","_id":"clzfbulvk0025v8p5hhhubexs"},{"post_id":"clzfbulvj001zv8p58kg98e98","tag_id":"clzfbulvk0022v8p5cmzs2nm1","_id":"clzfbulvk0026v8p56qwvacdq"}],"Tag":[{"name":"数据结构 二叉树 搜索树","_id":"clzfbulv20004v8p5e1prf9mu"},{"name":"Linux","_id":"clzfbulv5000bv8p57q9124rd"},{"name":"C语言","_id":"clzfbulv6000fv8p530h43vvd"},{"name":"C++ 文件","_id":"clzfbulv7000jv8p57aibhgiq"},{"name":"C++ 类和对象","_id":"clzfbulv8000nv8p5bq575ww9"},{"name":"环境变量","_id":"clzfbulvb000xv8p52qqnhpey"},{"name":"fork Linux","_id":"clzfbulvc0011v8p5ckq03vvw"},{"name":"七大排序 堆排序 排序","_id":"clzfbulvc0016v8p58uxjd4ob"},{"name":"动态库 静态库","_id":"clzfbulvd0018v8p5ch7fahjk"},{"name":"排序 算法","_id":"clzfbulvd001av8p521dyglom"},{"name":"C语言 实践项目","_id":"clzfbulvd001cv8p58vrmad3s"},{"name":"C语言 多组输入","_id":"clzfbulvd001ev8p56qyx9rpn"},{"name":"Linux C","_id":"clzfbulvd001gv8p59v072ayo"},{"name":"进程 Linux","_id":"clzfbulvg001nv8p5aqjyaiau"},{"name":"C语言 字符串 数组","_id":"clzfbulvi001rv8p5bk1f3c37"},{"name":"Linux vim","_id":"clzfbulvj001wv8p57ipz0fgg"},{"name":"回顾","_id":"clzfbulvj0020v8p58g53el7h"},{"name":"算法","_id":"clzfbulvk0022v8p5cmzs2nm1"}]}}